<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Identityserver on Piotr Kościelniak - passionate programmer</title>
    <link>http://koscielniak.me/tags/identityserver/</link>
    <description>Recent content in Identityserver on Piotr Kościelniak - passionate programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 May 2016 22:00:00 +0200</lastBuildDate>
    <atom:link href="http://koscielniak.me/tags/identityserver/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Google Identity Provider with IdentityServer4</title>
      <link>http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/</link>
      <pubDate>Wed, 11 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, I am going to continue my series about
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4&#34; target=&#34;_blank&#34;&gt;IdenityServer4&lt;/a&gt;.
I will write about forcing IdentityServer to use Google as an external identity token provider. Before I started, I had to register the application that will interact with Google which in my case is &lt;em&gt;IdSrvHost&lt;/em&gt;.
I am going to reuse the application that I registered in this
&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;post&lt;/a&gt;.
However, I altered the configuration of this application a bit by enabling access to &lt;em&gt;Google+ API&lt;/em&gt;. I did this by entering &lt;em&gt;Google APIs&lt;/em&gt; and then inside &lt;em&gt;Social APIs&lt;/em&gt; I clicked &lt;em&gt;Google+ API&lt;/em&gt;. You can see this on this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/google-plus-api.png&#34; alt=&#34;Enabling Google+ API&#34; title=&#34;Enabling Google+ API&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I simply clicked &lt;em&gt;Enable&lt;/em&gt;. And that was it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/enabling-google-plus-api.png&#34; alt=&#34;Enabling Google+ API&#34; title=&#34;Enabling Google+ API&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I then added &lt;em&gt;clientId&lt;/em&gt; and &lt;em&gt;clientSecret&lt;/em&gt; to my secret settings. I wrote about that in
&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next step was adding the Google external identity provider to my project with IdentityServer4. I wrote
&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;here&lt;/a&gt;
and
&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;here&lt;/a&gt;
about creating this project and now I have altered it to add an external provider.&lt;/p&gt;

&lt;p&gt;The first thing which I did was to add a dependency to &lt;em&gt;project.json&lt;/em&gt; and it was called &lt;em&gt;Microsoft.AspNet.Authentication.Google&lt;/em&gt;. At the time this post was written, it was in version: &lt;em&gt;1.0.0-rc1-final&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then inside &lt;em&gt;Configure&lt;/em&gt; method of &lt;em&gt;Startup&lt;/em&gt; class I added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.UseCookieAuthentication(options =&amp;gt;
    {
        options.AuthenticationScheme = &amp;quot;External&amp;quot;;
    });

    app.UseGoogleAuthentication(options =&amp;gt;
    {
        options.AuthenticationScheme = &amp;quot;Google&amp;quot;;
        options.SignInScheme = &amp;quot;External&amp;quot;;

        options.ClientId = Configuration[&amp;quot;GoogleIdentityProvider:ClientId&amp;quot;];
        options.ClientSecret = Configuration[&amp;quot;GoogleIdentityProvider:ClientSecret&amp;quot;];
        options.CallbackPath = new PathString(&amp;quot;/googlecallback&amp;quot;);                
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did this right after the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.UseIdentityServer();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I will explain a bit about what I did here. First of all, I specified &lt;em&gt;CallbackPath&lt;/em&gt; in the options for &lt;em&gt;UseGoogleAuthentication&lt;/em&gt; but that is not necessary. If you don’t specify the redirect URI, the default will be &lt;em&gt;&lt;a href=&#34;http://url_of_app/signin-google&#34;&gt;http://url_of_app/signin-google&lt;/a&gt;&lt;/em&gt; which I learned when I got the following error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/redirect-uri-mismatch.png&#34; alt=&#34;Redirect URI mismatch&#34; title=&#34;Redirect URI mismatch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I decided to add something different to see if it would work.&lt;/p&gt;

&lt;p&gt;You may be asking: why did I need to add two middlewares? To answer to this question, I must explain that the flow follows the authentication to Google. Now when you login with my Identity Provider (&lt;em&gt;IdSrvHost&lt;/em&gt;) you see a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/login-screen.png&#34; alt=&#34;Login Screen&#34; title=&#34;Login Screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;Google&lt;/em&gt; button comes from the code in the &lt;em&gt;Login/Index.cshtml&lt;/em&gt; view like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@if (Model.ExternalProviders.Any())
{
    &amp;lt;div class=&amp;quot;col-md-6 col-sm-6 external-providers&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;panel panel-default&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;panel-heading&amp;quot;&amp;gt;
                &amp;lt;h3 class=&amp;quot;panel-title&amp;quot;&amp;gt;External Login&amp;lt;/h3&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&amp;quot;panel-body&amp;quot;&amp;gt;
                &amp;lt;ul class=&amp;quot;list-inline&amp;quot;&amp;gt;
                    @foreach (var externalProvider in Model.ExternalProviders)
                    {
                        &amp;lt;li&amp;gt;
                            &amp;lt;a class=&amp;quot;btn btn-default&amp;quot;
                               href=&amp;quot;@Url.Action(&amp;quot;ExternalLogin&amp;quot;, 
                                    new
                                    {
                                        provider = externalProvider.AuthenticationScheme,
                                        signInId = Model.SignInId
                                    })&amp;quot;&amp;gt;
                                @externalProvider.Text
                            &amp;lt;/a&amp;gt;
                        &amp;lt;/li&amp;gt;
                    }
                &amp;lt;/ul&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;em&gt;ExternalProviders&lt;/em&gt; in the model I added in the &lt;em&gt;Login&lt;/em&gt; method in &lt;em&gt;LoginController&lt;/em&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var vm = new LoginViewModel();
vm.ExternalProviders.Add(ExternalProvider.Google);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;var loginProviders = HttpContext.Authentication.GetAuthenticationSchemes().ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then I would have to filter these schemes and choose only the external providers. I would rather be more explicit at this stage of my solution and that’s why I decided to create  an explicit list of external providers.&lt;/p&gt;

&lt;p&gt;So&amp;hellip;what happens when the user clicks the &lt;em&gt;Google&lt;/em&gt; button. They see a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/allow-access.png&#34; alt=&#34;Allow access&#34; title=&#34;Allow access&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When they click &lt;em&gt;Allow&lt;/em&gt; they see a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/oidc-client-is-requesting-your-permission.png&#34; alt=&#34;OIDC Client is requesting your permission&#34; title=&#34;OIDC Client is requesting your permission&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Take a notice that this screen comes from my Identity Provider. Next, when the user clicks &lt;em&gt;Yes, Allow&lt;/em&gt; they are redirected to the application they came from.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/final-result.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a flow from a GUI perspective. And now flow from the backend perspective.&lt;/p&gt;

&lt;p&gt;After clicking &lt;em&gt;Login Only&lt;/em&gt; in the &lt;em&gt;JavaScript Oidc Client&lt;/em&gt;, there is a redirection to the method &lt;em&gt;Index&lt;/em&gt; in the &lt;em&gt;LoginController&lt;/em&gt;. Then the &lt;em&gt;Index&lt;/em&gt; view is presented. After clicking the &lt;em&gt;Google&lt;/em&gt; button, the action &lt;em&gt;ExternalLogin&lt;/em&gt; is executed in the same controller and the parameter &lt;em&gt;provider&lt;/em&gt; is set to &lt;em&gt;Google&lt;/em&gt;. This method looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public IActionResult ExternalLogin(string provider, string signInId)
{
    var props = new AuthenticationProperties
    {
        RedirectUri = &amp;quot;/login/callback?signInId=&amp;quot; + signInId
    };

    return new ChallengeResult(provider, props);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I return &lt;em&gt;ChallengeResult&lt;/em&gt; with &lt;em&gt;Google&lt;/em&gt; as a provider which caused my &lt;em&gt;Google middleware&lt;/em&gt; to be triggered and I also specified the callback URI to be called after the auth process.&lt;/p&gt;

&lt;p&gt;The most important thing here is the property &lt;em&gt;SignInScheme&lt;/em&gt; which I set in the &lt;em&gt;UseGoogleAuthentication&lt;/em&gt; options, as this what completes the authentication process after it returns from Google, and then my callback is called.&lt;/p&gt;

&lt;p&gt;In this callback, the current working version looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public async Task&amp;lt;IActionResult&amp;gt; Callback(string signInId)
{
    var external = await HttpContext.Authentication.AuthenticateAsync(&amp;quot;External&amp;quot;);
    //todo create or get local account match by email         
    //for now alice is hardcoded            
    var subject = &amp;quot;818727&amp;quot;;//todo you get this after you create or get local user
    var name = &amp;quot;alice&amp;quot;;
    var claims = new[] {
                new Claim(JwtClaimTypes.Subject, subject),
                new Claim(JwtClaimTypes.Name, name),
                new Claim(JwtClaimTypes.IdentityProvider, &amp;quot;idsvr&amp;quot;),
                new Claim(JwtClaimTypes.AuthenticationTime, DateTime.UtcNow.ToEpochTime().ToString())
            };

    var ci = new ClaimsIdentity(claims, &amp;quot;password&amp;quot;, JwtClaimTypes.Name, JwtClaimTypes.Role);
    var cp = new ClaimsPrincipal(ci);

    await HttpContext.Authentication.SignInAsync(Constants.PrimaryAuthenticationType, cp);
    await HttpContext.Authentication.SignOutAsync(&amp;quot;External&amp;quot;);

    if (signInId != null)
    {                
        return new SignInResult(signInId);
    }

    return Redirect(&amp;quot;~/&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can get access to the claims received from Google with this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var external = await HttpContext.Authentication.AuthenticateAsync(&amp;quot;External&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s why I needed this extra middleware to get these Google claims. I should do something meaningful with these claims but that is a theme for another post. For now, I will simply map everyone logged in with a Google account to my local user &lt;em&gt;alice&lt;/em&gt;. Next, I signed out from the &lt;em&gt;External&lt;/em&gt; authentication schema, then signed in &lt;em&gt;alice&lt;/em&gt; with &lt;em&gt;PrimaryAuthenticationType&lt;/em&gt; which is IdentityServer. After, I return the &lt;em&gt;SignInResult&lt;/em&gt;. Here, I did here the same thing done in the post &lt;em&gt;Login&lt;/em&gt; method in &lt;em&gt;LoginController&lt;/em&gt;. Basically, IdentityServer is doing its job and I don’t need to micromanage what’s going on there. I provided everything it needs to authenticate and authorize a user.&lt;/p&gt;

&lt;p&gt;And that’s it&amp;hellip;this is how I setup Google as an external Identity Provider. You can find the whole source code for this sample project in
&lt;a href=&#34;https://github.com/pikoscielniak/idsrv-demo&#34; target=&#34;_blank&#34;&gt;this repository&lt;/a&gt;.
Similarly, for example, you can use Facebook as an external Identity Provider. I am going to do this but I will write about it only if I run into problems and I’m forced to troubleshoot.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;



























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IdentityServer4 - accessing API</title>
      <link>http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/</link>
      <pubDate>Thu, 05 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous
&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;post&lt;/a&gt;,
I wrote about how to get tokens from IdentityServer using a javascript client. In this post, I am going to write about how to use this token to get access to protected resources from a sample API.&lt;/p&gt;

&lt;p&gt;As in the previous post, to achieve my goal, I used samples provided on the
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Samples&#34; target=&#34;_blank&#34;&gt;github repository&lt;/a&gt;.
In this &lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Samples/tree/dev/Mvc/src/SampleApi&#34; target=&#34;_blank&#34;&gt;repo folder&lt;/a&gt;
I found a sample API which I copied into my local repository. After this, I executed &lt;code&gt;dnu restore&lt;/code&gt; inside the &lt;em&gt;SampleApi&lt;/em&gt; directory.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;SampleApi&lt;/em&gt; works on a different port than expected (I expected it to work on 3860, but by default it was 5000) so I changed &lt;code&gt;web&lt;/code&gt; command in the &lt;em&gt;project.json&lt;/em&gt; file in the &lt;em&gt;SampleApi&lt;/em&gt; to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel --server.urls=http://localhost:3860&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could find this port in the &lt;em&gt;index.html&lt;/em&gt; file of the &lt;em&gt;JsOidc&lt;/em&gt; project. In this file, there is a handler for event &lt;em&gt;click&lt;/em&gt; for the button &lt;em&gt;Call Service&lt;/em&gt;.  In this handler, the request is sent to the address &lt;em&gt;&lt;a href=&#34;http://localhost:3860/identity&#34;&gt;http://localhost:3860/identity&lt;/a&gt;&lt;/em&gt; and this is the address on which my Api should work.&lt;/p&gt;

&lt;p&gt;Then I was ready to run my application. I executed &lt;code&gt;dnx web&lt;/code&gt; in three different directories simultaneously: &lt;em&gt;IdSvrHost&lt;/em&gt;, &lt;em&gt;JsOidc&lt;/em&gt; and &lt;em&gt;SampleApi&lt;/em&gt; and after this I navigated to &lt;em&gt;&lt;a href=&#34;http://localhost:7017/&#34;&gt;http://localhost:7017/&lt;/a&gt;&lt;/em&gt; and I clicked &lt;em&gt;Login With Profile and Access Token&lt;/em&gt; and I saw this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-accessing-api/loginScreen.png&#34; alt=&#34;Login Screen&#34; title=&#34;Login Screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I entered the user name &lt;em&gt;alice&lt;/em&gt; and the password &lt;em&gt;alice&lt;/em&gt; and the I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-accessing-api/applicationAccess.png&#34; alt=&#34;Application access&#34; title=&#34;Application access&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked &lt;em&gt;Yes, Allow&lt;/em&gt; and I was brought back to my &lt;em&gt;JsOidc&lt;/em&gt;. The next thing which I did was to click on “Call Service”. After doing this, I saw a response in the pane &lt;em&gt;Ajax Result&lt;/em&gt;, which looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-accessing-api/applicationAccess.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This response contains users claims and this is how it was prepared:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return Json(User.Claims.Select(c =&amp;gt; new { c.Type, c.Value }));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was really amazed by how smoothly I went through usage examples of IdentityServer4 on Linux. After my previous experiences, I was rather sceptical if this example could even run without errors on Ubuntu but they executed perfectly. By doing this example, I checked if I can use IdentityProvider4 as an identity provider for my application but as you may remember from my previous posts, I wanted to have Google as an Identity Provider. In a future post, I’ll examine if it is possible to combine Google authentication with IdentityProvider4.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;



























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with IdentityServer4</title>
      <link>http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/</link>
      <pubDate>Wed, 04 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wrote in one of
&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;previous posts&lt;/a&gt;
about my experiments with Google Identity Provider and Implicit Flow to get access tokens which allow me to fetch resources from API.
I didn’t mention IdentityServer
&lt;a href=&#34;https://github.com/IdentityServer&#34; target=&#34;_blank&#34;&gt;IdentityServer&lt;/a&gt; in these posts, which is becoming the default choice if you want to create an identity provider in ASP .NET.
I did this deliberately because I had some experiences with IdentityServer 3 and I wanted to try something new. IdentityServer3 wasn’t prepared to be used with ASP .NET Core but is there something similar to it? Yes and you can read about it
&lt;a href=&#34;https://leastprivilege.com/2016/01/11/announcing-identityserver-for-asp-net-5-and-net-core/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
There is IdentityServer4 which is a port of IdentityServer for ASP .NET Core. This post is the first in a series about IdentityServer4 on ASP .NET Core.&lt;/p&gt;

&lt;p&gt;The journey with the IdentityServer4 started by copying&lt;br /&gt;
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Samples/tree/dev/Mvc/src/IdSvrHost&#34; target=&#34;_blank&#34;&gt;this folder&lt;/a&gt;
into my local directory.
Then inside the directory &lt;em&gt;IdSvrHost&lt;/em&gt;, I restored the packages and I ran an application with &lt;code&gt;dnx web&lt;/code&gt; and after a while I saw the IdentityServer4 welcome page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/welcomePage.png&#34; alt=&#34;Identity Server4 welcome page&#34; title=&#34;Identity Server4 welcome page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, that was great but let’s test IdentityServer4 with a client. In a previous post, I experimented with a javascript client and we’ll do the same in this case.&lt;/p&gt;

&lt;p&gt;I downloaded
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Samples/tree/dev/Clients/src/JsOidc&#34; target=&#34;_blank&#34;&gt;this folder&lt;/a&gt;
to my local folder.
I restored the packages and ran an application with the command &lt;code&gt;web run&lt;/code&gt; and got the following error in the console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Microsoft.AspNet.Server.Kestrel.Networking.UvException: Error -98 EADDRINUSE address already in use
   at Microsoft.AspNet.Server.Kestrel.Networking.Libuv.Check(Int32 statusCode)
   at Microsoft.AspNet.Server.Kestrel.Networking.UvStreamHandle.Listen(Int32 backlog, Action`4 callback, Object state)
   at Microsoft.AspNet.Server.Kestrel.Http.TcpListener.CreateListenSocket()
   at Microsoft.AspNet.Server.Kestrel.Http.Listener.&amp;lt;&amp;gt;c__DisplayClass5_0.&amp;lt;StartAsync&amp;gt;b__0(Object _)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course I got the error message &lt;em&gt;address already in use&lt;/em&gt; because my IdentityServer was occupying port 5000. In the &lt;em&gt;project.json&lt;/em&gt; file of &lt;em&gt;JsOidc&lt;/em&gt; project, the &lt;em&gt;web&lt;/em&gt; command was defined as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the default port for Kestrel is 5000. So I needed to change this but which port do I choose? I could find the right port in the definition of Clients for IdentityServer and that was in the class &lt;em&gt;Clients&lt;/em&gt; inside the &lt;em&gt;Configuration&lt;/em&gt; folder of &lt;em&gt;IdSvrHost&lt;/em&gt; project. At the end of this class I found:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;///////////////////////////////////////////
// JS OIDC Sample
//////////////////////////////////////////
new Client
{
    ClientId = &amp;quot;js_oidc&amp;quot;,
    ClientName = &amp;quot;JavaScript OIDC Client&amp;quot;,
    ClientUri = &amp;quot;http://identityserver.io&amp;quot;,

    Flow = Flows.Implicit,
    RedirectUris = new List&amp;lt;string&amp;gt;
    {
        &amp;quot;http://localhost:7017/index.html&amp;quot;,
        &amp;quot;http://localhost:7017/silent_renew.html&amp;quot;,
    },
    PostLogoutRedirectUris = new List&amp;lt;string&amp;gt;
    {
        &amp;quot;http://localhost:7017/index.html&amp;quot;,
    },

    AllowedCorsOrigins = new List&amp;lt;string&amp;gt;
    {
        &amp;quot;http://localhost:7017&amp;quot;
    },

    AllowedScopes = new List&amp;lt;string&amp;gt;
    {
        StandardScopes.OpenId.Name,
        StandardScopes.Profile.Name,
        StandardScopes.Email.Name,
        StandardScopes.Roles.Name,
        &amp;quot;api1&amp;quot;, &amp;quot;api2&amp;quot;
    }
},

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the port which I was looking for was 7017 and I changed &lt;em&gt;web&lt;/em&gt; command in the &lt;em&gt;JsOidc&lt;/em&gt; project to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel --server.urls=http://localhost:7017&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, when I ran the application and navigated to &lt;em&gt;&lt;a href=&#34;http://localhost:7017&#34;&gt;http://localhost:7017&lt;/a&gt;&lt;/em&gt; I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/javaScriptOidcClient.png&#34; alt=&#34;JavaScript Oidc Client&#34; title=&#34;JavaScript Oidc Client&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I clicked &lt;em&gt;Login Only&lt;/em&gt; nothing had happened and I could only see this in the web browser console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/errorAfterLogin.png&#34; alt=&#34;Error after Login&#34; title=&#34;Error after Login&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The reason for the error seemed to be obvious: the javascript library which communicated with IdentityServer was configured to use address localhost:22530 and my IdentityServer worked on port 5000. By the way, this library is my old friend &lt;em&gt;oidc-token-manager&lt;/em&gt; library which I played with
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;here&lt;/a&gt; and
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I decided to run my IdentityServer on the port 22530 instead of making changes in the client application code. So I changed the web command in the project &lt;em&gt;IdSvrHost&lt;/em&gt; to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel --server.urls=http://localhost:22530&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I restarted IdentityServer and then after clicking &lt;em&gt;Login Only&lt;/em&gt; again, I was redirected to this page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/loginPage.png&#34; alt=&#34;Login Page&#34; title=&#34;Login Page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After entering the username &lt;em&gt;alice&lt;/em&gt; and the password &lt;em&gt;alice&lt;/em&gt; which I found in the class &lt;em&gt;Users&lt;/em&gt; inside the &lt;em&gt;Configuration&lt;/em&gt; folder of &lt;em&gt;IdSvrHost&lt;/em&gt; project, I saw this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/requestingYourPermission.png&#34; alt=&#34;Requesting Your Permission&#34; title=&#34;Requesting Your Permission&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking &lt;em&gt;Yes, Allow&lt;/em&gt;, which meant that I granted a specific permission to my client, I was brought back to the javascript client and I saw the following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/finalResult.png&#34; alt=&#34;Final Result&#34; title=&#34;Final Result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I got &lt;em&gt;id_token&lt;/em&gt; which meant I was successfully authenticated in IdentityServer. The next step is to obtain &lt;em&gt;access_token&lt;/em&gt; and use it to access some API but this is a theme for another post. Meanwhile, you can find the whole source code for this demo in
&lt;a href=&#34;https://github.com/pikoscielniak/idsrv-demo&#34; target=&#34;_blank&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;



























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>