<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visual Studio on Piotr Kościelniak - passionate programmer</title>
    <link>http://koscielniak.me/tags/visual-studio/</link>
    <description>Recent content in Visual Studio on Piotr Kościelniak - passionate programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Apr 2016 22:00:00 +0200</lastBuildDate>
    <atom:link href="http://koscielniak.me/tags/visual-studio/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>When dotPeek can save your live</title>
      <link>http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/</link>
      <pubDate>Thu, 21 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poz  nać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is a little break in my investigation regarding auth stuff.
To write my previous posts I had to debug a bit - and this mainly happened with code that was not mine. Debugging javascript code that is not your own is a piece of cake. You simply write &lt;code&gt;debugger&lt;/code&gt; somewhere in the script and that’s it - the execution of this code will stop where you place the word &lt;code&gt;debugger&lt;/code&gt;. Eventually, you can set a breakpoint in the web browser debugger. Debugging C# code that is not your own requires more involvement, especially if you don’t have source code and &lt;code&gt;pdb&lt;/code&gt; files.  In this post, I am going to write how
&lt;a href=&#34;https://www.jetbrains.com/decompiler/&#34; target=&#34;_blank&#34;&gt;dotPeek&lt;/a&gt; helps to look inside 3rd party code and see how things works in libraries that I have imported to my project.&lt;/p&gt;

&lt;p&gt;dotPeek is a decompiler but it can also work as a &lt;em&gt;Symbol Server&lt;/em&gt;. Before you use it, you must set it up. This how I did it:&lt;/p&gt;

&lt;p&gt;To configure dotPeek as a &lt;em&gt;Symbol Server&lt;/em&gt; you must navigate in Visual Studio to &lt;em&gt;Tools &amp;rarr; Options &amp;rarr; Debugging &amp;rarr; Symbols&lt;/em&gt;. And then add a new location for symbols like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/addNewSymbolsFile.png&#34; alt=&#34;Add new symbol file&#34; title=&#34;Add new symbol file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can check the port on which the symbol server is working in the dotPeek settings &lt;em&gt;Tool &amp;rarr; Options &amp;rarr; Symbol Server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/configureServerPort.png&#34; alt=&#34;Configure server port&#34; title=&#34;Configure server port&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The debugging options in Visual Studio (Tools &amp;rarr; Options &amp;rarr; Debugging &amp;rarr; General)  should be set like this:&lt;/p&gt;

&lt;p&gt;Uncheck the &lt;em&gt;Enable Just My Code&lt;/em&gt; option&lt;br /&gt;
Uncheck the &lt;em&gt;Enable .NET Framework source stepping&lt;/em&gt; option&lt;br /&gt;
Check the &lt;em&gt;Enable source server support&lt;/em&gt; option&lt;br /&gt;
Uncheck the &lt;em&gt;Require source files to exactly match the original version&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now when everything is setup you can start symbol server in dotPeek by hitting this button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/startDotPeekServer.png&#34; alt=&#34;Start symbol server&#34; title=&#34;Start symbol server&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you first run debug after this configuration it takes some time to load all the desired symbols. You can see what’s going on at the bottom left corner of Visual Studio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/loadingSymbols.png&#34; alt=&#34;Loading symbols&#34; title=&#34;Loading symbols&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When all the symbols are loaded, you will see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/loadingSymbolsReady.png&#34; alt=&#34;Loading symbols ready&#34; title=&#34;Loading symbols ready&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next time when you hit Run debugging, it will start almost immediately.&lt;/p&gt;

&lt;p&gt;You can control which symbols should be loaded in the dotPeek settings &lt;em&gt;Tool &amp;rarr; Options &amp;rarr; Symbol Server&lt;/em&gt; and here you can choose for which assemblies dotPeek should generate symbols.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/generateSymbolsFor.png&#34; alt=&#34;Generate symbols for&#34; title=&#34;Generate symbols for&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you do this setup it doesn’t mean you can enter whenever you want by hitting F11 (Step Into). You still must show where the &lt;em&gt;pdb&lt;/em&gt; file is for a specific assembly. To do this, open &lt;em&gt;Debug &amp;rarr; Windows &amp;rarr; Modules&lt;/em&gt; during the debugging session and in the &lt;em&gt;Search&lt;/em&gt; field type a part of the name of the assembly you want to debug. After, you’ll see in the &lt;em&gt;Modules&lt;/em&gt; window &lt;em&gt;Cannot find or open the PDB file.&lt;/em&gt;, for this assembly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/cannotFindPDBfile.png&#34; alt=&#34;Cannot find pdb file&#34; title=&#34;Cannot find pdb file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, dotPeek comes to the rescue. Go to &lt;em&gt;File &amp;rarr; Open&lt;/em&gt; in dotPeek and navigate to the path where the assembly you want to debug is. You’ll find this path in the &lt;em&gt;Debug &amp;rarr; Windows &amp;rarr; Modules&lt;/em&gt; as you can see here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/pathToDll.png&#34; alt=&#34;Path to dll&#34; title=&#34;Path to dll&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you select the &lt;em&gt;.dll&lt;/em&gt; file it will be loaded to the dotPeek &lt;em&gt;Assembly Explorer&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/loadedAssemblyInDotPeek.png&#34; alt=&#34;Loaded assembly in dotPeek&#34; title=&#34;Loaded assembly in dot peek&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can load the &lt;em&gt;pdb&lt;/em&gt; for this assembly in Visual Studio. In &lt;em&gt;Debug &amp;rarr; Windows &amp;rarr; Modules&lt;/em&gt;, right click on the selected assembly and you will see this dialog:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/loadSymbolesInModules.png&#34; alt=&#34;Load symbols in modules&#34; title=&#34;Load symbols in modules&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on &lt;em&gt;Load Symbols&lt;/em&gt; succeeds in loading symbols for the assembly you want to debug.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/symbolesLoaded.png&#34; alt=&#34;Symboles loaded&#34; title=&#34;Symboles loaded&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After this, when you hit F11 (Step Into) you’ll get inside the code of the assembly you want to reflect.&lt;/p&gt;

&lt;p&gt;Sometimes you cannot find a direct way from your code to the methods writting by others, which you want to investigate. In this situation, you can use the window &lt;em&gt;Debug &amp;rarr; New Breakpoint &amp;rarr; Function Breakpoint…&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/newFunctionBreakpoint.png&#34; alt=&#34;New function Breakpoint&#34; title=&#34;New function Breakpoint&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this window, you can put the fully qualified method name and the debugger will stop at that point when the execution of the application has reached it.&lt;/p&gt;

&lt;p&gt;What’s more, if you want, you can generate&lt;em&gt;pdb&lt;/em&gt; files in dotPeek and save it. To do this, right click the mouse button on the assembly for which you want &lt;em&gt;pdb&lt;/em&gt;. You’ll see this dialog:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/generatePDB.png&#34; alt=&#34;Generate pdb&#34; title=&#34;Generate pdb&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you click &lt;em&gt;Generate Pdb..&lt;/em&gt; you’ll be asking to pass the destination path for symbols. You should specify the same path where the assembly is located.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/generatePdbDialog.png&#34; alt=&#34;Generate pdb dialog&#34; title=&#34;Generate pdb dialog&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking &lt;em&gt;Generate&lt;/em&gt; will cause the &lt;em&gt;pdb&lt;/em&gt; file to be generated and copied to the chosen location. By doing this, you can pass this &lt;em&gt;pdb&lt;/em&gt; file where it is needed.&lt;/p&gt;

&lt;p&gt;Now, you can enjoy the freedom of debugging.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
  </channel>
</rss>