<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google on Piotr Kościelniak - passionate programmer</title>
    <link>http://koscielniak.me/tags/google/</link>
    <description>Recent content in Google on Piotr Kościelniak - passionate programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Apr 2016 22:00:00 +0200</lastBuildDate>
    <atom:link href="http://koscielniak.me/tags/google/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How portable is ASP .NET Core 1.0?</title>
      <link>http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/</link>
      <pubDate>Tue, 19 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous
&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;post&lt;/a&gt;,
I wrote about accessing a protected API controller being
authenticated with id tokens obtained from Google. I created my application on Windows in Visual Studio because I needed the helping hand of
&lt;a href=&#34;https://www.jetbrains.com/decompiler/&#34; target=&#34;_blank&#34;&gt;dotPeek&lt;/a&gt; to see what was going on inside code that is not mine. In this post, I’ll write what happened when I ran this application on Ubuntu.&lt;/p&gt;

&lt;p&gt;After I pulled my project from
&lt;a href=&#34;https://github.com/pikoscielniak/notifier-auth-demo&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;,
I restored all packages using &lt;code&gt;dnu restore&lt;/code&gt; and I ran the application. The project compiled and ran without any trouble. I obtained a token from Google and I clicked the &lt;em&gt;Protected&lt;/em&gt; button and I saw this on the screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/howPortable/errorAfterProtected.png&#34; alt=&#34;Error after Protected&#34; title=&#34;Error after Protected&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I looked at the console where my app was running I saw the same error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/howPortable/couldNotLoadTypeAsymmetricSignatureProvider.png&#34; alt=&#34;Could not load type asymmetric signature provider&#34; title=&#34;Could not load type asymmetric signature provider&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I thought that the tip on how to solve this problem was included in this line: &lt;code&gt;Could not load type &#39;System.IdentityModel.Tokens.AsymmetricSignatureProvider&#39;&lt;/code&gt;. I googled this error and I found this
&lt;a href=&#34;https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/179&#34; target=&#34;_blank&#34;&gt;RSACryptoServiceProviderProxy crashes on&lt;/a&gt;.
A quick look at this page gave me a clue that there are differences in the cryptography between &lt;em&gt;Mono&lt;/em&gt; and .Net on Windows. I am not going into details here, but what’s important is that at the time of writing this post, this issue was still ongoing. I tried a different version of package &lt;em&gt;Microsoft.AspNet.Authentication.JwtBearer&lt;/em&gt;, which was 1.0.0-beta8 but in this package extension method &lt;em&gt;UseJwtBearerAuthentication&lt;/em&gt; didn’t exist.&lt;/p&gt;

&lt;p&gt;Okay, this was on Mono but what happened on coreclr? I switched my execution environment to coreclr using the command &lt;code&gt;dnvm upgrade -r coreclr&lt;/code&gt;. This command upgraded my coreclr version and set it as the default runtime version. &lt;code&gt;dnvm list&lt;/code&gt; gave me an output like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/howPortable/dnvmListOutput.png&#34; alt=&#34;dnvm list ouput&#34; title=&#34;dnvm list ouput&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I ran the application and obtained a token from Google by clicking &lt;em&gt;Get Token&lt;/em&gt; and finally I clicked the &lt;em&gt;Protected&lt;/em&gt; button and I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/howPortable/unableToLoadDllNcrypt.png&#34; alt=&#34;Unable to load dll Ncrypt&#34; title=&#34;Unable to load dll Ncrypt&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This line: * &amp;lsquo;System.DllNotFoundException: Unable to load DLL &amp;lsquo;ncrypt.dll&amp;rsquo;* seemed to be the key part of this error for me, so I googled it. The first search result brought up this
&lt;a href=&#34;https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/324&#34; target=&#34;_blank&#34;&gt;issue on github&lt;/a&gt;.
This issue seemed to be resolved but it is added to &lt;em&gt;milestone:RC2&lt;/em&gt; so probably the next version will have this error fixed.&lt;/p&gt;

&lt;p&gt;In conclusion, what does the portability of ASP .NET Core applications really look like? In the case of Windows, everything works perfectly. On Linux (Ubuntu) it didn’t work. You can read above about what exactly didn’t work. Yes, I could hack it and work around these errors, for example, by implementing my own &lt;em&gt;SignatureProviderFactory&lt;/em&gt;, but I am quite sure that the .Net Team will do this better than me in the near future. It’s only a matter of time for ASP .NET Core to work the same on all platforms. You can find out more about it
&lt;a href=&#34;https://channel9.msdn.com/Events/Build/2016/B891&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;,
but for now it is still bleeding edge and bleeding edges hurt.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;
























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Accessing API with token from Google Identity Provider</title>
      <link>http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/</link>
      <pubDate>Thu, 14 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In previous
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;posts&lt;/a&gt;
I wrote about getting id tokens and access tokens from Google Identity Provider. To do this I used the library
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager&#34; target=&#34;_blank&#34;&gt;oidc-token-manager&lt;/a&gt;.
You can read here and here how I prepared config for this library in order to have a working authentication of a user in Google Identity Provider. I stated that my solution isn’t perfect and actually I treated it as a temporary one. In this post, I’ll write about using tokens fetched from Google to access my sample API. Let’s see what I did and what results it brought.&lt;/p&gt;

&lt;p&gt;For the purpose of my testing, I created another project which is in
&lt;a href=&#34;https://github.com/pikoscielniak/notifier-auth-demo&#34; target=&#34;_blank&#34;&gt;this repository&lt;/a&gt;.
This time the sample application that I used for this post was created on a Windows operating system because I needed some tools which I am very familiar with like:
&lt;a href=&#34;https://www.visualstudio.com/pl-pl/products/visual-studio-community-vs.aspx&#34; target=&#34;_blank&#34;&gt;Visual Studio&lt;/a&gt;,
&lt;a href=&#34;https://www.jetbrains.com/resharper/&#34; target=&#34;_blank&#34;&gt;ReSharper&lt;/a&gt; and
&lt;a href=&#34;https://www.jetbrains.com/decompiler/&#34; target=&#34;_blank&#34;&gt;dotPeek&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I started in Visual Studio with &lt;em&gt;File -&amp;gt; New -&amp;gt; Project…&lt;/em&gt;. I chose the template ASP .NET Web Application*. And then  among &lt;em&gt;ASP .NET 5 Templates&lt;/em&gt;, I selected the template &lt;em&gt;Web API&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/bearerTokenToApi/newProject.png&#34; alt=&#34;New Project&#34; title=&#34;New Project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I copied all the files from my previous experiments to the folder &lt;em&gt;wwwroot&lt;/em&gt;.
Next to the &lt;em&gt;ValuesController&lt;/em&gt; I created another API controller named &lt;em&gt;PublicValuesController&lt;/em&gt; with exactly the same content as the &lt;em&gt;ValuesController&lt;/em&gt;. I only changed the returned values to distinguish these controllers.  After this, the structure of my project looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/bearerTokenToApi/projectTree.png&#34; alt=&#34;Project tree&#34; title=&#34;Project tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, I installed all the necessary nuget packages so the dependencies in &lt;em&gt;project.json&lt;/em&gt; looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;quot;dependencies&amp;quot;: {
    &amp;quot;Microsoft.AspNet.Authentication.JwtBearer&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.AspNet.Diagnostics&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.AspNet.IISPlatformHandler&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.AspNet.Mvc&amp;quot;: &amp;quot;6.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.AspNet.Server.Kestrel&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.AspNet.StaticFiles&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.FileProviderExtensions&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging.Console&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging.Debug&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;em&gt;Startup&lt;/em&gt; class, the method &lt;em&gt;ConfigureServices&lt;/em&gt; looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddAuthentication();
    services.AddMvc();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And method &lt;em&gt;Configure&lt;/em&gt; looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{                        
    loggerFactory.AddConsole(Configuration.GetSection(&amp;quot;Logging&amp;quot;));
    loggerFactory.AddDebug();

    if (env.IsEnvironment(&amp;quot;Development&amp;quot;))
    {
        app.UseDeveloperExceptionPage();
    }

    app.UseIISPlatformHandler();
     
    app.UseDefaultFiles();
    app.UseStaticFiles();

    var options = new JwtBearerOptions
    {
        Authority = &amp;quot;https://accounts.google.com&amp;quot;,
        Audience = &amp;quot;342665198077-1fdticgpjke40gddj3r8vghltpgcvb5m.apps.googleusercontent.com&amp;quot;,
        RequireHttpsMetadata = false,
        AutomaticAuthenticate = true,
        AutomaticChallenge = false,
        TokenValidationParameters = new TokenValidationParameters
        {
            ValidIssuer = &amp;quot;accounts.google.com&amp;quot;
        }
    };

    app.UseJwtBearerAuthentication(options);

    app.UseMvc();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also granted access to &lt;em&gt;ValuesController&lt;/em&gt; only for authenticated user by adding attribute &lt;em&gt;Authorize&lt;/em&gt; on the class &lt;em&gt;ValuesController&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Route(&amp;quot;api/[controller]&amp;quot;)]
[Authorize]
public class ValuesController : Controller
{
///....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want, you can protect all controllers with the configuration in &lt;em&gt;ConfigureServices&lt;/em&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddAuthentication();
    services.AddMvc(config =&amp;gt;
    {
        var policy = new AuthorizationPolicyBuilder()
            .RequireAuthenticatedUser()
            .Build();
        config.Filters.Add(new AuthorizeFilter(policy));
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then add the attribute &lt;em&gt;AllowAnonymous&lt;/em&gt; on these controllers or methods which are accessible for unauthenticated users.&lt;br /&gt;
In my sample project, it didn’t matter because I had only two controllers.&lt;/p&gt;

&lt;p&gt;Having the setup ready meant I could get access to protected resources with the Google id token which I got using the library
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager&#34; target=&#34;_blank&#34;&gt;oidc-token-manager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After obtaining the token from Google by clicking &lt;em&gt;Get Token&lt;/em&gt; and then clicking &lt;em&gt;Protected&lt;/em&gt;, I got following response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/bearerTokenToApi/protectedValues.png&#34; alt=&#34;Protected values&#34; title=&#34;Protected values&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I clicked &lt;em&gt;Protected without token&lt;/em&gt; I got a response like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/bearerTokenToApi/notAuthorized.png&#34; alt=&#34;Not authorized&#34; title=&#34;Not authorized&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Through this sample application, I reached a conclusion. Yes, I know that I made a lot of assumptions which were not true, and I created a lot of simplifications for the purpose of testing but anyway I can get a protected resource with Google tokens fetched by the library &lt;em&gt;oidc-token-manager&lt;/em&gt;, which was my goal. My solution is absolutely unready to be used in production because of the token validation. I hardcoded a certificate to validate the token and this is not acceptable because these certificates change quite frequently. To validate tokens through a certificate fetched dynamically, requires me to change the library &lt;em&gt;oidc-token-manager&lt;/em&gt;. I don’t want to do this until I attempt other options.&lt;/p&gt;

&lt;p&gt;As I mentioned before, I used Visual Studio to create this sample application. I had to debug the 3rd party code a bit to finally get a configuration that works. Now that I have a working application, I can try it in another environment. Let’s see what’s happen when I run this project on Ubuntu. Will ASP .NET CORE turn out to be as portable as people say?
Please check out my
&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;next post&lt;/a&gt;
to find what happens when this app is run on Linux.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;
























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>oidc-token-manager library with Google Identity Platform - Part 2</title>
      <link>http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/</link>
      <pubDate>Mon, 11 Apr 2016 23:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is a continuation of the previous one
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;previous one&lt;/a&gt;
where I started to describe my attempt to use library &lt;em&gt;oidc-token-manager&lt;/em&gt; with Google Identity Platform.&lt;/p&gt;

&lt;p&gt;I was stuck at the moment when this library couldn’t validate a signature for an access token because of the unexpected format of the certs. I found in the documentation that I can provide certs for this library myself in the config and the library wouldn’t make a request for them.&lt;/p&gt;

&lt;p&gt;I did this in the &lt;em&gt;config&lt;/em&gt; property by specifying the value for the &lt;em&gt;jwks&lt;/em&gt; property. After this, &lt;em&gt;config&lt;/em&gt; in &lt;em&gt;index.html&lt;/em&gt; looked like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
   authority: &amp;quot;https://accounts.google.com&amp;quot;,
   client_id: &amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;,
   redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/callback.html&amp;quot;,
   post_logout_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/index.html&amp;quot;,
   response_type: &amp;quot;id_token token&amp;quot;,
   scope: &amp;quot;email&amp;quot;,
   silent_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/frame.html&amp;quot;,
   popup_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/popup.html&amp;quot;,
   jwks: {
       keys: [{
           kty: &amp;quot;RSA&amp;quot;,
           x5c: [&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIIUQ9p7LoIOI8wD …[removded for brevity ]... eTh45xGznVwh8\n-----END CERTIFICATE-----\n&amp;quot;]
       }]
   },
   silent_renew: true
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and in the &lt;em&gt;callback.html&lt;/em&gt;, &lt;em&gt;config&lt;/em&gt; looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
   authority: &amp;quot;https://accounts.google.com&amp;quot;,
   client_id: &amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;,
   jwks: {
       keys: [{
           kty: &amp;quot;RSA&amp;quot;,
           x5c:  [&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIIUQ9p7LoIOI8wD …[removded for brevity ]... eTh45xGznVwh8\n-----END CERTIFICATE-----\n&amp;quot;]
       }]
   },
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found a value for this &lt;em&gt;x5c&lt;/em&gt; property requesting this url
&lt;a href=&#34;https://www.googleapis.com/oauth2/v1/certs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.googleapis.com/oauth2/v1/certs&#34;&gt;https://www.googleapis.com/oauth2/v1/certs&lt;/a&gt;&lt;/a&gt;
and this url I found in the file downloaded from Google Developer Console, which I used in the previous post to get the &lt;em&gt;client_id&lt;/em&gt;.
You can read
&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;here&lt;/a&gt;
how I got it. (link).
Hardcoding the value for &lt;em&gt;x5c&lt;/em&gt; is a very bad solution because Google often changes certs but for testing it&amp;rsquo;s sufficient for me.&lt;/p&gt;

&lt;p&gt;After this, when I opened the application I got this screen: [networkError.png]&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/networkError.png&#34; alt=&#34;Network error&#34; title=&#34;Network error&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the web browser console showed me this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/userInfo404.png&#34; alt=&#34;Userinfo 404&#34; title=&#34;Userinfo 404&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This error came from a request for userinfo. Fortunately, I don’t need to get a user profile. All I need to know about the user is their email and it is in the token. So I can turn off loading the user profile with this option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;load_user_profile : false,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this option set to &lt;em&gt;false&lt;/em&gt;, the &lt;em&gt;oidc-token-manager&lt;/em&gt; library won’t send requests to Google for a user profile. After this, another attempt to get a token resulted in the
following message in the browser console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/profileFalseResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I could see my token was also in the local storage of the browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/tokenInLocalStorage.png&#34; alt=&#34;Token in local storage&#34; title=&#34;Token in local storage&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I got a token from Google Identity Provider and I could use it to get access to the API but my solution is far from perfect.&lt;/p&gt;

&lt;p&gt;I made a dangerous assumption in the configuration of &lt;em&gt;oidc-token-manager&lt;/em&gt;.
While fetching certs from this url &lt;a href=&#34;https://www.googleapis.com/oauth2/v1/certs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.googleapis.com/oauth2/v1/certs&#34;&gt;https://www.googleapis.com/oauth2/v1/certs&lt;/a&gt;&lt;/a&gt;, I got a response like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;8087d258ac19c0fcf1dab7a908c221cdd81d5512&amp;quot;: &amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIIBzgwCmlF7SMwDQYJKoZIhvcNAQEFBQAwNjE0MDIGA1UE\nAxMrZmVkZXJhdGVkLXNpZ25vbi5zeXN0ZW0uZ3NlcnZpY … [removed for brevity]... ]eOV9CqsTSJCZ9baLqF4wk6botNe187A88wnj5OVbyoVZK4SMW\n-----END CERTIFICATE-----\n&amp;quot;,
  &amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;: &amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIIUQ9p7LoIOI8wDQYJKoZIhvcNAQEFB …[removed for brevity]... xcOKB6l8wBqKDmyc1aMXZ+H0WkBgvcEHqeTh45xGznVwh8\n-----END CERTIFICATE-----\n&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I assumed that the second cert was the right one to validate the token. I chose the second one because the first one didn’t work. Instead of this, I should have made a choice dependent on the value provided in the token header which looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;alg&amp;quot;:&amp;quot;RS256&amp;quot;,&amp;quot;kid&amp;quot;:&amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The property &lt;em&gt;kid&lt;/em&gt; indicates that in the object with certs, I should use the one with the property like the &lt;em&gt;kid&lt;/em&gt; value. I discovered that this was the second property but it won’t always be true. I should choose a certificate dynamically but I didn’t want to change source code of the library &lt;em&gt;oidc-token-manager&lt;/em&gt;, so that’s why I hardcoded it.&lt;/p&gt;

&lt;p&gt;An authentication is a non-trivial challenge for any app. Many developers have tools and techniques they trust for building traditional (page-by-page) auth flows.
I thought for a while about building a traditional membership system but I finally decided to try something different. We’ll see the consequences of my choices in the future. For now, I have proven that I can obtain access tokens from Google using the library &lt;em&gt;oidc-token-manager&lt;/em&gt;, but the implementation isn’t perfect.
If I want to use this library, I would have to change it a bit. I don’t want to do this until
I check other possibilities. Future posts will be about the further exploration of
the web client authentication with Google Identity Provider.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;
























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>oidc-token-manager library with Google Identity Platform - Part 1</title>
      <link>http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/</link>
      <pubDate>Thu, 07 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I stated in this
&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;post&lt;/a&gt;,
I am going to write a series of posts about auth stuff.
This post will be the second in this series and I am describing my experiences trying to use the library
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager&#34; target=&#34;_blank&#34;&gt;oidc-token-manager&lt;/a&gt;
to get tokens from the Google Identity Platform.&lt;/p&gt;

&lt;p&gt;As I mentioned before, I want to have a single page application which gets tokens from
Identity Provider and sends them to REST API to get access to resources.&lt;/p&gt;

&lt;p&gt;To validate this solution, I was searching for a pure javascript library which allows me to get a token from OpenId Connect Identity Provider, refreshes this token (yes, even in implicit flow), gives me access to some information from it, stores this token and destroys it on my request.&lt;/p&gt;

&lt;p&gt;I was looking for a library which fulfills my needs and I found one.
It is called &lt;em&gt;oidc-token-manager&lt;/em&gt;. This library has everything what I want:
Redirects for token&lt;br /&gt;
Processes token&lt;br /&gt;
Removes token&lt;br /&gt;
Renews token&lt;/p&gt;

&lt;p&gt;But this library is dedicated for
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer3&#34; target=&#34;_blank&#34;&gt;IdentityServer&lt;/a&gt;
which is a .NET implementation of protocols like
&lt;a href=&#34;http://openid.net/connect/&#34; target=&#34;_blank&#34;&gt;OpenID Connect&lt;/a&gt; and
&lt;a href=&#34;http://oauth.net/2/&#34; target=&#34;_blank&#34;&gt;OAuth2&lt;/a&gt;.
I wanted to use it with Google not with IdentityServer, but Google Identity Provider is also compatible with
OpenID Connect and OAuth2. There was hope and below I have written about how I verified this hope.&lt;/p&gt;

&lt;p&gt;I didn’t use my Notifier project to test this library. I did this with a small sample application, so let’s jump right into it and see how it looked.&lt;/p&gt;

&lt;p&gt;The library &lt;em&gt;oidc-token-manager&lt;/em&gt; has a nice
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager/tree/master/sample/vs&#34; target=&#34;_blank&#34;&gt;sample project&lt;/a&gt;
in its repository. I used it as a starting point.&lt;/p&gt;

&lt;p&gt;I created a new folder (&lt;code&gt;mkdir NotifierDemo&lt;/code&gt;) and inside it I copied everything what was in
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager/tree/master/sample/vs/Sample&#34; target=&#34;_blank&#34;&gt;this folder&lt;/a&gt;.
I removed all the stuff related to Visual Studio. My file structure looked like this in
&lt;a href=&#34;https://www.jetbrains.com/webstorm/&#34; target=&#34;_blank&#34;&gt;WebStorm&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/fileTree.png&#34; alt=&#34;File tree&#34; title=&#34;File tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I needed a server to host my application and I decided to use a simple &lt;em&gt;Node.js&lt;/em&gt; server called
&lt;a href=&#34;https://www.npmjs.com/package/http-server&#34; target=&#34;_blank&#34;&gt;http-server&lt;/a&gt;
but first I had to create a &lt;em&gt;package.json&lt;/em&gt; file. I did this using &lt;code&gt;npm init&lt;/code&gt;, after answering every question I had the file &lt;em&gt;package.json&lt;/em&gt; inside my project.&lt;/p&gt;

&lt;p&gt;Then I installed &lt;em&gt;http-server&lt;/em&gt; and saved it as a development dependency using this command: &lt;code&gt;npm install http-server --save-dev&lt;/code&gt;.
Then I added script &lt;em&gt;dev&lt;/em&gt; to &lt;em&gt;package.json&lt;/em&gt; so the &lt;em&gt;scripts&lt;/em&gt; section looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
 &amp;quot;dev&amp;quot;: &amp;quot;http-server -p 5000&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The option &lt;em&gt;-p&lt;/em&gt; is a port on which the server will be running. I had to set this port to 5000 because I specified it for my client in the Google Developer Console.&lt;/p&gt;

&lt;p&gt;Now I ready to start connecting my application with Google Identity Provider.&lt;/p&gt;

&lt;p&gt;I started in the file &lt;em&gt;index.html&lt;/em&gt; and his file has a &lt;em&gt;config&lt;/em&gt; variable which contains the whole configuration for &lt;em&gt;oidc-token-manager&lt;/em&gt;. I had the setting needed for this configuration in the file which I downloaded at the end of the
&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;previous post&lt;/a&gt;.
This file looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;web&amp;quot;:{&amp;quot;client_id&amp;quot;:&amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;,&amp;quot;project_id&amp;quot;:&amp;quot;notifierdemo-1268&amp;quot;,&amp;quot;auth_uri&amp;quot;:&amp;quot;https://accounts.google.com/o/oauth2/auth&amp;quot;,&amp;quot;token_uri&amp;quot;:&amp;quot;https://accounts.google.com/o/oauth2/token&amp;quot;,&amp;quot;auth_provider_x509_cert_url&amp;quot;:&amp;quot;https://www.googleapis.com/oauth2/v1/certs&amp;quot;,&amp;quot;client_secret&amp;quot;:&amp;quot;jDvSf78IkYDGEw9FI_gnXEnZ&amp;quot;,&amp;quot;redirect_uris&amp;quot;:[&amp;quot;http://localhost:5000/callback.html&amp;quot;],&amp;quot;javascript_origins&amp;quot;:[&amp;quot;http://localhost:5000&amp;quot;]}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I took &lt;em&gt;client_id&lt;/em&gt; which was in the property with the same name. I also changed &lt;em&gt;scope&lt;/em&gt; in &lt;em&gt;config&lt;/em&gt; and only left &lt;em&gt;email&lt;/em&gt; in &lt;em&gt;scope&lt;/em&gt; and I set &lt;em&gt;authority&lt;/em&gt; property. At this stage, my &lt;em&gt;config&lt;/em&gt; in &lt;em&gt;index.html&lt;/em&gt; looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
    authority: &amp;quot;https://accounts.google.com&amp;quot;,
    client_id: &amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;,
    redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/callback.html&amp;quot;,
    post_logout_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/index.html&amp;quot;,
    response_type: &amp;quot;id_token token&amp;quot;,
    scope: &amp;quot;email&amp;quot;,
    silent_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/frame.html&amp;quot;,
    popup_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/popup.html&amp;quot;,
    silent_renew: true
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also set &lt;em&gt;authority&lt;/em&gt; and &lt;em&gt;client_id&lt;/em&gt; in the &lt;em&gt;config&lt;/em&gt; variable in &lt;em&gt;callback.html&lt;/em&gt; so it looks like this;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
    authority: &amp;quot;https://accounts.google.com&amp;quot;,
    client_id: &amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seemed to me that I was ready, so I ran my application with the command &lt;code&gt;npm run dev&lt;/code&gt;.
I navigated in the browser to &lt;em&gt;&lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;&lt;/em&gt; and I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/appWindow.png&#34; alt=&#34;Application Window&#34; title=&#34;Application Window&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked on the &lt;em&gt;Get Token&lt;/em&gt; button. And nothing happened. And then the investigation began.
I opened a browser console and saw:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/AllowOriginHeader.png&#34; alt=&#34;Not allowed access&#34; title=&#34;Not allowed access&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a well known issue. You can read a lot about it on the Internet.
To get rid of it quickly I used this
&lt;a href=&#34;https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en-US&#34; target=&#34;_blank&#34;&gt;chrome extension&lt;/a&gt;.
This extension gave me a button which allows me to enable cross-origin resource sharing.
This was a very ugly solution but for my testing purposes I accepted it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/crossOriginSharingExtension.png&#34; alt=&#34;Enable cross-origin resource sharing&#34; title=&#34;Enable cross-origin resource sharing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After enabling cross-origin resource sharing. I navigated to &lt;em&gt;&lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;&lt;/em&gt; again and I clicked on the &lt;em&gt;Get Token&lt;/em&gt; button once more. And this time I got following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/notifierDemoWouldLikeTo.png&#34; alt=&#34;NotifierDemo would like to&#34; title=&#34;NotifierDemo would like to&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking &lt;em&gt;Allow&lt;/em&gt; I got this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/rsaKeysEmpty.png&#34; alt=&#34;RSA keys empty&#34; title=&#34;RSA keys empty&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After spending some time debugging, I finally got my answer. The library &lt;em&gt;oidc-token-manager&lt;/em&gt; fetches metadata from a &lt;em&gt;.well-known&lt;/em&gt; url. It is specified in the
&lt;a href=&#34;https://openid.net/specs/openid-connect-discovery-1_0.html&#34; target=&#34;_blank&#34;&gt;OpenID Connect Discovery 1.0&lt;/a&gt;
and in the case of Google, it looks like this
&lt;a href=&#34;https://accounts.google.com/.well-known/openid-configuration&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://accounts.google.com/.well-known/openid-configuration&#34;&gt;https://accounts.google.com/.well-known/openid-configuration&lt;/a&gt;&lt;/a&gt;.
The response from Google &lt;em&gt;.well-known&lt;/em&gt; url provides among others this property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;jwks_uri&amp;quot;: &amp;quot;https://www.googleapis.com/oauth2/v3/certs&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this url: &lt;em&gt;&lt;a href=&#34;https://www.googleapis.com/oauth2/v3/certs&#34;&gt;https://www.googleapis.com/oauth2/v3/certs&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;oidc-token-manager&lt;/em&gt; fetches the necessary certificates to validate the tokens.  This library assumes that the information about certs is provided as an object something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;keys&amp;quot;: [{
    &amp;quot;kty&amp;quot;: &amp;quot;RSA&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,
    &amp;quot;use&amp;quot;: &amp;quot;sig&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;8087d258ac19c0fcf1dab7a908c221cdd81d5512&amp;quot;,
“x5c”:[&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAgwIBA… [removed for brevity] ...ZTRsIQWyJ4hUP\n-----END CERTIFICATE-----\n&amp;quot;,
  &amp;quot;c8f37d70371587d2aaae3bbff624cc865ef10575&amp;quot;: &amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg… [removed for brevity]  ...CAVCztq15Z\n-----END CERTIFICATE-----\n&amp;quot;
]
  }, {
    &amp;quot;kty&amp;quot;: &amp;quot;RSA&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,
    &amp;quot;use&amp;quot;: &amp;quot;sig&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;,
    “x5c”:[&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAgwIBA… [removed for brevity] ...ZTRsIQWyJ4hUP\n-----END CERTIFICATE-----\n&amp;quot;,
  &amp;quot;c8f37d70371587d2aaae3bbff624cc865ef10575&amp;quot;: &amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg… [removed for brevity]  ...CAVCztq15Z\n-----END CERTIFICATE-----\n&amp;quot;
] }]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But Google provides the following structure of information about certificates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;keys&amp;quot;: [{
    &amp;quot;kty&amp;quot;: &amp;quot;RSA&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,
    &amp;quot;use&amp;quot;: &amp;quot;sig&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;8087d258ac19c0fcf1dab7a908c221cdd81d5512&amp;quot;,
    &amp;quot;n&amp;quot;: &amp;quot;pmYJZAbSY2L …[removed for brevity]... 9dQNxhFaixl4BgqjaP9onw&amp;quot;,
    &amp;quot;e&amp;quot;: &amp;quot;AQAB&amp;quot;
  }, {
    &amp;quot;kty&amp;quot;: &amp;quot;RSA&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,
    &amp;quot;use&amp;quot;: &amp;quot;sig&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;,
    &amp;quot;n&amp;quot;: &amp;quot;pqLUr6XU-Ut4z_JS- …[removed for brevity]... H1QWo8bs2SXo3w&amp;quot;,
    &amp;quot;e&amp;quot;: &amp;quot;AQAB&amp;quot;
  }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The missing part is property &lt;em&gt;x5c&lt;/em&gt;. In this property, there is a public key needed to validate the signature of the tokens.
Google provides  a modulus(n) and an exponent(e) RSA public key but library &lt;em&gt;oidc-token-manager&lt;/em&gt; expects a PEM key which looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAgwIBA… [removed for brevity] ...ZTRsIQWyJ4hUP\n-----END CERTIFICATE-----\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also found that Google provides the following information in the header part of the JSON Web Token.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;alg&amp;quot;:&amp;quot;RS256&amp;quot;,&amp;quot;kid&amp;quot;:&amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The property &lt;em&gt;kid&lt;/em&gt; indicates which public key from &lt;a href=&#34;https://www.googleapis.com/oauth2/v3/certs&#34;&gt;https://www.googleapis.com/oauth2/v3/certs&lt;/a&gt;, should be used to validate the signature. As it is an array of keys, you must choose one. The library &lt;em&gt;oidc-token-manager&lt;/em&gt; always takes the first one.&lt;/p&gt;

&lt;p&gt;I managed to get access token from Google Identity Provider using library &lt;em&gt;oidc-token-manager&lt;/em&gt;
but I couldn’t validate its signature because of the format of the certs returned from Google
but there must be a way to handle this kind of situation. However, I’ll write about this in the
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;next post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;
























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up the Web client for Google Identity Platform</title>
      <link>http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/</link>
      <pubDate>Mon, 04 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poz  nać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, I thought about a membership system in my application. I considered many options and during my research I tested many solutions, and gained some knowledge. The results from my initial search didn’t pan out as planned, so I’ll have to share my results in a series of posts, and this post will be part one.&lt;/p&gt;

&lt;p&gt;One of my ideas was not having a membership system at all and delegating this to a well known identity provider like Google or Facebook. I also wanted to have my application as a pure API with SPA client and moreover I wanted to have a stateless application. I didn’t want to have any sessions on the server side. So this problem requires me to use a bearer token authentication with implicit flow where a browser client gets an access token from Identity Provider and passes it to the API in every request. API validates this token and grants access or not to its resources.&lt;/p&gt;

&lt;p&gt;Before I start my work I must choose Identity Provider. I decided to use Google Identity Provider Platform, and then I must register a web application in this Platform.&lt;/p&gt;

&lt;p&gt;To create a web application client, I entered the
&lt;a href=&#34;https://console.developers.google.com&#34; target=&#34;_blank&#34;&gt;Google Developers Console&lt;/a&gt;
and then I chose &lt;em&gt;Create a project&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/createProject.png&#34; alt=&#34;Create a project&#34; title=&#34;Create a project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I specified &lt;em&gt;Project name&lt;/em&gt; and clicked &lt;em&gt;Create&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/newProject.png&#34; alt=&#34;New Project&#34; title=&#34;New Project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After a while my new application was visible in the &lt;em&gt;Dashboard&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/dashboardWithNew.png&#34; alt=&#34;Dashboard&#34; title=&#34;Dashboard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked on &lt;em&gt;Enable and manage APIs&lt;/em&gt; and after I saw this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/apiManager.png&#34; alt=&#34;Api Manager&#34; title=&#34;Api Manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the left side, I can see a menu option &lt;em&gt;Credentials&lt;/em&gt; I clicked on this option and I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/credentialsApiManager.png&#34; alt=&#34;Credentials tab&#34; title=&#34;Credentials tab&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked on the middle tab named &lt;em&gt;OAuth consent screen&lt;/em&gt; and in the form I entered only a &lt;em&gt;Product name shown to users&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/consentScreen.png&#34; alt=&#34;OAuth consent screen&#34; title=&#34;OAuth consent screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I clicked &lt;em&gt;Save&lt;/em&gt;. After this, I was redirect back to the first tab: &lt;em&gt;Credentials&lt;/em&gt;. On this tab, I clicked &lt;em&gt;Create credentials&lt;/em&gt; I saw the following choices:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/createCredentialsChoices.png&#34; alt=&#34;Create Credentials Choices&#34; title=&#34;Create Credentials Choices&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I chose &lt;em&gt;OAuth client ID&lt;/em&gt;. Then on the next screen I selected &lt;em&gt;Web application&lt;/em&gt; as a &lt;em&gt;Application type&lt;/em&gt; and I put name and urls.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/createClientId.png&#34; alt=&#34;Create ClientId&#34; title=&#34;Create ClientId&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I clicked “Create” I saw this popup window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/popupOAuthClient.png&#34; alt=&#34;OAuth Client&#34; title=&#34;OAuth Client&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t bother to copy this, since I got this letter in another form. I just clicked &lt;em&gt;OK&lt;/em&gt; and I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/OAuth20ClientIds.png&#34; alt=&#34;OAuth client ids&#34; title=&#34;OAuth client ids&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the right side, I had a download icon (see red ellipse in the picture above). I clicked on it and the window to save file opened:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/saveFile.png&#34; alt=&#34;Save file&#34; title=&#34;Save file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I saved this file and I will return to it later in the next post.&lt;/p&gt;

&lt;p&gt;After this, Client for Google APIs was now ready to use and now I must create an application for it. As I mentioned before, this post is the first part about auth things.
In the &lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;next post&lt;/a&gt;,
I will continue this theme and I hope, I’ll show finally some code.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;
























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>