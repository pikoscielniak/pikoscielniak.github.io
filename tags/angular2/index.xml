<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular2 on Piotr Kościelniak - passionate programmer</title>
    <link>http://koscielniak.me/tags/angular2/</link>
    <description>Recent content in Angular2 on Piotr Kościelniak - passionate programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 May 2016 22:00:00 +0200</lastBuildDate>
    <atom:link href="http://koscielniak.me/tags/angular2/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Experimenting with Angular2 CLI</title>
      <link>http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/</link>
      <pubDate>Thu, 19 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During the &lt;a href=&#34;https://www.youtube.com/watch?v=gdlpE9vPQFs&amp;list=PLOETEcp3DkCq788xapkP_OU-78jhTf68j&amp;index=6&#34; target=&#34;_blank&#34;&gt;keynote of ng-conf 2016&lt;/a&gt;,
&lt;a href=&#34;https://twitter.com/bradlygreen&#34; target=&#34;_blank&#34;&gt;Brad Green&lt;/a&gt; presented a lot of cool stuff about Angular2 and one of them was a tool called
&lt;a href=&#34;https://cli.angular.io/&#34; target=&#34;_blank&#34;&gt;Angular-CLI&lt;/a&gt;. &lt;em&gt;Angular-CLI&lt;/em&gt; contains a bunch of simple commands to make your work easier with Angular2 projects. The tool essentially streamlines and simplifies your projects. I am always cautious about this kind of tool because often they create far more than you need and pollute your project but when used wisely, they can be helpful.&lt;/p&gt;

&lt;p&gt;To start playing with &lt;em&gt;Angular-CLI&lt;/em&gt; first I had to install it. This tool is built with Node.js and it requires the node version 4 or greater. You can install this tool with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g angular-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a new application I used the command: &lt;code&gt;ng new SampleApp&lt;/code&gt;.
And the result I got was a working application with a folder structure like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/angular-cli/initialTree.png&#34; alt=&#34;Initial file tree&#34; title=&#34;Initial file tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, a lot is done after you run this command. You have not only your app ready to use but also ready to build. You can even run tests.
After installation, I executed &lt;code&gt;ng build&lt;/code&gt; and &lt;code&gt;ng serve&lt;/code&gt; which allows us to see under the URI &lt;em&gt;&lt;a href=&#34;http://localhost:4200/&#34;&gt;http://localhost:4200/&lt;/a&gt;&lt;/em&gt; in the following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/angular-cli/sample-app-works.png&#34; alt=&#34;sample-app works!&#34; title=&#34;sample-app works!&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, I wanted to create a new route. I did this with the command &lt;code&gt;ng generate route dashboard&lt;/code&gt; and I got the following output in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;installing route
installing component
  create src/app/+dashboard/dashboard.component.css
  create src/app/+dashboard/dashboard.component.html
  create src/app/+dashboard/dashboard.component.spec.ts
  create src/app/+dashboard/dashboard.component.ts
  create src/app/+dashboard/index.ts
  create src/app/+dashboard/shared/index.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tool is smart enough to create folders prefixed with a &lt;em&gt;+&lt;/em&gt; sign. It is required in order to have lazy loading of components.
You can watch
&lt;a href=&#34;https://www.youtube.com/watch?v=d8yAdeshpcw&amp;index=9&amp;list=PLOETEcp3DkCq788xapkP_OU-78jhTf68j&#34; target=&#34;_blank&#34;&gt;a talk&lt;/a&gt;
given by
&lt;a href=&#34;https://twitter.com/mhevery&#34; target=&#34;_blank&#34;&gt;Misko Hevery&lt;/a&gt;
at &lt;a href=&#34;https://www.ng-conf.org&#34; target=&#34;_blank&#34;&gt;ng-conf 2016&lt;/a&gt; to find out a bit more about it.&lt;/p&gt;

&lt;p&gt;You can use this command line tool to create services, modules, components, etc.&lt;/p&gt;

&lt;p&gt;Next, I tried this tool to see how it deals with nested routes. I executed the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ng generate route dashboard/event-list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it turned out that &lt;em&gt;Angular-CLI&lt;/em&gt; deals with it pretty well. I got this structure of folders:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/angular-cli/componentFiles.png&#34; alt=&#34;Component files&#34; title=&#34;Component files&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the routing was created like this in &lt;em&gt;dashboard.component&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Routes([
 {path: &#39;/event-list&#39;, component: EventListComponent}
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it was also changed in the &lt;em&gt;sample-app.component&lt;/em&gt; to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Routes([
 {path: &#39;/dashboard/...&#39;, component: DashboardComponent},
 {path: &#39;/main-page&#39;, component: MainPageComponent}
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this tool creates all the files needed for the component. These files are: a template file, a style file, a component file. It also generates a &lt;em&gt;spec&lt;/em&gt; file where you have the scaffolding for testing your component.&lt;/p&gt;

&lt;p&gt;The only drawback of this generation was the “&amp;hellip;” ellipses at the end of the dashboard route. It didn’t work with the new router and I had to change the configuration to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Routes([
  {path: &#39;/dashboard&#39;, component: DashboardComponent},
  {path: &#39;/main-page&#39;, component: MainPageComponent}
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the final result of me playing with &lt;em&gt;Angular-CLI&lt;/em&gt;  in
&lt;a href=&#34;https://github.com/pikoscielniak/angular2-rc1-routing-sample&#34; target=&#34;_blank&#34;&gt;this repository&lt;/a&gt;.
I am sure that this drawback with the ellipses will be fixed soon and by the time you read this it could have already happened.&lt;/p&gt;

&lt;p&gt;You can do a lot of things with this tool if you try it by yourself, as I have only touched the tip of the iceberg in this post. If you work with Angular2, for sure you should spend some time with this tool and discover what it can do for you.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;



























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>Upgrading to Angular2 RC1</title>
      <link>http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/</link>
      <pubDate>Mon, 16 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The “Daj się poznać” contest is coming to an end and I have learned a lot and experimented with many things. I created a couple of sample projects but my main project was a bit neglected. It’s about time to speed up the development of my contest application.&lt;/p&gt;

&lt;p&gt;Since I’ve started working on that app, a lot changed. The biggest change was the new version of Angular2 which at the time of writing this post, is called: RC1. I started my development with an upgrade to this version.&lt;/p&gt;

&lt;p&gt;The process of upgrading went rather smoothly but only because I had very few components. The upgrade involved the renaming of namespaces so if you have a lot of components this renaming could be very cumbersome.&lt;/p&gt;

&lt;p&gt;The second biggest change in Angular RC1 was router. The previous router became deprecated and was renamed to &lt;em&gt;@angular/router-deprecated&lt;/em&gt; and the new router named &lt;em&gt;@angular/router&lt;/em&gt; wasn’t documented on the official page of
&lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34;&gt;Angular2&lt;/a&gt; at the time of writing this post.&lt;/p&gt;

&lt;p&gt;Anyway, I decided to continue my development process and I created a couple of Angular2 components. First, what I did was to get rid of dependency &lt;em&gt;@angular/router-deprecated&lt;/em&gt; from &lt;em&gt;package.json&lt;/em&gt; and from &lt;em&gt;node_modules&lt;/em&gt;. All decorators, directives and services related to new routing are inside the namespace &lt;em&gt;@angular/router&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In Angular2 RC1, the configuration of routes is done by the decorator &lt;em&gt;@Routes&lt;/em&gt;, previously it was the &lt;em&gt;@RouteConfig&lt;/em&gt; decorator. Both decorators take array as their argument but now the type of array items are different. Previously, it was array of &lt;em&gt;RouteDefinition&lt;/em&gt; with the definition being:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;interface RouteDefinition {
   path?: string;
   aux?: string;
   component?: Type | ComponentDefinition;
   loader?: Function;
   redirectTo?: any[];
   as?: string;
   name?: string;
   data?: any;
   useAsDefault?: boolean;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Currently, it is an array of &lt;em&gt;RouteMetadata&lt;/em&gt; with the definition being:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abstract class RouteMetadata {
   path: string;
   component: Type;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It means that now to create a route, you must only specify the path and the type of component. For example like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Routes([
   {path: &#39;/main-page&#39;, component: MainPageComponent},
   {path: &#39;/dashboard/...&#39;, component: DashboardComponent}
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firstly, what hit me at this stage was how to now specify the default route. I searched for a bit how to do this, but everything I found then was simply calling &lt;code&gt;this._router.navigate([&#39;/main-page&#39;])&lt;/code&gt; inside &lt;em&gt;ngOnInit&lt;/em&gt; of your main component. Then, I found that to make a route default you must specify its path with alone slash (/) as you can see in this snippet of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Component({
 moduleId: module.id,
 selector: &#39;sample-app-app&#39;,
 templateUrl: &#39;sample-app.component.html&#39;,
 styleUrls: [&#39;sample-app.component.css&#39;],
 directives: [ROUTER_DIRECTIVES],
 providers: [ROUTER_PROVIDERS]
})
@Routes([
 {path: &#39;/dashboard&#39;, component: DashboardComponent},
 {path: &#39;/&#39;, component: MainPageComponent}
])
export class SampleAppAppComponent implements OnInit {
 title = &#39;sample-app works!&#39;;

 constructor(private router:Router) {
 }

 ngOnInit() {
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to have this routing working, you must put &lt;code&gt;&amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;&lt;/code&gt; inside your template. This is the same as it used to be, but now this directive comes from a different module.&lt;/p&gt;

&lt;p&gt;To configure nested routes you don’t use &lt;em&gt;&amp;hellip;&lt;/em&gt; as before, you simply specify part of your route and the component related to it. Then inside your component you must specify further route configurations. In my case, I used &lt;em&gt;DashboardComponent&lt;/em&gt; and it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Component({
 moduleId: module.id,
 selector: &#39;app-dashboard&#39;,
 templateUrl: &#39;dashboard.component.html&#39;,
 styleUrls: [&#39;dashboard.component.css&#39;],
 directives: [ROUTER_DIRECTIVES]
})
@Routes([
 {path: &#39;/event-list&#39;, component: EventListComponent},
 {path: &#39;/event-details&#39;, component: EventDetailsComponent}
])
export class DashboardComponent implements OnInit {

 constructor() {}

 ngOnInit() {
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the rest of files for my solution in this
&lt;a href=&#34;https://github.com/pikoscielniak/angular2-rc1-routing-sample&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you look at this repository, you may wonder why I prefixed the folder with a &lt;em&gt;+&lt;/em&gt; sign. It is required in order to have lazy loading of components.
You can watch a
&lt;a href=&#34;https://www.youtube.com/watch?v=d8yAdeshpcw&amp;index=9&amp;list=PLOETEcp3DkCq788xapkP_OU-78jhTf68j&#34; target=&#34;_blank&#34;&gt;talk&lt;/a&gt;
given by
&lt;a href=&#34;https://twitter.com/mhevery&#34; target=&#34;_blank&#34;&gt;Misko Hevery&lt;/a&gt;
at
&lt;a href=&#34;https://www.ng-conf.org/#/&#34; target=&#34;_blank&#34;&gt;ng-conf 2016&lt;/a&gt; to find out a bit more about it.&lt;/p&gt;

&lt;p&gt;The final result of this example looked like this in the browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/upgradingFinalResult.png&#34; alt=&#34;Final Result&#34; title=&#34;Final Result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The interesting part of the new router is that you can specify links in templates relative to the component where they are placed. You can see an example of this here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a [routerLink]=&amp;quot;[&#39;./event-list&#39;]&amp;quot;&amp;gt;List&amp;lt;/a&amp;gt;
&amp;lt;a [routerLink]=&amp;quot;[&#39;./event-details&#39;]&amp;quot;&amp;gt;Details&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a fragment of a &lt;em&gt;dashboard.component.html&lt;/em&gt; file. You can see that the links are specified relative to the &lt;em&gt;DashboardComponent&lt;/em&gt;.
Everything I’ve written up to now the result of searching and experimenting after Angular2 RC1 one was released. I mentioned that when I wrote this post there wasn’t official documentation for the new router which was introduced in this version. It’s quite probable that what I have stated in this post may be wrong but until there is an official reference to deal with the new router, my solution is sufficient for me and fortunately it works quite well.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;



























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>Before going into production</title>
      <link>http://koscielniak.me/post/2016/03/before-going-into-production/</link>
      <pubDate>Mon, 28 Mar 2016 22:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/before-going-into-production/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have been dealing with my project for a while and I haven’t shown anything to my Imaginary Client. They are starting to think that I haven’t done anything but burn their Imaginary Money. But I have done something. I have written posts, I have done research and I have learned a lot new things. To convince my Imaginary Client that I haven’t wasted their Imaginary Money I should quickly deploy something to production but before I do this I should tune my application a bit.&lt;/p&gt;

&lt;p&gt;The first thing I did was update Angular 2. There have been two new versions since I started this series. You can check this by command  &lt;code&gt;npm outdated&lt;/code&gt; executed in terminal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/npmOutdated.png&#34; alt=&#34;npm outdated output&#34; title=&#34;npm outdated output&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It turned out that not only was Angular 2 outdated, but 5 other packages were outdated as well.
I changed the versions of every outdated package in &lt;em&gt;package.json&lt;/em&gt; to the newest one and after this I executed &lt;code&gt;npm update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, I added some npm packages by entering this in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install concurrently event-stream gulp-sourcemaps gulp-typescript gulp-inline-ng2-template --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package &lt;em&gt;concurrently&lt;/em&gt; I used in my &lt;code&gt;postinstall&lt;/code&gt; script in &lt;em&gt;package.json&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
 //...
 &amp;quot;build-dev&amp;quot;:&amp;quot;gulp build-dev&amp;quot;,
 &amp;quot;postinstall&amp;quot;: &amp;quot;concurrently \&amp;quot;typings install\&amp;quot; \&amp;quot;npm run build-dev\&amp;quot;&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now every time I execute &lt;code&gt;npm install&lt;/code&gt; the &lt;em&gt;typings&lt;/em&gt; will be installed and my &lt;em&gt;build-dev&lt;/em&gt; gulp task will be executed.&lt;/p&gt;

&lt;p&gt;The package &lt;em&gt;event-stream&lt;/em&gt; is what I needed to merge the streams into one and return it for further processing.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;gulp-sourcemaps&lt;/em&gt; package generates source maps that are embedded in the source file. Something like this is added at the bottom of every &lt;code&gt;.js&lt;/code&gt; file created from a TypeScript file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9tYWlu….
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package &lt;em&gt;gulp-typescript&lt;/em&gt; is used to compile TypeScript files.&lt;/p&gt;

&lt;p&gt;Finally, this package &lt;em&gt;gulp-inline-ng2-template&lt;/em&gt; inlines HTML and CSS files into the JavaScript files of Angular 2 components.&lt;/p&gt;

&lt;p&gt;All the packages I combined in one gulp task that looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;build-prod&#39;, [&#39;build.lib&#39;], function () {
   var tsProject = typescript.createProject(&#39;./tsconfig.json&#39;, { typescript: require(&#39;typescript&#39;) });
   var tsSrcInlined = gulp.src([webroot + &#39;**/*.ts&#39;], { base: webroot })
       .pipe(inlineNg2Template({ base: webroot }));
   return eventStream.merge(tsSrcInlined, gulp.src([&#39;typings/browser/**/*.ts&#39;,&#39;typings/browser.d.ts&#39;]))
       .pipe(sourcemaps.init())
       .pipe(typescript(tsProject))
       .pipe(sourcemaps.write())
       .pipe(gulp.dest(webroot))
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This task complies all TypeScript files in my application and inlines source maps, CSS styles and HTML templates inside components and saves all the process files inside &lt;em&gt;wwwroot&lt;/em&gt; folder. This processing reduces the number of requests to my application. I know in the HTTP2 world it won’t be needed, but as far as I know, kestrel doesn’t have support for HTTP2 yet.&lt;/p&gt;

&lt;p&gt;The next thing which I did was a conditional import of Javascript and CSS files. Dependent on the environment, I loaded them either
from
&lt;a href=&#34;https://en.wikipedia.org/wiki/Content_delivery_network&#34; target=&#34;_blank&#34;&gt;CDN&lt;/a&gt;
for production or from local for development environment. An example how I did this in the file
&lt;a href=&#34;https://github.com/pikoscielniak/notifier/blob/master/src/web/Views/Shared/_Layout.cshtml&#34; target=&#34;_blank&#34;&gt;_Layout.cshtml&lt;/a&gt;
looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;environment names=&amp;quot;Development&amp;quot;&amp;gt;
            &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;lib/material-design-lite/dist/material.blue-teal.min.css&amp;quot;&amp;gt;
            &amp;lt;script src=&amp;quot;lib/material-design-lite/material.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;/environment&amp;gt;
        &amp;lt;environment names=&amp;quot;Staging,Production&amp;quot;&amp;gt;            
            &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://code.getmdl.io/1.1.3/material.blue-teal.min.css&amp;quot;
             asp-fallback-href=&amp;quot;lib/material-design-lite/dist/material.blue-teal.min.css&amp;quot;
             asp-fallback-test-class=&amp;quot;mdl-ripple&amp;quot; /&amp;gt;
            &amp;lt;script src=&amp;quot;https://code.getmdl.io/1.1.3/material.min.js&amp;quot;
                    asp-fallback-src=&amp;quot;lib/material-design-lite/material.min.js&amp;quot;
                    asp-fallback-test=&amp;quot;window.componentHandler&amp;quot;&amp;gt;
            &amp;lt;/script&amp;gt;
          &amp;lt;/environment&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An &lt;em&gt;environment&lt;/em&gt; tag is a new thing in ASP .NET Core and you can find out more about it
&lt;a href=&#34;http://docs.asp.net/en/latest/fundamentals/environments.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
As you can see, I used a fallback test to check if loading assets from CDN succeeded, if not, I loaded the local files.
I did something similar in the
&lt;a href=&#34;https://github.com/pikoscielniak/notifier/blob/master/src/web/Views/Home/Index.cshtml&#34; target=&#34;_blank&#34;&gt;Home/Index.cshtml&lt;/a&gt;
file which you can see in my github repository.&lt;/p&gt;

&lt;p&gt;In this file, I also turned on production mode in Angular 2 by executing the following script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  System.import(&#39;angular2/core&#39;)
            .then(function(core){
                    core.enableProdMode();
                    return System.import(&#39;./app/main&#39;);
            })
            .catch(console.log.bind(console));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to have this tag &lt;em&gt;environment&lt;/em&gt; working properly, I had to add this package
&lt;em&gt;Microsoft.AspNet.Mvc.TagHelpers&lt;/em&gt; to dependencies in &lt;em&gt;project.json&lt;/em&gt;
and in the file &lt;em&gt;_ViewImports.cshtml&lt;/em&gt; I added following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@addTagHelper &amp;quot;*, Microsoft.AspNet.Mvc.TagHelpers&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To see this tag in action, I must run my application in development mode. By default, &lt;code&gt;dnx web&lt;/code&gt; command runs an application in a production environment, so, to run the application in development mode I could do this by executing this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env ASPNET_ENV=”Development” dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, you can see that in development, my files are served from localhost:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/localFile.png&#34; alt=&#34;assets from local&#34; title=&#34;assets from local&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To test the production mode, I published my application in the local folder on my computer by entering the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnu publish -o ~/publishednotifier
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;~/publishednotifier&lt;/em&gt; - it is the folder where my application will be published.&lt;/p&gt;

&lt;p&gt;Inside this folder, there is another folder called &lt;em&gt;approot&lt;/em&gt; where I can find scripts for every command declared in the section &lt;em&gt;commands&lt;/em&gt; in &lt;em&gt;project.json&lt;/em&gt; file. I had only one command &lt;em&gt;web&lt;/em&gt;.
Entering this command in terminal  ( &lt;code&gt;~/publishednotifier/approot/web&lt;/code&gt;) ran my application and I could see this in a web browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I could see in the debug tool of the browser that my files are loaded from the CDN.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/loadedFromCdn.png&#34; alt=&#34;Loaded form CDN&#34; title=&#34;Loaded form CDN&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I left space for further improvement in my project setup but I will leave the details for another post where I’ll write about package &lt;em&gt;Microsoft.AspNet.AngularServices&lt;/em&gt;.
Now, I am ready to publish my application to
&lt;a href=&#34;https://azure.microsoft.com&#34; target=&#34;_blank&#34;&gt;Azure&lt;/a&gt;. In the next post, I am going to write about what this process looked like.
&lt;h3&gt;Related posts:&lt;/h3&gt;



























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular 2 Confirm Dialog Component</title>
      <link>http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/</link>
      <pubDate>Thu, 24 Mar 2016 22:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is a continuation of the &lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;previous one&lt;/a&gt;.
I must honestly say that while writing this post I felt a bit guilty because I wrote about
something which I created in my project but I don’t need yet. I believe in
&lt;em&gt;You Aren&amp;rsquo;t Gonna Need It&lt;/em&gt; but while writing this post I violated my belief.
I described in this post how I created an Angular 2 confirm dialog component by wrapping a
Material Design Lite (MDL) dialog component. I feel awkward because I don’t need this component yet.
I didn’t have a use case for this component. I implemented it upfront which was a violation of
the YAGNI rule. Yes, I am aware of this. To justify my actions, I have only one reason:
it would be nice to implement this component and write about it now because it corresponds
with my previous
post and it&amp;rsquo;s quite likely that I will need this component in the future so my work won’t be wasted.&lt;/p&gt;

&lt;p&gt;The first thing I did was to create the following structure of folders and files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/confirm/appStructure.png&#34; alt=&#34;Folders tree&#34; title=&#34;Folders tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I added the following content to my &lt;em&gt;confirm.component.html&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;confirmationModal&amp;quot; class=&amp;quot;dialog-container&amp;quot;&amp;gt;
   &amp;lt;div class=&amp;quot;mdl-card mdl-shadow--16dp&amp;quot;&amp;gt;
       &amp;lt;h5&amp;gt;{{title}}&amp;lt;/h5&amp;gt;
       &amp;lt;p&amp;gt;{{message}}&amp;lt;/p&amp;gt;
       &amp;lt;div class=&amp;quot;mdl-card__actions dialog-button-bar&amp;quot;&amp;gt;
           &amp;lt;button class=&amp;quot;mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect&amp;quot; id=&amp;quot;cancelButton&amp;quot;
                   data-upgraded=&amp;quot;,MaterialButton,MaterialRipple&amp;quot;&amp;gt;{{cancelText}}&amp;lt;span
                   class=&amp;quot;mdl-button__ripple-container&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;mdl-ripple&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
           &amp;lt;/button&amp;gt;
           &amp;lt;button class=&amp;quot;mdl-button mdl-button--accent mdl-button--raised mdl-js-button mdl-js-ripple-effect&amp;quot;
                   id=&amp;quot;okButton&amp;quot; data-upgraded=&amp;quot;,MaterialButton,MaterialRipple&amp;quot;&amp;gt;{{okText}}&amp;lt;span
                   class=&amp;quot;mdl-button__ripple-container&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;mdl-ripple&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
           &amp;lt;/button&amp;gt;
       &amp;lt;/div&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing special here. You can find out more about MDL dialogs
&lt;a href=&#34;https://www.getmdl.io/components/index.html#dialog-section&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll be using this dialog through the service which is defined in the file &lt;em&gt;confirm.service.ts&lt;/em&gt;
and the whole file looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import {Injectable} from &amp;quot;angular2/core&amp;quot;;

@Injectable()
export class ConfirmService {
   activate: (message?: string, title?: string) =&amp;gt; Promise&amp;lt;boolean&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see there is only one property in the class &lt;em&gt;ConfirmService&lt;/em&gt; which has type function.
This function takes two optional string parameters: message and title and returns
Promise of type boolean which will indicate of course whether a user confirms something or not.
I’ll assign value to this property in the
&lt;em&gt;ConfirmComponent&lt;/em&gt; constructor which you will see in a minute.&lt;/p&gt;

&lt;p&gt;If you wonder what &lt;em&gt;@Injectable()&lt;/em&gt; means, it’s a decorator.
This decorator is required if you have any dependencies in your service.
In my case, this isn’t true but it is recommended to always decorate services with this decorator.
You can read about it
&lt;a href=&#34;https://angular.io/docs/ts/latest/guide/dependency-injection.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The key part is in the &lt;em&gt;confirm.component.ts&lt;/em&gt; file.
I am not going to show this whole file here, you can see it at this
&lt;a href=&#34;https://github.com/pikoscielniak/notifier/blob/master/src/web/wwwroot/app/shared/confirm/confirm.component.ts&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.
But I wrote about the crucial parts of this component. One of them is constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;constructor(confirmService:ConfirmService) {
   confirmService.activate = this.activate.bind(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the constructor, I assigned a function to the property &lt;em&gt;activate&lt;/em&gt; of &lt;em&gt;ConfirmService&lt;/em&gt;.
After this, calling activate on &lt;em&gt;ConfirmService&lt;/em&gt; will cause the function &lt;em&gt;activate&lt;/em&gt; from
&lt;em&gt;ConfirmComponent&lt;/em&gt; to be executed.&lt;/p&gt;

&lt;p&gt;Another important part of this component is method &lt;em&gt;ngOnInit&lt;/em&gt; from interface &lt;em&gt;OnInit&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngOnInit():any {
   this._confirmElement = document.getElementById(&#39;confirmationModal&#39;);
   this._cancelButton = document.getElementById(&#39;cancelButton&#39;);
   this._okButton = document.getElementById(&#39;okButton&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method collects references to the elements from view and assigns
them to private fields in my component class.
This why I got access to the dialog itself, the cancel button and the ok button.&lt;/p&gt;

&lt;p&gt;Having these references allows me to assign handlers to &lt;em&gt;on click&lt;/em&gt; events
on buttons and I can show a modal dialog. These happened in &lt;em&gt;_show&lt;/em&gt; method:&lt;/p&gt;

&lt;p&gt;On ok click:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this._okButton.onclick = ((e:any) =&amp;gt; {
   e.preventDefault();
   if (!positiveOnClick(e)) this._hideDialog()
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On cancel click:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this._confirmElement.onclick = () =&amp;gt; {
   this._hideDialog();
   return negativeOnClick(null);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to Show dialog:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this._confirmElement.style.opacity = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And of course I used modal dialog element reference to hide the dialog in method &lt;em&gt;_hideDialog&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private _hideDialog() {
   document.onkeyup = null;
   this._confirmElement.style.opacity = 0;
   window.setTimeout(() =&amp;gt; this._confirmElement.style.zIndex = -1, 400);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last import method in &lt;em&gt;ConfirmComponent&lt;/em&gt; is &lt;em&gt;activate&lt;/em&gt;, and this one is assigned to activate property of &lt;em&gt;ConfirmService&lt;/em&gt;. The code of this method is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;activate(message = this._defaults.message, title = this._defaults.title) {
   this._setLabels(message, title);

   let promise = new Promise&amp;lt;boolean&amp;gt;(resolve =&amp;gt; {
       this._show(resolve);
   });
   return promise;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The responsibilities of this method are to set the &lt;em&gt;title&lt;/em&gt; and &lt;em&gt;message&lt;/em&gt; properties,
create the promise, and passed
it to &lt;em&gt;_show&lt;/em&gt; method and finally return this promise to the caller. Nothing fancy here.&lt;/p&gt;

&lt;p&gt;The confirm is needed throughout the whole application. That’s why I added it to
the &lt;em&gt;AppComponent&lt;/em&gt;. Angular 2 has something which is called hierarchical
dependency injection system. In short, it means that if a parent component
has something injected as a dependency, in my case &lt;em&gt;AppComponent&lt;/em&gt;,
their children will get the same instance of this when they request it.
As all my components will be children of &lt;em&gt;AppComponent&lt;/em&gt;, all of them will
get access to the same &lt;em&gt;ConfirmSerivice&lt;/em&gt; instance.
My &lt;em&gt;AppComponent&lt;/em&gt; at that moment looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import {Component, OnInit} from &#39;angular2/core&#39;;

import {ConfirmService} from &amp;quot;./shared/confirm/confirm.service&amp;quot;;
import {ConfirmComponent} from &amp;quot;./shared/confirm/confirm.component&amp;quot;;

declare var componentHandler:any;

@Component({
   selector: &#39;notifier&#39;,
   templateUrl: &#39;app/app.component.html&#39;,
   directives: [ConfirmComponent],
   providers: [
       ConfirmService
   ]
})
export class AppComponent implements OnInit {

   title = &amp;quot;Notifier!!!&amp;quot;;

   constructor(private _confirmService:ConfirmService) {
   }

   showConfirmDialog() {
       this._confirmService.activate(&amp;quot;Are you sure?&amp;quot;)
           .then(res =&amp;gt; console.log(`Confirmed: ${res}`));
   }

   ngOnInit():any {
       componentHandler.upgradeDom();
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some parts of this file are especially important, for example, this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  directives: [ConfirmComponent],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I said that my component will be using other components, for now only one is specified:
&lt;em&gt;ConfirmComponent&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this fragment of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; providers: [ConfirmService]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I registered providers required by the &lt;em&gt;AppComponent&lt;/em&gt;. Actually, I only specified the type -
&lt;em&gt;ConfirmService&lt;/em&gt;, and  Angular 2 knows what it should do. I could be more verbose and instead
of this shorthand syntax, I could write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;providers: [
    provide(ConfirmService, {useClass: ConfirmService})
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there is no reason to do this as you can use something more concise.&lt;/p&gt;

&lt;p&gt;Another important part in &lt;em&gt;AppComponent&lt;/em&gt; is its constructor which looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;constructor(private _confirmService:ConfirmService) {
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I used shorthand syntax which created a private field for me and at the same time a parameter of constructor. This field is of type
&lt;em&gt;ConfirmService&lt;/em&gt; and an instance of that type is provided by Angular 2 dependency injection system.&lt;/p&gt;

&lt;p&gt;The method &lt;em&gt;showConfirmDialog&lt;/em&gt; had nothing special:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;showConfirmDialog() {
   this._confirmService.activate(&amp;quot;Are you sure?&amp;quot;)
       .then(res =&amp;gt; console.log(`Confirmed: ${res}`));
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I opened the confirm dialog and when it is closed I printed the choice that was made in the console.&lt;/p&gt;

&lt;p&gt;A very important thing happened in the method &lt;em&gt;ngOnInit&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngOnInit():any {
   componentHandler.upgradeDom();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line is especially important:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; componentHandler.upgradeDom();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Material Design Lite will automatically register and render all elements marked with MDL
classes upon the page load. However, in the case where you are creating DOM elements dynamically,
you need to register new elements by yourself using either &lt;em&gt;componentHandler.upgradeDom&lt;/em&gt; or
&lt;em&gt;componentHandler.upgradeElement&lt;/em&gt;. Without this line, MDL components won’t work with Angular 2.&lt;/p&gt;

&lt;p&gt;And that’s it. That’s my whole work. I added only to &lt;em&gt;app.component.html&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;modal-confirm&amp;gt;&amp;lt;/modal-confirm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also added some styling to the &lt;em&gt;ConfirmComponent&lt;/em&gt; by adding this line in the component decorator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @Component({
  //...
   styleUrls: [&#39;app/shared/confirm/confirm.component.css&#39;]
})

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And my final result looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/confirm/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking Ok I got this in a web browser console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/confirm/finalResultConsole.png&#34; alt=&#34;Final result in console&#34; title=&#34;Final result in console&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the whole source code of this solution in the
&lt;a href=&#34;https://github.com/pikoscielniak/notifier&#34; target=&#34;_blank&#34;&gt;github repository&lt;/a&gt;
for this project.&lt;/p&gt;

&lt;p&gt;My implementation of the confirm dialog component is based on the work of John Papa from the
&lt;a href=&#34;http://app.pluralsight.com/courses/angular-2-first-look&#34; target=&#34;_blank&#34;&gt;Angular 2 First Look Pluralsight&lt;/a&gt;
course. I made some changes to adjust his solution to my reality. In the next post, I am going to write about messing around with the application setup but this time from a different perspective. See you then.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;



























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding styling to my application</title>
      <link>http://koscielniak.me/post/2016/03/adding-styling-to-my-application/</link>
      <pubDate>Mon, 21 Mar 2016 22:15:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/adding-styling-to-my-application/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My last &lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;post&lt;/a&gt;
described how I setup Angular 2 on the client-side of my Project.
I was a bit surprised how long that post turned out.
That’s why I decided to write about how I added styling to my application in another post.
This post is just about the research which I did to chose a visual style for my application and about
my final choice. I think about the posts in the “Daj się poznać” series as diary for what
I have done in my contest project, and that’s I’m writing this post.&lt;/p&gt;

&lt;p&gt;I really had a dilemma about which CSS framework to choose for my application but among many unknowns
I had one certain thing - I wanted to have
&lt;a href=&#34;https://www.google.com/design/spec/material-design/introduction.html&#34; target=&#34;_blank&#34;&gt;Material Design&lt;/a&gt;
in my application. Learning
Material Design was on my to-do list for a very long time, so I’m killing two birds with one stone.&lt;/p&gt;

&lt;p&gt;There are a lot of libraries and CSS frameworks that give you ready-to-use material design components.
I wanted to use one of them
but it wasn’t an easy task to choose one. I only going mention a few which interested me the most.&lt;/p&gt;

&lt;p&gt;I am qutie good at Angular 1.x and for this framework there is already a well-tested
implementation of Material Design. You can look at it on
this &lt;a href=&#34;https://material.angularjs.org/latest/&#34; target=&#34;_blank&#34;&gt;page&lt;/a&gt;.
This framework would be an obvious choice if I used Angular 1.x on the client-side part
of my application. This framework has everything that I need. For Angular 2,
the choice wasn’t so obvious.&lt;/p&gt;

&lt;p&gt;There is already an official
&lt;a href=&#34;https://github.com/angular/material2&#34; target=&#34;_blank&#34;&gt;Material Design for Angular 2&lt;/a&gt;
but at the moment this post was written, it is currently in the early alpha stage and includes
only 6 components. I have gotten used to using Bleeding Edge stuff in my project but this
Edge is too sharp for me.
I wanted something more stable and reliable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nature abhors a vacuum&lt;/em&gt; especially in the JS/CSS world, so if there is a lack of something
it will appear quickly. I wouldn’t have searched for too long to find an alternative implementation.
On this &lt;a href=&#34;https://github.com/justindujardin/ng2-material&#34; target=&#34;_blank&#34;&gt;page&lt;/a&gt;
I found an implementation of
Material Design components for Angular 2. This implementation has everything that
I need but my gut told me: “you shouldn’t use this”. I believe never to argue with my gut feeling.
Maybe it’s a bit too heavy, maybe it is too young. I don’t know but my gut probably knows better.&lt;/p&gt;

&lt;p&gt;Another material design framework which I was willing to use was
&lt;a href=&#34;http://materializecss.com/&#34; target=&#34;_blank&#34;&gt;Materialize&lt;/a&gt;.
This framework is quite mature and has a lot components.
Far much more than I need. It has even
&lt;a href=&#34;https://github.com/InfomediaLtd/angular2-materialize&#34; target=&#34;_blank&#34;&gt;Angular 2 support&lt;/a&gt;.
But this support seems to me to be a bit immature.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getbootstrap.com/&#34; target=&#34;_blank&#34;&gt;Bootstrap&lt;/a&gt;
has also its own Material Design versions but
I am quite familiar with Bootstrap and
I wanted to learn something new that’s why I did not consider it.&lt;/p&gt;

&lt;p&gt;While researching, I looked at the Pluralsight course
&lt;a href=&#34;https://www.pluralsight.com/courses/angular-2-first-look&#34; target=&#34;_blank&#34;&gt;Angular 2: First Look&lt;/a&gt;
by &lt;a href=&#34;https://twitter.com/john_papa&#34; target=&#34;_blank&#34;&gt;John Papa&lt;/a&gt;.
He’s a great authority for me in all things client-side.
I found out in this course how he added Material Design to his application.
He used a library called
&lt;a href=&#34;https://www.getmdl.io/&#34; target=&#34;_blank&#34;&gt;Material Design Lite&lt;/a&gt;(MDL).
This library doesn’t rely on any JavaScript frameworks so I can use it in
Angular 2 without almost any trouble. But using this library has some drawbacks.
I will have to implement Angular 2 reusable components that will wrap MDL components.
I am okay with this because I want to learn a lot during the contest and this is
a perfect occasion to find out something more about Angular 2.
I’ll describe what I mean by creating wrappers around MDL components in my next post.&lt;/p&gt;

&lt;p&gt;Enough words let&amp;rsquo;s get to practice.&lt;/p&gt;

&lt;p&gt;To add MDL to my application, I issued &lt;code&gt;npm install material-design-lite --save&lt;/code&gt; in my terminal.
After a while, I had downloaded MDL to my &lt;em&gt;node_modules&lt;/em&gt; folder and it was also saved in
my &lt;em&gt;package.json&lt;/em&gt; file. Now I must copy the needed files to the &lt;em&gt;wwwroot&lt;/em&gt; as I did with the
Angular 2 files.
MDL requires two files. I added them to my config in &lt;em&gt;gulpfile.js&lt;/em&gt; so after it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
   libBase: &#39;node_modules&#39;,
   lib: [
       require.resolve(&#39;es6-shim/es6-shim.min.js&#39;),
       require.resolve(&#39;es6-shim/es6-shim.map&#39;),
       require.resolve(&#39;systemjs/dist/system-polyfills.js&#39;),
       require.resolve(&#39;systemjs/dist/system-polyfills.js.map&#39;),
       require.resolve(&#39;angular2/es6/dev/src/testing/shims_for_IE.js&#39;),
       require.resolve(&#39;systemjs/dist/system.src.js&#39;),
       require.resolve(&#39;angular2/bundles/angular2-polyfills.js&#39;),
       require.resolve(&#39;rxjs/bundles/Rx.js&#39;),
       require.resolve(&#39;angular2/bundles/angular2.dev.js&#39;),
       require.resolve(&#39;angular2/bundles/router.dev.js&#39;),
       require.resolve(&#39;angular2/bundles/http.dev.js&#39;),
       require.resolve(&#39;material-design-lite/dist/material.blue-teal.min.css&#39;),
       require.resolve(&#39;material-design-lite/material.min.js&#39;)
   ]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I chose the color template blue-teal but there are a lot of other options.
You can even customize the color set by yourself on the
&lt;a href=&#34;https://www.getmdl.io/customize/index.html&#34; target=&#34;_blank&#34;&gt;MDL page&lt;/a&gt;. To copy these files to &lt;em&gt;wwwroot/lib&lt;/em&gt;
I executed &lt;code&gt;gulp build-dev&lt;/code&gt; in the terminal.
Then I added links to these files in &lt;em&gt;_Layou.cshtml&lt;/em&gt; so the head part of this file look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
        &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
        &amp;lt;title&amp;gt;Notifier&amp;lt;/title&amp;gt;
        &amp;lt;base href=&amp;quot;/&amp;quot; /&amp;gt;
        
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://fonts.googleapis.com/icon?family=Material+Icons&amp;quot;&amp;gt;
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;lib/material-design-lite/dist/material.blue-teal.min.css&amp;quot;&amp;gt;
        &amp;lt;script src=&amp;quot;lib/material-design-lite/material.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see MDL also requires fonts which are included from googleapis.&lt;/p&gt;

&lt;p&gt;To see if my import succeeded, I changed my &lt;em&gt;app.component.ts&lt;/em&gt; so it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import {Component} from &#39;angular2/core&#39;;
@Component({
   selector: &#39;notifier&#39;,
   template: `&amp;lt;div class=&amp;quot;mdl-layout mdl-js-layout mdl-layout--fixed-header&amp;quot;&amp;gt;
       &amp;lt;header class=&amp;quot;mdl-layout__header&amp;quot;&amp;gt;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;&amp;lt;/header&amp;gt;
   &amp;lt;/div&amp;gt;`
})
export class AppComponent {
   title = &amp;quot;Notifier!!!&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And after recompilation of &lt;em&gt;.ts&lt;/em&gt; files (&lt;code&gt;npm run tsc&lt;/code&gt;), this is what I got:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/materialdesign/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You may not see it in this post but I spent a lot of time doing research on what
CSS framework or library to choose. Finally, I will stick with Material Design Lite
but I am not 100% sure about my decision. I’ll be watching what’s going on in
the Angular 2 world and if something more attractive appears,
maybe I’ll change my decision. I hope that it won’t be too late.
Maybe someone will read this post and suggest a better choice to me. Anyway, in the next post
I’ll continue with MDL and I’ll explain what I mean by wrapping MDL components.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;



























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>Project setup - client-side</title>
      <link>http://koscielniak.me/post/2016/03/project-setup-client-side/</link>
      <pubDate>Fri, 18 Mar 2016 08:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/project-setup-client-side/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not an easy task these days to set up a client-side application.
There is now an explosion of technologies. You should know all these: npm, Node.js, Grunt,
Gulp, Bower, Babel, ES2015, TypeScript, Less, Sass, Bootstrap, etc.
Yes, of course there are seeds which allow a startup project to be ready to
run but almost every one of them gives you something more than you need and
when you use this kind of seed you may not know what’s really going on
in the building process of your application.
The client-side part of my application will be based on Angular 2.
I decided to set up the Angular 2 application from scratch in order to
feel by myself what this process looks like, I’ll describe the process and what
I’ve learned in this post.&lt;/p&gt;

&lt;p&gt;I think the best place to start with something new is on its official page and so
I did this with the setup of the Angular 2 application. On this
&lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34;&gt;page&lt;/a&gt;
I found all the necessary information needed to run my first
Angular 2 component on a startup page of my application,
but I must also adjust what’s on this official page to the
&lt;a href=&#34;https://get.asp.net/&#34; target=&#34;_blank&#34;&gt;ASP .NET Core&lt;/a&gt; reality.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://angular.io/docs/ts/latest/quickstart.html&#34; target=&#34;_blank&#34;&gt;5 Min Quickstart&lt;/a&gt;
on the Angular 2 official page gave a ready to use scaffolding for my application.
What I need to be aware of is that in ASP .NET Core,
the root folder of my site is &lt;em&gt;wwwroot&lt;/em&gt; and all static files should go into this folder.
I inserted &lt;em&gt;app.component.ts&lt;/em&gt; and &lt;em&gt;main.ts&lt;/em&gt; to the &lt;em&gt;wwwroot&lt;/em&gt; folder.
I changed the content of &lt;em&gt;app.component.ts&lt;/em&gt; a bit so it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import {Component} from &#39;angular2/core&#39;;
@Component({
    selector: &#39;notifier&#39;,
    template: &#39;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;&#39;
})
export class AppComponent { 
    title = &amp;quot;Notifier!!!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other files such as: &lt;em&gt;package.json&lt;/em&gt;, &lt;em&gt;tsconfig.json&lt;/em&gt; and &lt;em&gt;typing.json&lt;/em&gt;, I put under the root of my project.
I did a couple of changes in &lt;em&gt;project.json&lt;/em&gt; so it is listed below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;Notifier&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;scripts&amp;quot;: {   
    &amp;quot;tsc&amp;quot;: &amp;quot;tsc -w&amp;quot;,
    &amp;quot;typings&amp;quot;: &amp;quot;typings&amp;quot;,
    &amp;quot;postinstall&amp;quot;: &amp;quot;typings install&amp;quot;
  },
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;angular2&amp;quot;: &amp;quot;2.0.0-beta.9&amp;quot;,
    &amp;quot;systemjs&amp;quot;: &amp;quot;0.19.24&amp;quot;,
    &amp;quot;es6-promise&amp;quot;: &amp;quot;^3.0.2&amp;quot;,
    &amp;quot;es6-shim&amp;quot;: &amp;quot;^0.33.3&amp;quot;,
    &amp;quot;reflect-metadata&amp;quot;: &amp;quot;0.1.2&amp;quot;,
    &amp;quot;rxjs&amp;quot;: &amp;quot;5.0.0-beta.2&amp;quot;,
    &amp;quot;zone.js&amp;quot;: &amp;quot;0.5.15&amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;del&amp;quot;: &amp;quot;^2.0.2&amp;quot;,
    &amp;quot;gulp&amp;quot;: &amp;quot;^3.9.0&amp;quot;,
    &amp;quot;typescript&amp;quot;: &amp;quot;^1.8.7&amp;quot;,
    &amp;quot;typings&amp;quot;:&amp;quot;^0.7.5&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I left &lt;em&gt;&amp;ldquo;dependencies&amp;rdquo;&lt;/em&gt; untouched but I changed &lt;em&gt;&amp;ldquo;devDependencies&amp;rdquo;&lt;/em&gt; quite a lot.
I don’t need live reload, so I removed this and I also added &lt;em&gt;del&lt;/em&gt; and &lt;em&gt;gulp&lt;/em&gt; which allowed me
to do some processing on application files. The most interesting things are in
the &lt;em&gt;&amp;ldquo;scripts&amp;rdquo;&lt;/em&gt; part of the &lt;em&gt;package.json&lt;/em&gt; file. I left only three commands and
two of them were unchanged, these are &lt;em&gt;typings&lt;/em&gt; and &lt;em&gt;postinstall&lt;/em&gt;.
These commands download typings for TypeScript to the root of your project right after
your &lt;em&gt;npm install&lt;/em&gt; command finishes their work. After this there’ll be a folder
named &lt;em&gt;typings&lt;/em&gt; in the root of the project. It’s wise to add this folder to &lt;em&gt;.gitignore&lt;/em&gt;.
The command &lt;em&gt;typings&lt;/em&gt; in this configuration works in the root of your project.
That’s why &lt;em&gt;typings.json&lt;/em&gt; is in this location and not in &lt;em&gt;wwwroot&lt;/em&gt;.
This file is a typings command configuration and it persists dependencies so that everyone on
the project can replicate it and that’s why you don’t need to commit &lt;em&gt;typings&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;Another command I changed a bit was &lt;em&gt;tsc&lt;/em&gt;, so when I run it my
TypeScript files will be watching for changes and compiled right after these changes happened.
This command looks for config in the location where it works.
It is the root of the project so again that’s why &lt;em&gt;tsconfig.json&lt;/em&gt; stays in
this place and not in the &lt;em&gt;wwwroot&lt;/em&gt;. This command creates &lt;em&gt;.js&lt;/em&gt; files and &lt;em&gt;.map&lt;/em&gt;
files just next to the original &lt;em&gt;.ts&lt;/em&gt; files, it is also a good practice to ignore
these &lt;em&gt;.js&lt;/em&gt; and &lt;em&gt;.map&lt;/em&gt; files in version control system. To do this I inserted these two lines to &lt;em&gt;.gitignore&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;src/web/wwwroot/app/**/*.js&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;src/web/wwwroot/app/**/*.map&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next step was executing in terminal command &lt;code&gt;npm install&lt;/code&gt;.
Doing this allowed me to fetch all dependencies which are specified in &lt;em&gt;package.json&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I put my &lt;em&gt;package.json&lt;/em&gt; in the root of project so when I executed &lt;em&gt;npm install&lt;/em&gt; the &lt;em&gt;node_modules&lt;/em&gt;
folder was located in this location. We know that only the &lt;em&gt;wwwroot&lt;/em&gt; folder is visible
from the outside world. I needed a way to move files from &lt;em&gt;node_modules&lt;/em&gt; to the location somewhere
inside &lt;em&gt;wwwroot&lt;/em&gt;. I used task runner &lt;em&gt;gulp&lt;/em&gt; to move these files to the &lt;em&gt;lib&lt;/em&gt; folder inside the &lt;em&gt;wwwroot&lt;/em&gt;.
You may have noticed that I added a bunch of modules inside &lt;em&gt;&amp;ldquo;devDependencies&amp;rdquo;&lt;/em&gt; in &lt;em&gt;package.json&lt;/em&gt;,
these are needed for copying desired files to &lt;em&gt;wwwroot&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I added &lt;em&gt;gulpfile.js&lt;/em&gt; into the root of project and inside this file
I added some &lt;em&gt;gulp&lt;/em&gt; tasks so it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;use strict&amp;quot;;

var path = require(&#39;path&#39;);
var gulp = require(&#39;gulp&#39;);
var del = require(&#39;del&#39;);

var webroot = &amp;quot;./wwwroot/&amp;quot;;

var config = {
    libBase: &#39;node_modules&#39;,
    lib: [
        require.resolve(&#39;es6-shim/es6-shim.min.js&#39;),
        require.resolve(&#39;es6-shim/es6-shim.map&#39;),
        require.resolve(&#39;systemjs/dist/system-polyfills.js&#39;),
        require.resolve(&#39;systemjs/dist/system-polyfills.js.map&#39;),
        require.resolve(&#39;angular2/es6/dev/src/testing/shims_for_IE.js&#39;),
        require.resolve(&#39;systemjs/dist/system.src.js&#39;),
        require.resolve(&#39;angular2/bundles/angular2-polyfills.js&#39;),
        require.resolve(&#39;rxjs/bundles/Rx.js&#39;),
        require.resolve(&#39;angular2/bundles/angular2.dev.js&#39;),
        require.resolve(&#39;angular2/bundles/router.dev.js&#39;),
        require.resolve(&#39;angular2/bundles/http.dev.js&#39;)
    ]
};

gulp.task(&#39;build.lib&#39;, [&#39;clean&#39;], function() {
    return gulp.src(config.lib, { base: config.libBase })
        .pipe(gulp.dest(webroot + &#39;lib&#39;));
});

gulp.task(&#39;build-dev&#39;, [&#39;build.lib&#39;], function() {

});
gulp.task(&#39;clean&#39;, function() {
    return del([webroot + &#39;lib&#39;]);
});

gulp.task(&#39;default&#39;, [&#39;build-dev&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may wonder why I bothered with all this stuff, shouldn’t I have used
&lt;a href=&#34;https://en.wikipedia.org/wiki/Content_Delivery_Network&#34; target=&#34;_blank&#34;&gt;CDN&lt;/a&gt; instead?
Yes, of course and for sure I’ll do this. However, for now
I chose the harder way to learn a bit more and gain knowledge on how
to setup a project when you cannot use CDN. At this stage,
I entered the command &lt;code&gt;gulp build-dev&lt;/code&gt; and inside &lt;em&gt;wwwroot&lt;/em&gt; a &lt;em&gt;lib&lt;/em&gt; folder was created
which contains specified libraries.
After this, my &lt;em&gt;wwwroot&lt;/em&gt; structure looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/client/wwwrootAfterSetup.png&#34; alt=&#34;wwwroot after setup&#34; title=&#34;wwwroot after setup&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now I can combine my Angular 2 with ASP .NET Core. To do this,
I need to create a couple of &lt;em&gt;.cshtml&lt;/em&gt; files inside the &lt;em&gt;Views&lt;/em&gt; folder.
Firstly, I must create this folder and then inside the &lt;em&gt;Views&lt;/em&gt; folder I created two more folders:
&lt;em&gt;Shared&lt;/em&gt; and &lt;em&gt;Home&lt;/em&gt;. Inside the &lt;em&gt;Shared&lt;/em&gt; folder I created a &lt;em&gt;_Layout.cshtml&lt;/em&gt; file and inside &lt;em&gt;Home&lt;/em&gt;
I created &lt;em&gt;Index.cshtml&lt;/em&gt;. Inside the &lt;em&gt;Views&lt;/em&gt; folder, I had to create another file:
&lt;em&gt;_ViewImports.cshtml&lt;/em&gt; which gives you the opportunity to provide some default usings for all views.
For now I left the &lt;em&gt;_ViewImports.cshtml&lt;/em&gt; file empty.&lt;/p&gt;

&lt;p&gt;I created another file in &lt;em&gt;Views&lt;/em&gt; folder &lt;em&gt;_ViewStart.cshtml&lt;/em&gt;.
This file when placed into the &lt;em&gt;Views&lt;/em&gt; folder will influence all views in this folder hierarchy.
I used this file to specify the layout for all views.
Although I am going to have only one view. The content of my &lt;em&gt;_ViewStart.cshtml&lt;/em&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;@{
   Layout = &amp;quot;_Layout&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My &lt;em&gt;_Layout.cshtml&lt;/em&gt; at this stage looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
        &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
        &amp;lt;title&amp;gt;Notifier&amp;lt;/title&amp;gt;
        &amp;lt;base href=&amp;quot;/&amp;quot; /&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        @RenderBody()
        @RenderSection(&amp;quot;scripts&amp;quot;, required: false)
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should pay attention to this element &lt;code&gt;&amp;lt;base href=&amp;quot;/&amp;quot; /&amp;gt;&lt;/code&gt;.
It is required by Angular 2 to tell the router how to compose navigation URLs.
You can read more about it
&lt;a href=&#34;https://angular.io/docs/ts/latest/guide/router.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The file &lt;em&gt;Index.cshtml&lt;/em&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;notifier&amp;gt;
    Loading...
&amp;lt;/notifier&amp;gt;
@section scripts {

    &amp;lt;!-- 1. Load libraries --&amp;gt;
    &amp;lt;!-- IE required polyfills, in this exact order --&amp;gt;
     &amp;lt;script src=&amp;quot;lib/es6-shim/es6-shim.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/systemjs/dist/system-polyfills.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/angular2/es6/dev/src/testing/shims_for_IE.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;   
    &amp;lt;script src=&amp;quot;lib/angular2/bundles/angular2-polyfills.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/systemjs/dist/system.src.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/rxjs/bundles/Rx.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/angular2/bundles/angular2.dev.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/angular2/bundles/router.dev.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/angular2/bundles/http.dev.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;


    &amp;lt;script&amp;gt;
        System.config({
            packages: {&#39;app&#39;: {defaultExtension: &#39;js&#39;}}
        });
        System.import(&#39;./app/main&#39;).catch(console.log.bind(console));
    &amp;lt;/script&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All I did here was to simply include all the files copied to the &lt;em&gt;wwwroot/lib&lt;/em&gt; folder and
I passed the configuration to
&lt;a href=&#34;https://github.com/systemjs/systemjs&#34; target=&#34;_blank&#34;&gt;System.js&lt;/a&gt;,
which is a module loader responsible for loading
the main file and other application files.&lt;/p&gt;

&lt;p&gt;I must of course add &lt;em&gt;HomeController&lt;/em&gt; which will return the &lt;em&gt;Index&lt;/em&gt; view.
It’s located in the &lt;em&gt;Controllers&lt;/em&gt; folder and its content are simply this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Microsoft.AspNet.Mvc;

namespace Notifier.Web.Controllers
{
    public class HomeController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After all these steps my project structure looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/client/projectFoldersTree.png&#34; alt=&#34;Project folders tree&#34; title=&#34;Project folders tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I am almost done but before I run the application I have to do a couple of improvements
in my server-side setup which I didn’t need before. Firstly, I must setup
the default route for my application which will be &lt;em&gt;Home/Index&lt;/em&gt;.
I did this by adding two lines in method &lt;em&gt;Configure&lt;/em&gt; of &lt;em&gt;Startup&lt;/em&gt; class so now it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  public void Configure(IApplicationBuilder app)
        {
            app.UseIISPlatformHandler();
            
            app.UseMvc(routes =&amp;gt;{
                routes.MapRoute(name:&amp;quot;default&amp;quot;, template: &amp;quot;{controller=Home}/{action=Index}/{id?}&amp;quot;);
                routes.MapRoute(&amp;quot;spa-fallback&amp;quot;,&amp;quot;{*anything}&amp;quot;,new{controller =&amp;quot;Home&amp;quot;, action=&amp;quot;Index&amp;quot;} );                
            });
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;em&gt;&amp;ldquo;spa-fallback&amp;rdquo;&lt;/em&gt; route is in case of 404 requests.
It isn’t a perfect solution. I’ll show why and how to do it better in one of my future posts.
At this moment, you can run the application by issuing in terminal
&lt;code&gt;dnx web&lt;/code&gt; and you’ll see…an empty page&amp;hellip;do you know why?
Because at this moment my application does not serve static files.
You must add another middleware to allow the application to do this.
What’s more, you must even add another Nuget package which is called:
&lt;em&gt;Microsoft.AspNet.StaticFiles&lt;/em&gt;. I inserted this dependency in &lt;em&gt;project.json&lt;/em&gt;
and then instead of typing, I clicked the Restore button in Visual Studio Code.
After this I used this middleware by typing this line &lt;em&gt;app.UseStaticFiles()&lt;/em&gt;;
in &lt;em&gt;Configure&lt;/em&gt; method, so now it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Configure(IApplicationBuilder app)
        {
            app.UseIISPlatformHandler();
            
            app.UseStaticFiles();
            
            app.UseMvc(routes =&amp;gt;{
                routes.MapRoute(name:&amp;quot;default&amp;quot;, template: &amp;quot;{controller=Home}/{action=Index}/{id?}&amp;quot;);
                routes.MapRoute(&amp;quot;spa-fallback&amp;quot;,&amp;quot;{*anything}&amp;quot;,new{controller =&amp;quot;Home&amp;quot;, action=&amp;quot;Index&amp;quot;} );                
            });
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember, the order of middlewares is imported if you put this line:
&lt;em&gt;app.UseStaticFiles();&lt;/em&gt; after &lt;em&gt;UseMvc&lt;/em&gt; middleware your static files still won’t be served.&lt;/p&gt;

&lt;p&gt;Running the application now wouldn’t show anything fancy but only errors in the browser’s console,
I must compile TypeScript files. To do this I entered &lt;code&gt;npm run tsc&lt;/code&gt; and now &lt;em&gt;.js&lt;/em&gt;
files are created and this tool is watching for any changes and recompiles files
almost immediately when these changes happen. After this, I expected something more
attractive and I was right. This is what I got:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/client/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you would like to repeat my steps, for sure you will encounter some errors and
you won’t see them until you add another package called: &lt;em&gt;Microsoft.AspNet.Diagnostics&lt;/em&gt;
and in &lt;em&gt;Configure&lt;/em&gt; method you use middleware &lt;em&gt;UseDeveloperExceptionPage&lt;/em&gt;.
After this, when an error happens you’ll see a very nice error page.
You should add this as the first middleware and remember about &lt;em&gt;dnx restore&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I haven’t finished my set-up yet but I think that this post is already long enough. In my next few posts,
I will talk about how I added styling to my application and how I improved this set-up a bit.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;



























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
  </channel>
</rss>