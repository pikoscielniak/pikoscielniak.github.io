<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Piotr Kościelniak - passionate programmer</title>
    <link>http://koscielniak.me/post/</link>
    <description>Recent content in Posts on Piotr Kościelniak - passionate programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Sep 2016 23:10:03 +0200</lastBuildDate>
    <atom:link href="http://koscielniak.me/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>bbq4.it Recap</title>
      <link>http://koscielniak.me/post/2016/09/bbq4_it_recap/</link>
      <pubDate>Tue, 20 Sep 2016 23:10:03 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/09/bbq4_it_recap/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/bbq4it.png&#34; alt=&#34;bbq4.it&#34; title=&#34;bbq4.it&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On June 24th, 2015, I was returning home from the Devvox PL conference in Cracow. During this journey,
&lt;a href=&#34;http://www.benedykt.net/&#34; target=&#34;_blank&#34;&gt;Arkadiusz Benedykt&lt;/a&gt;
and I were discussing how nice it would be to organize a conference in our city, Bielsko-Biala.
Then, at the beginning of June 2016
&lt;a href=&#34;http://www.rekord.com.pl/&#34; target=&#34;_blank&#34;&gt;my company&lt;/a&gt; was thinking about organizing a small meetup for students from our area. It was then that Arek and
I remembered our discussion and we suggested combining our idea with the company’s idea.
After brainstorming, we formulated a plan to organize a small conference in the form of a
BBQ to gather people related to the IT sector in our area. Another brainstorming session lead to the name:
&lt;a href=&#34;http://bbq4.it/&#34; &gt;bbq4.it&lt;/a&gt; and after some time we had about 75% of the agenda laid out. However,
if it wasn’t for
&lt;a href=&#34;https://www.facebook.com/piotr.szymura.37&#34;&gt;Piotr Szymura&lt;/a&gt;, things would have died in the planning stages. He took the weight of preparing the conference, unto his shoulders and thanks to him and the other hardworking people at our company, we managed to organize bbq4.it. Our collective efforts paid off, as we attracted almost 300 people.&lt;/p&gt;

&lt;p&gt;I want to recall the great time we had through this post. I will share official and behind-the-scenes photos of the inaugural bbq4.it conference which took place on the evening of September 9th, 2016.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/preparations.jpg&#34; alt=&#34;Preparations are in full swing&#34; title=&#34;Preparations are in full swing&#34; /&gt;
&lt;em&gt;Preparations are in full swing&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/precious_gift.jpg&#34; alt=&#34;Speaker’s lunch and a mysterious and precious gift for Arek Benedykt given by Maciej Aniserowicz (It’s not a goldfish)&#34; title=&#34;Speaker’s lunch and a mysterious and precious gift for Arek Benedykt given by Maciej Aniserowicz&#34; /&gt;
&lt;em&gt;Speaker’s lunch and a mysterious and precious gift for Arek Benedykt given by Maciej Aniserowicz (It’s not a goldfish)&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/registration.jpg&#34; alt=&#34;During registration&#34; title=&#34;During registration&#34; /&gt;
&lt;em&gt;During registration (Photo Credit: Paweł Mazurczak)&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/welcoming.jpg&#34; alt=&#34;Welcoming by Piotr Szymura and Arek Benedykt (Photo Credit: Paweł Mazurczak)&#34; title=&#34;Welcoming by Piotr Szymura and Arek Benedykt&#34; /&gt;
&lt;em&gt;Welcoming by Piotr Szymura and Arek Benedykt (Photo Credit: Paweł Mazurczak)&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/opening.jpg&#34; alt=&#34;Opening talk by Janusz Szymura - chairman of Rekord Group (Photo Credit: Paweł Mazurczak)&#34; title=&#34;Opening talk by Janusz Szymura - chairman of Rekord Group&#34; /&gt;
&lt;em&gt;Opening talk by Janusz Szymura - chairman of Rekord Group (Photo Credit: Paweł Mazurczak)&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/first_speaker.jpg&#34; alt=&#34;First speaker - Maciej Aniserowicz immediately after his talk (Photo Credit: Paweł Mazurczak)&#34; title=&#34;First speaker - Maciej Aniserowicz immediately after his talk&#34; /&gt;
&lt;em&gt;First speaker - Maciej Aniserowicz immediately after his talk (Photo Credit: Paweł Mazurczak)&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/second_speaker.jpg&#34; alt=&#34;Thanks to Piotr Stapp for giving the second speech during bbq4.it (Photo Credit: Paweł Mazurczak)&#34; title=&#34;Thanks to Piotr Stapp for giving the second speech during bbq4.it&#34; /&gt;
&lt;em&gt;Thanks to Piotr Stapp for giving the second speech during bbq4.it (Photo Credit: Paweł Mazurczak)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/break.jpg&#34; alt=&#34;During the break (Photo Credit: Paweł Mazurczak)&#34; title=&#34;During the break&#34; /&gt;
&lt;em&gt;During the break (Photo Credit: Paweł Mazurczak)&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/szabelski_drobik.jpg&#34; alt=&#34;Krzysiek Szabelski and Marcin Drobik celebrating their victory (Photo Credit: Paweł Mazurczak)&#34; title=&#34;Krzysiek Szabelski and Marcin Drobik celebrating their victory&#34; /&gt;
&lt;em&gt;Krzysiek Szabelski and Marcin Drobik celebrating their victory (Photo Credit: Paweł Mazurczak)&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/jarek_palka.jpg&#34; alt=&#34;Jarek Pałka debunking another myth (Photo Credit: Paweł Mazurczak)&#34; title=&#34;Jarek Pałka debunking another myth&#34; /&gt;
&lt;em&gt;Jarek Pałka debunking another myth (Photo Credit: Paweł Mazurczak)&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/bbq.jpg&#34; alt=&#34;Barbeque time! (Photo Credit: Paweł Mazurczak)&#34; title=&#34;Barbeque time!&#34; /&gt;
&lt;em&gt;Barbeque time! (Photo Credit: Paweł Mazurczak)&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/soccer.jpg&#34; alt=&#34;IT people and soccer, is it possible? Oh yes. (Photo Credit: Paweł Mazurczak)&#34; title=&#34;IT people and soccer, is it possible? Oh yes&#34; /&gt;
&lt;em&gt;IT people and soccer, is it possible? Oh yes (Photo Credit: Paweł Mazurczak)&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/prize.jpg&#34; alt=&#34;Handing first prize to the winner. (Photo Credit: Paweł Mazurczak)&#34; title=&#34;Handing first prize to the winner&#34; /&gt;
&lt;em&gt;Handing first prize to the winner (Photo Credit: Paweł Mazurczak)&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/09/wind_down.jpg&#34; alt=&#34;The party was starting to wind down&#34; title=&#34;The party was starting to wind down&#34; /&gt;
&lt;em&gt;The party was starting to wind down&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A lot of people are requesting a second edition because they really enjoyed the first. I sincerely hope we can have a repeat next year, and I’ll keep you posted. Anyway, please start praying for good weather for the beginning of September 2017, as it is an outdoor event.&lt;/p&gt;

&lt;p&gt;P.S. Big thanks to my workmate Paweł Mazurczak for allowing me to use his wonderful pictures.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quality Excites 2016</title>
      <link>http://koscielniak.me/post/2016/06/quality-excites-2016/</link>
      <pubDate>Tue, 28 Jun 2016 00:00:15 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/06/quality-excites-2016/</guid>
      <description>&lt;p&gt;The Quality Excites conference organized by the passionate
&lt;a href=&#34;https://qualityexcites.pl/organizers&#34; target=&#34;_blank&#34;&gt;team&lt;/a&gt; recently had its 5th edition. For me, this conference was exceptional because there were a lot of workshops and lectures, many of which were dedicated to testing. The speakers practice what they preach and everything related to the conference was high quality, as this is what excites the organizers and the invitees.&lt;/p&gt;

&lt;p&gt;That is why &lt;a href=&#34;https://qualityexcites.pl&#34; target=&#34;_blank&#34;&gt;Quality Excites&lt;/a&gt; remains one of my most anticipated yearly events, and every year since 2014, I’ve had the simultaneous fear and thrill of securing tickets. Fortunately, I was invited for the third time in a row.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/06/qe-cake.png&#34; alt=&#34;5th edition Quality Excites - celebration cake&#34; title=&#34;5th edition Quality Excites - celebration cake&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/GGalezowski&#34; target=&#34;_blank&#34;&gt;Grzegorz Gałęzowski&lt;/a&gt; was also invited as a speaker for the 3rd time in a row and this year his opening speech was titled &lt;em&gt;GIMMEH TDD! - O RLY?&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/06/qe-grzegorz.png&#34; alt=&#34;Grzegorz Gałęzowski - GIMMEH TDD! - O RLY?&#34; title=&#34;Grzegorz Gałęzowski - GIMMEH TDD! - O RLY?&#34; /&gt;&lt;/p&gt;

&lt;p&gt;He talked about his experiences with introducing TDD to teams but what he presented could easily be applied to many other new things which someone may introduce to their team. For me, talks given by Grzegorz are very interesting because they are concise and his presentation style is logical. I’m always impressed by his ability to weave words together, and each thought connects with the previous one and comes from his real life observations, eventually leading to a clear conclusion. You can see Grzegorz’s presentation from the previous Quality Excites conference
&lt;a href=&#34;https://www.youtube.com/watch?v=yNyMrjMawUY&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; to see what I mean.&lt;/p&gt;

&lt;p&gt;After the opening session, I attended the workshop given by Bartłomiej Michalski and Łukasz Januszek. Workshops are my style and I think the workshops are what make Quality Excites so exceptional among other conferences. They are given for free of charge and are hosted by very passionate people who have great practical knowledge in their field. Additionally, the workshops presenters I spoke with, were all employees of Future Processing. This year, I attended the workshop &lt;em&gt;How to make work more profitable?&lt;/em&gt;. The workshop used an analogy that compared creating processes in a company to creating rules for board games and used this analogy to explain many different roles which people in a team can have and how they influence each other and the situation in the team.&lt;/p&gt;

&lt;p&gt;This workshop was insightful and opened my mind to new ideas, it’s given me a lot to think about.
It may be some time before I can use everything I’ve learned in real situations, but I may be able to use one takeaway from this workshop sooner rather than later: being able to discuss unpleasant things with my team as soon as possible.&lt;/p&gt;

&lt;p&gt;After the workshop and lunch break, I watched three lectures &lt;em&gt;Testing the Internet of things&lt;/em&gt; by Tomasz Janiszewski and Dawid Pacia and then &lt;em&gt;Star Trek: BDD Enterprise&lt;/em&gt; by Tomasz Dubikowski. Both of these lectures were very well-prepared and well-presented but currently I don’t have opportunities to use what I learned.&lt;/p&gt;

&lt;p&gt;The third lecturer which I attended in the afternoon block was given by
&lt;a href=&#34;https://twitter.com/j_palka&#34; target=&#34;_blank&#34;&gt;Jarosław Pałk&lt;/a&gt;.
I really like this speaker because of his sense of humor, profound knowledge and the way he talks about very serious and sometimes sad things.&lt;/p&gt;

&lt;p&gt;The most important part of Jarosław’s speech were sentences like what I’m about to translate. I&amp;rsquo;m paraphrasing from Polish to English, but he said something along the lines of: &lt;em&gt;Developers have benefits, and between these benefits, they create products/services for clients.&lt;/em&gt;&lt;br /&gt;
By benefits, he meant table football, billiards, ping pong, etc. In his speech, he had a couple of &lt;em&gt;the whole truth about the word&lt;/em&gt; sentences and that’s why I like his talks. I can’t wait to see Jarek at
&lt;a href=&#34;http://bbq4.it/&#34; target=&#34;_blank&#34;&gt;bbq4.it&lt;/a&gt; in September.&lt;/p&gt;

&lt;p&gt;After the last talk there was an after-party held in the Future Processing base where we were treated to a cake to celebrate the 5th staging of Quality Excites.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/06/qe-cake-with-organizers.png&#34; alt=&#34;5th edition Quality Excites - celebration cake and organizers&#34; title=&#34;5th edition Quality Excites - celebration cake and organizers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I think it was a well-deserved occasion to celebrate. Quality Excites provides a lot of opportunities to learn new things for free and I would like to thank the organizers for this and I would like to wish all the organisers and participations the best.&lt;/p&gt;

&lt;p&gt;With the workshops and lectures held during this conference, they inspired a lot of people including myself. You can see what it means for quality to excite, while attending this conference. It was my third time at Quality Excites and my third time seeing that the organizers believe in quality and provide it in every lecture and workshop. I hope the Quality Excites team keeps going and I hope to see them for the 4th time next year.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Devoxx 2016</title>
      <link>http://koscielniak.me/post/2016/06/devoxx-2016/</link>
      <pubDate>Mon, 27 Jun 2016 23:43:59 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/06/devoxx-2016/</guid>
      <description>&lt;p&gt;The conference beast living inside of me has awoken again but this time it was very hungry and I ended up having to feed it for 4 days. I spent the first 3 days at
&lt;a href=&#34;http://devoxx.pl/&#34; target=&#34;_blank&#34;&gt;the Devoxx Poland&lt;/a&gt; conference which ran from June 22nd to 25th.
It is one of the biggest conferences in Poland and this was the second staging. There were 2500 participants and 100 speakers at this edition, and among the speakers, was one of my work mates
&lt;a href=&#34;http://www.benedykt.net/&#34; target=&#34;_blank&#34;&gt;Arkadiusz Benedykt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/06/me-and-team.jpg&#34; alt=&#34;Me and my work mates at Devoxx Poland, after Arek’s speech&#34; title=&#34;Me and my work mates at Devoxx Poland, after Arek’s speech&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The event was held at
&lt;a href=&#34;https://pl.wikipedia.org/wiki/Centrum_Kongresowe_ICE_Krak%C3%B3w&#34; target=&#34;_blank&#34;&gt;the International Conferences and Entertainment Center in Cracow&lt;/a&gt;.
I attended a lot of great talks and a couple which weren’t so great, but the most important thing for me was that this event gave me an opportunity to talk with many interesting people and I benefited from this opportunity.&lt;/p&gt;

&lt;p&gt;The most fascinating for me was being able to have a quick chat with
&lt;a href=&#34;https://twitter.com/mhevery&#34; target=&#34;_blank&#34;&gt;Misko Hevery&lt;/a&gt;.
Can you guess what his presentation was about? Of course&amp;hellip;it was
&lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34;&gt;Angular 2&lt;/a&gt;.
For me, his presentation was one of the best during this conference. He explained how powerful Angular 2 is and why. I met Misko at the speaker’s dinner organized by
&lt;a href=&#34;http://www.metrosoft.com/&#34; target=&#34;_blank&#34;&gt;Metrosoft®&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I started our conversation with the question: “when will Angular 3 come out?”. Misko smiled for a while and something to the effect of “it won&amp;rsquo;t”. I asked him “do you promise?”, and he said “yes I do”. So Dear Community, you can use Angular 2 and don&amp;rsquo;t worry about Angular 3 being released soon. Misko spoke during his speech about many different things related with Angular 2, which you can see in these
&lt;a href=&#34;https://docs.google.com/presentation/d/1fRw9VP6LCy4Fl-uruATfLq2V9UY9JBjgQCZaeJlW0WQ/edit&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;.
I asked him how many of them I can use today (23 June 2016) and he said everything. So Dear Community, it&amp;rsquo;s about time to jump into Angular 2 and take as much as you want from it has to offer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/06/me-and-misko.jpg&#34; alt=&#34;Misko and I&#34; title=&#34;Misko and I&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Another interesting conversation I had was with
&lt;a href=&#34;https://twitter.com/saturnism&#34; target=&#34;_blank&#34;&gt;Ray Tsang&lt;/a&gt; after the speaker’s dinner.
We talked about &lt;a href=&#34;http://kubernetes.io/&#34; target=&#34;_blank&#34;&gt;Kubernetes&lt;/a&gt;, the cloud, Google, and many others. It was a very nice talk set against the pleasant scenery of the Vistula river and it encouraged me to attend Ray’s presentation the next day titled: &lt;em&gt;Scaling with Kubernetes, Automatically! Learn Kubernetes API through writing a visualizer to an autoscaler&lt;/em&gt;. It was an amazing presentation with very few slides and a lot of real time action with Kubernetes. Honestly speaking, I got lost somewhere in the middle of his presentation but I was happy to attend and it was a pleasure watching how Ray executed one shell command after another and watching him act like a child with a brand new toy.&lt;/p&gt;

&lt;p&gt;To sum up all the presentations: a lot of them were about microservices as many speakers at Devoxx Poland 2016 ended up focusing on this theme. There were presentations on how to: create microservices, monitor them, deploy them, configure a Continuous Delivery environment and other things more or less related to microservices.&lt;/p&gt;

&lt;p&gt;I like Devoxx Poland because it gives me the opportunity to meet new people and talk with them about the things they couldn’t say on stage. Devoxx primarily focuses on dozens of lectures, but this year that wasn’t the most important part for me. I was focused on meeting new people and communicating with them and this goal was 100% fulfilled.&lt;/p&gt;

&lt;p&gt;I want to thank
&lt;a href=&#34;https://twitter.com/grzegorzduda&#34; target=&#34;_blank&#34;&gt;Grzegorz Duda&lt;/a&gt; and his team for another amazing Devoxx Poland. I hope that he will organise the next edition and I’ll be there next year. I also want to thank Metrosoft® for organizing one of the best parties I’ve ever been to. My goal for next year is to be at this party again.&lt;/p&gt;

&lt;p&gt;For dessert, my conference beast was fed another event and you can read about it in this
&lt;a href=&#34;http://koscielniak.me/post/2016/06/quality-excites-2016/&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using only the generator of Angular-CLI</title>
      <link>http://koscielniak.me/post/2016/06/using-only-the-generator-of-angular-cli/</link>
      <pubDate>Thu, 02 Jun 2016 22:30:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/06/using-only-the-generator-of-angular-cli/</guid>
      <description>&lt;p&gt;In one of my previous &lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;posts&lt;/a&gt;,
I wrote about
&lt;a href=&#34;https://cli.angular.io/&#34; target=&#34;_blank&#34;&gt;Angular CLI&lt;/a&gt;.
With this tool, you can simplify your work when dealing with Angular2 projects. This tool can create a template of a new Angular2 application where everything is set up and works perfectly. However, what if you want to have a build process of your application that is a bit different from what Angular CLI offers or you want to use this tool in an existing project which already has its own structure and build process? Can you still use some goodies from this CLI? Is this possible?&lt;/p&gt;

&lt;p&gt;Yes it is. You can take as much as you want from this tool. All you need to do, is to install Angular-CLI with the command &lt;code&gt;npm install -g angular-cli&lt;/code&gt; and then add a file &lt;em&gt;angular-cli.json&lt;/em&gt; to the root folder of your project. Inside &lt;em&gt;angular-cli.json&lt;/em&gt;, I put the content like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;defaults&amp;quot;: {
    &amp;quot;prefix&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;sourceDir&amp;quot;: &amp;quot;wwwroot&amp;quot;,
    &amp;quot;styleExt&amp;quot;: &amp;quot;css&amp;quot;,
    &amp;quot;prefixInterfaces&amp;quot;: false
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify more options here for this CLI but this is enough for me. This file can be added to &lt;em&gt;.gitignore&lt;/em&gt; as it does not have any influence on your project.&lt;/p&gt;

&lt;p&gt;You also need this tool as a part of the development dependencies in &lt;em&gt;package.json&lt;/em&gt; of your project. A command like this does the job: &lt;code&gt;npm install angular-cli --save-dev&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After this you can use almost every command of CLI, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ng g service
ng g route
ng g component
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some commands are impossible to use because we don’t have a full Angular-CLI project, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ng serve
ng build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When use them, you get errors.&lt;/p&gt;

&lt;p&gt;As you can see, you can have happiness and receive a helping hand from Angular CLI with development workflow and the building process of your choice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Epilogue: Daj się poznać series</title>
      <link>http://koscielniak.me/post/2016/05/epilogue-daj-sie-poznac-series/</link>
      <pubDate>Tue, 24 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/epilogue-daj-sie-poznac-series/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Daj się poznać&lt;/em&gt; contest has come to an end. Now it’s time to sum up what I did, what I didn’t do and what I learnt during this period of time.&lt;/p&gt;

&lt;p&gt;First of all, I want to thank
&lt;a href=&#34;http://devstyle.pl/&#34; target=&#34;_blank&#34;&gt;Maciej Aniserowicz&lt;/a&gt; for organizing this contest. Initiatives like this do a lot for the Polish programming community as a whole, but even more for the individual programmers who participated in the contest, and even those on the sidelines who merely observed. I consider Maciej Aniserowicz to be a life mentor and now I can brag to the Polish tech community that he is the patron saint of Polish programmers.&lt;/p&gt;

&lt;p&gt;I think everyone who participated in this contest learnt something, whether they finished or not. I learnt a lot: of course, I learnt new technical stuff but more importantly I learnt a lot about my work style about how to organize my time. I thought about blogging for a long time but I always had an excuse: I don&amp;rsquo;t have time, my kids keep me busy, I need to sleep&amp;hellip;I started my blog in January, but this contest helped provide content to motivate me to continue blogged. My initial goal for my blog was to write at least one post a month but the contest required two posts a week. Initially, it seemed unrealistic for me but turned out that I managed to cope. This is my biggest lesson learned from this contest: yes, you have time to write two posts a week if you organize your time wisely. Maciek - thank you for creating an opportunity for me to learn this lesson for myself.&lt;/p&gt;

&lt;p&gt;In some cases, I was even able to write more than two posts per week. During the content I always had two posts in reserve in case something unexpected happened. I put aside 8 hours a week for this contest, and this was enough to write two posts and example code, but the contest itself also required me to create a project. This didn’t leave much time for writing the project and the project isn’t in the best condition. Despite focusing mainly on writing for this content, my goal has still been accomplished.&lt;/p&gt;

&lt;p&gt;During the contest, I worked with new technologies. I had to create a sample project for almost every thing that I learnt. All these projects are on github, complete with posts.&lt;/p&gt;

&lt;p&gt;The bleeding edge technologies that I used were a big obstacle in my development process. If bleeding edge technology were sharp enough to cut me in real life, then sometimes the blood would have been on the floor, the keyboard and dripping down my desk.
Especially when I &lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;upgraded Angular2&lt;/a&gt;
and
&lt;a href=&#34;http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/&#34;&gt;ASP.NET Core&lt;/a&gt;.
But through this, I achieved another goal which was to learn a lot of new things.&lt;/p&gt;

&lt;p&gt;This contest took me out of my comfort zone and I am glad for it. Now when the contest is finished, I must think about new content for my blog. For sure, I will slow down a bit because two posts a week is too much for me. I must also think about the content which I am going to present on my blog but these considerations are for another occasion. Now let’s be happy with the final post of the &lt;em&gt;Daj się poznać&lt;/em&gt; series. Thanks once again Maciek, keep up the good work. Also, I’d like to thank my teammate
&lt;a href=&#34;http://www.benedykt.net/&#34; target=&#34;_blank&#34;&gt;Arkadiusz Benedykt&lt;/a&gt; who stood/sat next to me and sometimes gave me a lot of really helpful advice.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;





























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/&#34;&gt;Migrating to ASP .NET Core RC2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/epilogue-daj-sie-poznac-series/&#34;&gt;Epilogue: Daj się poznać series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrating to ASP .NET Core RC2</title>
      <link>http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/</link>
      <pubDate>Sun, 22 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After waiting for some time, I was happy when ASP.NET Core RC2 was recently released. This version should have debuted at the beginning of 2016, so imagine my anticipation and excitement to install it on my Linux machine and upgrade my project to this version.&lt;/p&gt;

&lt;p&gt;To install this version of ASP.NET Core I started on
&lt;a href=&#34;https://www.microsoft.com/net/core&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt; and then I chose Linux -&amp;gt; Ubuntu 14.04. I followed the step-by-step instructions provided and after a while I could run the command &lt;code&gt;dotnet -h&lt;/code&gt; in my terminal, and I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/migrating/dotnet-help.png&#34; alt=&#34;dotnet -h&#34; title=&#34;dotnet -h&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now I could start to upgrade my project. There were pages where I could find instructions on how to adjust the project to the new version of ASP. On
&lt;a href=&#34;https://dotnet.github.io/docs/core-concepts/dnx-migration.html&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt;
I found out how to migrate from &lt;em&gt;dnx&lt;/em&gt; to new the .NET Core CLI and on
&lt;a href=&#34;https://docs.asp.net/en/latest/migration/rc1-to-rc2.html&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt;
I found out how to upgrade my project to the RC2 version.&lt;/p&gt;

&lt;p&gt;The first steps of the upgrade were rather simple and mechanical. I had to change the dependencies in &lt;em&gt;project.json&lt;/em&gt;. All packages with names that started with &lt;em&gt;Microsoft.AspNet.&lt;/em&gt; now have names starting with: &lt;em&gt;Microsoft.AspNetCore.&lt;/em&gt;. I also had to change the version of the packages. My &lt;em&gt;dependencies&lt;/em&gt; section looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;dependencies&amp;quot;: {
    &amp;quot;Microsoft.AspNetCore.Diagnostics&amp;quot;: &amp;quot;1.0.0-rc2-final&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Server.IISIntegration&amp;quot;: &amp;quot;1.0.0-rc2-final&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Server.IISIntegration.Tools&amp;quot;: &amp;quot;1.0.0-preview1-final&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Server.Kestrel&amp;quot;: &amp;quot;1.0.0-rc2-final&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.Mvc&amp;quot;: &amp;quot;1.0.0-rc2-final&amp;quot;,
    &amp;quot;Microsoft.AspNetCore.StaticFiles&amp;quot;: &amp;quot;1.0.0-rc2-final&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.Binder&amp;quot;: &amp;quot;1.0.0-rc2-final&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.Json&amp;quot;: &amp;quot;1.0.0-rc2-final&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.EnvironmentVariables&amp;quot;: &amp;quot;1.0.0-rc2-final&amp;quot;,
    &amp;quot;Microsoft.NETCore.App&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;platform&amp;quot;,
        &amp;quot;version&amp;quot;: &amp;quot;1.0.0-*&amp;quot;
    }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another change is that a new package &lt;em&gt;Microsoft.NETCore.App&lt;/em&gt; appeared among the dependencies, and it was a runtime for the application.&lt;/p&gt;

&lt;p&gt;I could remove the dependency &lt;em&gt;Microsoft.AspNet.Mvc.TagHelpers&lt;/em&gt; because now it is included in the package &lt;em&gt;Microsoft.AspNetCore.Mvc&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I also had to fix the namespaces. I had to change each namespace which started with &lt;em&gt;Microsoft.AspNet.&lt;/em&gt; to &lt;em&gt;Microsoft.AspNetCore.&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The changes where required also in the structure of &lt;em&gt;project.json&lt;/em&gt;. Some properties are no longer valid, for example: &lt;em&gt;commands&lt;/em&gt;. I must also specify the frameworks section and it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;frameworks&amp;quot;: {
    &amp;quot;netcoreapp1.0&amp;quot;: {
        &amp;quot;imports&amp;quot;: [
            &amp;quot;dotnet5.6&amp;quot;,
            &amp;quot;dnxcore50&amp;quot;,
            &amp;quot;portable-net45+win8&amp;quot;
        ]
    }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also added the section &lt;em&gt;buildOptions&lt;/em&gt; with the following properties:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;buildOptions&amp;quot;: {
    &amp;quot;emitEntryPoint&amp;quot;: true,
    &amp;quot;preserveCompilationContext&amp;quot;: true
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After upgrading to RC2, the ASP application became like an ordinary console application. That’s why I had to create a class with the main method where I started my ASP app. This class looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Program
{  // Entry point for the application.
    public static void Main(string[] args) 
    {
        var host = new WebHostBuilder()
            .UseKestrel()
            .UseContentRoot(Directory.GetCurrentDirectory())       
            .UseIISIntegration()
            .UseStartup&amp;lt;Startup&amp;gt;()
            .Build();

        host.Run();   
    }         
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I removed this line of code from Startup.cs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Entry point for the application.
public static void Main(string[] args) =&amp;gt; WebApplication.Run&amp;lt;Startup&amp;gt;(args);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also had to remove the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.UseIISPlatformHandler();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;from the &lt;em&gt;Startup.Configure&lt;/em&gt; method because now IIS is configured in &lt;em&gt;Program.Main&lt;/em&gt; method.&lt;/p&gt;

&lt;p&gt;After these steps, I could finally run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then I was able to build my app with the command &lt;code&gt;dotnet build&lt;/code&gt; but I received two errors:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/home/piotr/Repositories/notifier/src/web/Startup.cs(26,46): error CS1061: &#39;IConfigurationRoot&#39; does not contain a definition for &#39;Get&#39; and no extension method &#39;Get&#39; accepting a first argument of type &#39;IConfigurationRoot&#39; could be found (are you missing a using directive or an assembly reference?)
/home/piotr/Repositories/notifier/src/web/Startup.cs(27,22): error CS1061: &#39;IServiceCollection&#39; does not contain a definition for &#39;AddInstance&#39; and no extension method &#39;AddInstance&#39; accepting a first argument of type &#39;IServiceCollection&#39; could be found (are you missing a using directive or an assembly reference?)

Compilation failed.
    4 Warning(s)
    2 Error(s)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems like the extension methods &lt;em&gt;Get&lt;/em&gt; and &lt;em&gt;AddInstance&lt;/em&gt; no longer exist. A bit of research led to a solution for how to fix the lack of &lt;em&gt;AddInstance&lt;/em&gt; extension method. Now it is called &lt;em&gt;AddSingleton&lt;/em&gt;, but I couldn’t find a replacement for &lt;em&gt;Get&amp;lt;&amp;gt;&lt;/em&gt; extension method so I changed my code a bit and now it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var authSettings = new AuthSettings(); 
var authSection = Configuration.GetSection(&amp;quot;AuthSettings&amp;quot;);
authSettings.ClientId = authSection[&amp;quot;ClientId&amp;quot;];
authSettings.Authority = authSection[&amp;quot;Authority&amp;quot;];
services.AddSingleton(authSettings);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, my code compiled and I could run it with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;env ASPNETCORE_ENVIRONMENT=&amp;quot;Development&amp;quot; dotnet run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result of this command was another error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Unhandled Exception: System.IO.FileNotFoundException: The configuration file &#39;appsettings.json&#39; was not found and is not optional.
   at Microsoft.Extensions.Configuration.FileConfigurationProvider.Load()
   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()
   at Notifier.Web.Startup..ctor(IHostingEnvironment env)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It looked like my application didn’t have a setup base path so it didn’t know where to look for &lt;em&gt;appsettings.json&lt;/em&gt;. In the new version of ASP, you specify the app basepath by setting it in the &lt;em&gt;ConfigurationBuilder&lt;/em&gt; with a code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var builder = new ConfigurationBuilder()
                .SetBasePath(hostingEnvironment.ContentRootPath);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you may notice, the new version of ASP also changed the names of the environmental variables. To set the runtime environment of an application you now use the variable &lt;em&gt;ASPNETCORE_ENVIRONMENT&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After setting up the base path, I ran the application again and it ran without errors. I navigated to the &lt;em&gt;localhost:5000&lt;/em&gt; and saw this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/migrating/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I think that this is proof that I managed to upgrade my ASP.NET Core application to the RC2 version. I must honestly say that this process was very boring and took me longer than I expected. I had to change the way I got the settings from the configuration file. I don’t know why I couldn’t get access to the extension method &lt;em&gt;Get&amp;lt;&amp;gt;&lt;/em&gt; on the &lt;em&gt;IConfigurationRoot&lt;/em&gt;. I&amp;rsquo;m not sure if it was removed or renamed, but I didn&amp;rsquo;t manage to find a replacement for this method. When I wrote this post, the RC2 version was fresh out the oven (3 days to be exact) so I am sure that I’ll find more information about this missing method soon.&lt;/p&gt;

&lt;p&gt;By the way, this is my last technical post in the &lt;em&gt;Daj się poznać&lt;/em&gt; contest series. In the next post, I’ll write a summary of my work for this contest.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;





























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/&#34;&gt;Migrating to ASP .NET Core RC2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/epilogue-daj-sie-poznac-series/&#34;&gt;Epilogue: Daj się poznać series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>Experimenting with Angular2 CLI</title>
      <link>http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/</link>
      <pubDate>Thu, 19 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During the &lt;a href=&#34;https://www.youtube.com/watch?v=gdlpE9vPQFs&amp;list=PLOETEcp3DkCq788xapkP_OU-78jhTf68j&amp;index=6&#34; target=&#34;_blank&#34;&gt;keynote of ng-conf 2016&lt;/a&gt;,
&lt;a href=&#34;https://twitter.com/bradlygreen&#34; target=&#34;_blank&#34;&gt;Brad Green&lt;/a&gt; presented a lot of cool stuff about Angular2 and one of them was a tool called
&lt;a href=&#34;https://cli.angular.io/&#34; target=&#34;_blank&#34;&gt;Angular-CLI&lt;/a&gt;. &lt;em&gt;Angular-CLI&lt;/em&gt; contains a bunch of simple commands to make your work easier with Angular2 projects. The tool essentially streamlines and simplifies your projects. I am always cautious about this kind of tool because often they create far more than you need and pollute your project but when used wisely, they can be helpful.&lt;/p&gt;

&lt;p&gt;To start playing with &lt;em&gt;Angular-CLI&lt;/em&gt; first I had to install it. This tool is built with Node.js and it requires the node version 4 or greater. You can install this tool with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g angular-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a new application I used the command: &lt;code&gt;ng new SampleApp&lt;/code&gt;.
And the result I got was a working application with a folder structure like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/angular-cli/initialTree.png&#34; alt=&#34;Initial file tree&#34; title=&#34;Initial file tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, a lot is done after you run this command. You have not only your app ready to use but also ready to build. You can even run tests.
After installation, I executed &lt;code&gt;ng build&lt;/code&gt; and &lt;code&gt;ng serve&lt;/code&gt; which allows us to see under the URI &lt;em&gt;&lt;a href=&#34;http://localhost:4200/&#34;&gt;http://localhost:4200/&lt;/a&gt;&lt;/em&gt; in the following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/angular-cli/sample-app-works.png&#34; alt=&#34;sample-app works!&#34; title=&#34;sample-app works!&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, I wanted to create a new route. I did this with the command &lt;code&gt;ng generate route dashboard&lt;/code&gt; and I got the following output in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;installing route
installing component
  create src/app/+dashboard/dashboard.component.css
  create src/app/+dashboard/dashboard.component.html
  create src/app/+dashboard/dashboard.component.spec.ts
  create src/app/+dashboard/dashboard.component.ts
  create src/app/+dashboard/index.ts
  create src/app/+dashboard/shared/index.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tool is smart enough to create folders prefixed with a &lt;em&gt;+&lt;/em&gt; sign. It is required in order to have lazy loading of components.
You can watch
&lt;a href=&#34;https://www.youtube.com/watch?v=d8yAdeshpcw&amp;index=9&amp;list=PLOETEcp3DkCq788xapkP_OU-78jhTf68j&#34; target=&#34;_blank&#34;&gt;a talk&lt;/a&gt;
given by
&lt;a href=&#34;https://twitter.com/mhevery&#34; target=&#34;_blank&#34;&gt;Misko Hevery&lt;/a&gt;
at &lt;a href=&#34;https://www.ng-conf.org&#34; target=&#34;_blank&#34;&gt;ng-conf 2016&lt;/a&gt; to find out a bit more about it.&lt;/p&gt;

&lt;p&gt;You can use this command line tool to create services, modules, components, etc.&lt;/p&gt;

&lt;p&gt;Next, I tried this tool to see how it deals with nested routes. I executed the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ng generate route dashboard/event-list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it turned out that &lt;em&gt;Angular-CLI&lt;/em&gt; deals with it pretty well. I got this structure of folders:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/angular-cli/componentFiles.png&#34; alt=&#34;Component files&#34; title=&#34;Component files&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the routing was created like this in &lt;em&gt;dashboard.component&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Routes([
 {path: &#39;/event-list&#39;, component: EventListComponent}
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it was also changed in the &lt;em&gt;sample-app.component&lt;/em&gt; to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Routes([
 {path: &#39;/dashboard/...&#39;, component: DashboardComponent},
 {path: &#39;/main-page&#39;, component: MainPageComponent}
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this tool creates all the files needed for the component. These files are: a template file, a style file, a component file. It also generates a &lt;em&gt;spec&lt;/em&gt; file where you have the scaffolding for testing your component.&lt;/p&gt;

&lt;p&gt;The only drawback of this generation was the “&amp;hellip;” ellipses at the end of the dashboard route. It didn’t work with the new router and I had to change the configuration to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Routes([
  {path: &#39;/dashboard&#39;, component: DashboardComponent},
  {path: &#39;/main-page&#39;, component: MainPageComponent}
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the final result of me playing with &lt;em&gt;Angular-CLI&lt;/em&gt;  in
&lt;a href=&#34;https://github.com/pikoscielniak/angular2-rc1-routing-sample&#34; target=&#34;_blank&#34;&gt;this repository&lt;/a&gt;.
I am sure that this drawback with the ellipses will be fixed soon and by the time you read this it could have already happened.&lt;/p&gt;

&lt;p&gt;You can do a lot of things with this tool if you try it by yourself, as I have only touched the tip of the iceberg in this post. If you work with Angular2, for sure you should spend some time with this tool and discover what it can do for you.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;





























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/&#34;&gt;Migrating to ASP .NET Core RC2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/epilogue-daj-sie-poznac-series/&#34;&gt;Epilogue: Daj się poznać series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>Upgrading to Angular2 RC1</title>
      <link>http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/</link>
      <pubDate>Mon, 16 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The “Daj się poznać” contest is coming to an end and I have learned a lot and experimented with many things. I created a couple of sample projects but my main project was a bit neglected. It’s about time to speed up the development of my contest application.&lt;/p&gt;

&lt;p&gt;Since I’ve started working on that app, a lot changed. The biggest change was the new version of Angular2 which at the time of writing this post, is called: RC1. I started my development with an upgrade to this version.&lt;/p&gt;

&lt;p&gt;The process of upgrading went rather smoothly but only because I had very few components. The upgrade involved the renaming of namespaces so if you have a lot of components this renaming could be very cumbersome.&lt;/p&gt;

&lt;p&gt;The second biggest change in Angular RC1 was router. The previous router became deprecated and was renamed to &lt;em&gt;@angular/router-deprecated&lt;/em&gt; and the new router named &lt;em&gt;@angular/router&lt;/em&gt; wasn’t documented on the official page of
&lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34;&gt;Angular2&lt;/a&gt; at the time of writing this post.&lt;/p&gt;

&lt;p&gt;Anyway, I decided to continue my development process and I created a couple of Angular2 components. First, what I did was to get rid of dependency &lt;em&gt;@angular/router-deprecated&lt;/em&gt; from &lt;em&gt;package.json&lt;/em&gt; and from &lt;em&gt;node_modules&lt;/em&gt;. All decorators, directives and services related to new routing are inside the namespace &lt;em&gt;@angular/router&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In Angular2 RC1, the configuration of routes is done by the decorator &lt;em&gt;@Routes&lt;/em&gt;, previously it was the &lt;em&gt;@RouteConfig&lt;/em&gt; decorator. Both decorators take array as their argument but now the type of array items are different. Previously, it was array of &lt;em&gt;RouteDefinition&lt;/em&gt; with the definition being:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;interface RouteDefinition {
   path?: string;
   aux?: string;
   component?: Type | ComponentDefinition;
   loader?: Function;
   redirectTo?: any[];
   as?: string;
   name?: string;
   data?: any;
   useAsDefault?: boolean;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Currently, it is an array of &lt;em&gt;RouteMetadata&lt;/em&gt; with the definition being:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abstract class RouteMetadata {
   path: string;
   component: Type;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It means that now to create a route, you must only specify the path and the type of component. For example like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Routes([
   {path: &#39;/main-page&#39;, component: MainPageComponent},
   {path: &#39;/dashboard/...&#39;, component: DashboardComponent}
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firstly, what hit me at this stage was how to now specify the default route. I searched for a bit how to do this, but everything I found then was simply calling &lt;code&gt;this._router.navigate([&#39;/main-page&#39;])&lt;/code&gt; inside &lt;em&gt;ngOnInit&lt;/em&gt; of your main component. Then, I found that to make a route default you must specify its path with alone slash (/) as you can see in this snippet of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Component({
 moduleId: module.id,
 selector: &#39;sample-app-app&#39;,
 templateUrl: &#39;sample-app.component.html&#39;,
 styleUrls: [&#39;sample-app.component.css&#39;],
 directives: [ROUTER_DIRECTIVES],
 providers: [ROUTER_PROVIDERS]
})
@Routes([
 {path: &#39;/dashboard&#39;, component: DashboardComponent},
 {path: &#39;/&#39;, component: MainPageComponent}
])
export class SampleAppAppComponent implements OnInit {
 title = &#39;sample-app works!&#39;;

 constructor(private router:Router) {
 }

 ngOnInit() {
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to have this routing working, you must put &lt;code&gt;&amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;&lt;/code&gt; inside your template. This is the same as it used to be, but now this directive comes from a different module.&lt;/p&gt;

&lt;p&gt;To configure nested routes you don’t use &lt;em&gt;&amp;hellip;&lt;/em&gt; as before, you simply specify part of your route and the component related to it. Then inside your component you must specify further route configurations. In my case, I used &lt;em&gt;DashboardComponent&lt;/em&gt; and it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Component({
 moduleId: module.id,
 selector: &#39;app-dashboard&#39;,
 templateUrl: &#39;dashboard.component.html&#39;,
 styleUrls: [&#39;dashboard.component.css&#39;],
 directives: [ROUTER_DIRECTIVES]
})
@Routes([
 {path: &#39;/event-list&#39;, component: EventListComponent},
 {path: &#39;/event-details&#39;, component: EventDetailsComponent}
])
export class DashboardComponent implements OnInit {

 constructor() {}

 ngOnInit() {
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the rest of files for my solution in this
&lt;a href=&#34;https://github.com/pikoscielniak/angular2-rc1-routing-sample&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you look at this repository, you may wonder why I prefixed the folder with a &lt;em&gt;+&lt;/em&gt; sign. It is required in order to have lazy loading of components.
You can watch a
&lt;a href=&#34;https://www.youtube.com/watch?v=d8yAdeshpcw&amp;index=9&amp;list=PLOETEcp3DkCq788xapkP_OU-78jhTf68j&#34; target=&#34;_blank&#34;&gt;talk&lt;/a&gt;
given by
&lt;a href=&#34;https://twitter.com/mhevery&#34; target=&#34;_blank&#34;&gt;Misko Hevery&lt;/a&gt;
at
&lt;a href=&#34;https://www.ng-conf.org/#/&#34; target=&#34;_blank&#34;&gt;ng-conf 2016&lt;/a&gt; to find out a bit more about it.&lt;/p&gt;

&lt;p&gt;The final result of this example looked like this in the browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/upgradingFinalResult.png&#34; alt=&#34;Final Result&#34; title=&#34;Final Result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The interesting part of the new router is that you can specify links in templates relative to the component where they are placed. You can see an example of this here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a [routerLink]=&amp;quot;[&#39;./event-list&#39;]&amp;quot;&amp;gt;List&amp;lt;/a&amp;gt;
&amp;lt;a [routerLink]=&amp;quot;[&#39;./event-details&#39;]&amp;quot;&amp;gt;Details&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a fragment of a &lt;em&gt;dashboard.component.html&lt;/em&gt; file. You can see that the links are specified relative to the &lt;em&gt;DashboardComponent&lt;/em&gt;.
Everything I’ve written up to now the result of searching and experimenting after Angular2 RC1 one was released. I mentioned that when I wrote this post there wasn’t official documentation for the new router which was introduced in this version. It’s quite probable that what I have stated in this post may be wrong but until there is an official reference to deal with the new router, my solution is sufficient for me and fortunately it works quite well.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;





























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/&#34;&gt;Migrating to ASP .NET Core RC2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/epilogue-daj-sie-poznac-series/&#34;&gt;Epilogue: Daj się poznać series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>How to avoid global installs with NPM scripts</title>
      <link>http://koscielniak.me/post/2016/05/how-to-avoid-global-installs-with-npm-scripts/</link>
      <pubDate>Sat, 14 May 2016 12:30:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/how-to-avoid-global-installs-with-npm-scripts/</guid>
      <description>&lt;p&gt;Recently, I heard from a friend that he doesn’t know how to use Gulp and TypeScript locally, he only knows how to install them globally. I thought it could be an issue for others, and that’s why I decided to write this post.&lt;/p&gt;

&lt;p&gt;Using globally installed NPM packages can be very problematic, especially if you need these in different versions in a variety of projects. If you rely on global packages you don’t know what the dependencies of your project really are. It is better to have everything in one place without part of your dependencies in global and the other part of your dependencies in local space.&lt;/p&gt;

&lt;p&gt;To use &lt;em&gt;gulp&lt;/em&gt; and &lt;em&gt;tsc&lt;/em&gt; (TypeScript compiler) without polluting your global, you simply install it locally with a command like this: &lt;code&gt;npm install gulp typescript --save-dev&lt;/code&gt; and then you use the power of
&lt;a href=&#34;https://docs.npmjs.com/misc/scripts&#34; target=&#34;_blank&#34;&gt;NPM scripts&lt;/a&gt;.
As you can see, in that link there are a lot of predefined scripts but I will show you how to define custom ones.&lt;/p&gt;

&lt;p&gt;All you have to do is simply to define the name of script in the &lt;em&gt;scripts&lt;/em&gt; section in the &lt;em&gt;package.json&lt;/em&gt;. This is an example from one of my projects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
    &amp;quot;tsc&amp;quot;: &amp;quot;tsc -w&amp;quot;,
    &amp;quot;typings&amp;quot;: &amp;quot;typings&amp;quot;,
    &amp;quot;build-dev&amp;quot;: &amp;quot;gulp build-dev&amp;quot;,
    &amp;quot;build-prod&amp;quot;: &amp;quot;gulp build-prod&amp;quot;,
    &amp;quot;postinstall&amp;quot;: &amp;quot;concurrently \&amp;quot;typings install\&amp;quot; \&amp;quot;npm run build-dev\&amp;quot;&amp;quot;,
    &amp;quot;start&amp;quot;: &amp;quot; http-server &amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have defined four custom scripts and two predefined here.
You can run custom scripts with a command like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm run tsc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You must execute this command in the root folder of your project (where your &lt;em&gt;package.json&lt;/em&gt; is).&lt;/p&gt;

&lt;p&gt;Running a predefined script is as simple as: &lt;code&gt;npm start&lt;/code&gt;, you don’t have to put &lt;em&gt;run&lt;/em&gt;.
Some scripts are run automatically, for example &lt;em&gt;postinstall&lt;/em&gt;. This script is run after the package is installed. In my case, after the package was installed, I installed typings and I rebuilt the libraries using the script defined above which is &lt;em&gt;build-dev&lt;/em&gt;. As you can see, you can execute other scripts in NPM scripts and you also have access to the commands which are located in the &lt;em&gt;node_modules/.bin&lt;/em&gt; of your project. In this location, you will find your commands &lt;em&gt;gulp&lt;/em&gt; and &lt;em&gt;tsc&lt;/em&gt; and other locally installed packages.&lt;/p&gt;

&lt;p&gt;The scripts defined in &lt;em&gt;package.json&lt;/em&gt; look for commands inside this location and if they didn’t find one they then check your global packages. You can also run locally installed packages with a command like this: &lt;code&gt;node_modules/.bin/gulp&lt;/code&gt; but as you can see, this is a lot of typing and over time it can be very annoying. It is much better to use NPM scripts. I hope I have helped someone by writing this post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Identity Provider with IdentityServer4</title>
      <link>http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/</link>
      <pubDate>Wed, 11 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, I am going to continue my series about
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4&#34; target=&#34;_blank&#34;&gt;IdenityServer4&lt;/a&gt;.
I will write about forcing IdentityServer to use Google as an external identity token provider. Before I started, I had to register the application that will interact with Google which in my case is &lt;em&gt;IdSrvHost&lt;/em&gt;.
I am going to reuse the application that I registered in this
&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;post&lt;/a&gt;.
However, I altered the configuration of this application a bit by enabling access to &lt;em&gt;Google+ API&lt;/em&gt;. I did this by entering &lt;em&gt;Google APIs&lt;/em&gt; and then inside &lt;em&gt;Social APIs&lt;/em&gt; I clicked &lt;em&gt;Google+ API&lt;/em&gt;. You can see this on this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/google-plus-api.png&#34; alt=&#34;Enabling Google+ API&#34; title=&#34;Enabling Google+ API&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I simply clicked &lt;em&gt;Enable&lt;/em&gt;. And that was it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/enabling-google-plus-api.png&#34; alt=&#34;Enabling Google+ API&#34; title=&#34;Enabling Google+ API&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I then added &lt;em&gt;clientId&lt;/em&gt; and &lt;em&gt;clientSecret&lt;/em&gt; to my secret settings. I wrote about that in
&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next step was adding the Google external identity provider to my project with IdentityServer4. I wrote
&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;here&lt;/a&gt;
and
&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;here&lt;/a&gt;
about creating this project and now I have altered it to add an external provider.&lt;/p&gt;

&lt;p&gt;The first thing which I did was to add a dependency to &lt;em&gt;project.json&lt;/em&gt; and it was called &lt;em&gt;Microsoft.AspNet.Authentication.Google&lt;/em&gt;. At the time this post was written, it was in version: &lt;em&gt;1.0.0-rc1-final&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then inside &lt;em&gt;Configure&lt;/em&gt; method of &lt;em&gt;Startup&lt;/em&gt; class I added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.UseCookieAuthentication(options =&amp;gt;
    {
        options.AuthenticationScheme = &amp;quot;External&amp;quot;;
    });

    app.UseGoogleAuthentication(options =&amp;gt;
    {
        options.AuthenticationScheme = &amp;quot;Google&amp;quot;;
        options.SignInScheme = &amp;quot;External&amp;quot;;

        options.ClientId = Configuration[&amp;quot;GoogleIdentityProvider:ClientId&amp;quot;];
        options.ClientSecret = Configuration[&amp;quot;GoogleIdentityProvider:ClientSecret&amp;quot;];
        options.CallbackPath = new PathString(&amp;quot;/googlecallback&amp;quot;);                
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did this right after the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.UseIdentityServer();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I will explain a bit about what I did here. First of all, I specified &lt;em&gt;CallbackPath&lt;/em&gt; in the options for &lt;em&gt;UseGoogleAuthentication&lt;/em&gt; but that is not necessary. If you don’t specify the redirect URI, the default will be &lt;em&gt;&lt;a href=&#34;http://url_of_app/signin-google&#34;&gt;http://url_of_app/signin-google&lt;/a&gt;&lt;/em&gt; which I learned when I got the following error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/redirect-uri-mismatch.png&#34; alt=&#34;Redirect URI mismatch&#34; title=&#34;Redirect URI mismatch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I decided to add something different to see if it would work.&lt;/p&gt;

&lt;p&gt;You may be asking: why did I need to add two middlewares? To answer to this question, I must explain that the flow follows the authentication to Google. Now when you login with my Identity Provider (&lt;em&gt;IdSrvHost&lt;/em&gt;) you see a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/login-screen.png&#34; alt=&#34;Login Screen&#34; title=&#34;Login Screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;Google&lt;/em&gt; button comes from the code in the &lt;em&gt;Login/Index.cshtml&lt;/em&gt; view like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@if (Model.ExternalProviders.Any())
{
    &amp;lt;div class=&amp;quot;col-md-6 col-sm-6 external-providers&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;panel panel-default&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;panel-heading&amp;quot;&amp;gt;
                &amp;lt;h3 class=&amp;quot;panel-title&amp;quot;&amp;gt;External Login&amp;lt;/h3&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&amp;quot;panel-body&amp;quot;&amp;gt;
                &amp;lt;ul class=&amp;quot;list-inline&amp;quot;&amp;gt;
                    @foreach (var externalProvider in Model.ExternalProviders)
                    {
                        &amp;lt;li&amp;gt;
                            &amp;lt;a class=&amp;quot;btn btn-default&amp;quot;
                               href=&amp;quot;@Url.Action(&amp;quot;ExternalLogin&amp;quot;, 
                                    new
                                    {
                                        provider = externalProvider.AuthenticationScheme,
                                        signInId = Model.SignInId
                                    })&amp;quot;&amp;gt;
                                @externalProvider.Text
                            &amp;lt;/a&amp;gt;
                        &amp;lt;/li&amp;gt;
                    }
                &amp;lt;/ul&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;em&gt;ExternalProviders&lt;/em&gt; in the model I added in the &lt;em&gt;Login&lt;/em&gt; method in &lt;em&gt;LoginController&lt;/em&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var vm = new LoginViewModel();
vm.ExternalProviders.Add(ExternalProvider.Google);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;var loginProviders = HttpContext.Authentication.GetAuthenticationSchemes().ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then I would have to filter these schemes and choose only the external providers. I would rather be more explicit at this stage of my solution and that’s why I decided to create  an explicit list of external providers.&lt;/p&gt;

&lt;p&gt;So&amp;hellip;what happens when the user clicks the &lt;em&gt;Google&lt;/em&gt; button. They see a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/allow-access.png&#34; alt=&#34;Allow access&#34; title=&#34;Allow access&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When they click &lt;em&gt;Allow&lt;/em&gt; they see a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/oidc-client-is-requesting-your-permission.png&#34; alt=&#34;OIDC Client is requesting your permission&#34; title=&#34;OIDC Client is requesting your permission&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Take a notice that this screen comes from my Identity Provider. Next, when the user clicks &lt;em&gt;Yes, Allow&lt;/em&gt; they are redirected to the application they came from.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/final-result.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a flow from a GUI perspective. And now flow from the backend perspective.&lt;/p&gt;

&lt;p&gt;After clicking &lt;em&gt;Login Only&lt;/em&gt; in the &lt;em&gt;JavaScript Oidc Client&lt;/em&gt;, there is a redirection to the method &lt;em&gt;Index&lt;/em&gt; in the &lt;em&gt;LoginController&lt;/em&gt;. Then the &lt;em&gt;Index&lt;/em&gt; view is presented. After clicking the &lt;em&gt;Google&lt;/em&gt; button, the action &lt;em&gt;ExternalLogin&lt;/em&gt; is executed in the same controller and the parameter &lt;em&gt;provider&lt;/em&gt; is set to &lt;em&gt;Google&lt;/em&gt;. This method looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public IActionResult ExternalLogin(string provider, string signInId)
{
    var props = new AuthenticationProperties
    {
        RedirectUri = &amp;quot;/login/callback?signInId=&amp;quot; + signInId
    };

    return new ChallengeResult(provider, props);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I return &lt;em&gt;ChallengeResult&lt;/em&gt; with &lt;em&gt;Google&lt;/em&gt; as a provider which caused my &lt;em&gt;Google middleware&lt;/em&gt; to be triggered and I also specified the callback URI to be called after the auth process.&lt;/p&gt;

&lt;p&gt;The most important thing here is the property &lt;em&gt;SignInScheme&lt;/em&gt; which I set in the &lt;em&gt;UseGoogleAuthentication&lt;/em&gt; options, as this what completes the authentication process after it returns from Google, and then my callback is called.&lt;/p&gt;

&lt;p&gt;In this callback, the current working version looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public async Task&amp;lt;IActionResult&amp;gt; Callback(string signInId)
{
    var external = await HttpContext.Authentication.AuthenticateAsync(&amp;quot;External&amp;quot;);
    //todo create or get local account match by email         
    //for now alice is hardcoded            
    var subject = &amp;quot;818727&amp;quot;;//todo you get this after you create or get local user
    var name = &amp;quot;alice&amp;quot;;
    var claims = new[] {
                new Claim(JwtClaimTypes.Subject, subject),
                new Claim(JwtClaimTypes.Name, name),
                new Claim(JwtClaimTypes.IdentityProvider, &amp;quot;idsvr&amp;quot;),
                new Claim(JwtClaimTypes.AuthenticationTime, DateTime.UtcNow.ToEpochTime().ToString())
            };

    var ci = new ClaimsIdentity(claims, &amp;quot;password&amp;quot;, JwtClaimTypes.Name, JwtClaimTypes.Role);
    var cp = new ClaimsPrincipal(ci);

    await HttpContext.Authentication.SignInAsync(Constants.PrimaryAuthenticationType, cp);
    await HttpContext.Authentication.SignOutAsync(&amp;quot;External&amp;quot;);

    if (signInId != null)
    {                
        return new SignInResult(signInId);
    }

    return Redirect(&amp;quot;~/&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can get access to the claims received from Google with this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var external = await HttpContext.Authentication.AuthenticateAsync(&amp;quot;External&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s why I needed this extra middleware to get these Google claims. I should do something meaningful with these claims but that is a theme for another post. For now, I will simply map everyone logged in with a Google account to my local user &lt;em&gt;alice&lt;/em&gt;. Next, I signed out from the &lt;em&gt;External&lt;/em&gt; authentication schema, then signed in &lt;em&gt;alice&lt;/em&gt; with &lt;em&gt;PrimaryAuthenticationType&lt;/em&gt; which is IdentityServer. After, I return the &lt;em&gt;SignInResult&lt;/em&gt;. Here, I did here the same thing done in the post &lt;em&gt;Login&lt;/em&gt; method in &lt;em&gt;LoginController&lt;/em&gt;. Basically, IdentityServer is doing its job and I don’t need to micromanage what’s going on there. I provided everything it needs to authenticate and authorize a user.&lt;/p&gt;

&lt;p&gt;And that’s it&amp;hellip;this is how I setup Google as an external Identity Provider. You can find the whole source code for this sample project in
&lt;a href=&#34;https://github.com/pikoscielniak/idsrv-demo&#34; target=&#34;_blank&#34;&gt;this repository&lt;/a&gt;.
Similarly, for example, you can use Facebook as an external Identity Provider. I am going to do this but I will write about it only if I run into problems and I’m forced to troubleshoot.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;





























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/&#34;&gt;Migrating to ASP .NET Core RC2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/epilogue-daj-sie-poznac-series/&#34;&gt;Epilogue: Daj się poznać series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dealing with secrets in ASP .NET Core</title>
      <link>http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/</link>
      <pubDate>Tue, 10 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a short post to complement my post about
&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;the configuration in ASP .NET Core&lt;/a&gt;.
I’ll write about how to add secret settings to your application. ASP .NET Core created a new concept to deal with this. The first thing I did was to add this to the dependencies in &lt;em&gt;project.json&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Microsoft.Extensions.Configuration.UserSecrets&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then inside the constructor of the &lt;em&gt;Startup&lt;/em&gt; class I added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (env.IsDevelopment())
{
builder.AddUserSecrets();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I added something like this to &lt;em&gt;project.json&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;userSecretsId&amp;quot;: &amp;quot;idsrv-demo&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an ID for the secret storage of your application.&lt;/p&gt;

&lt;p&gt;Next, I installed the latest version of runtime and set the alias to point at it, all in one command. The command was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnvm upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step was adding a global command &lt;code&gt;user-secret&lt;/code&gt; by executing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnu commands install Microsoft.Extensions.SecretManager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result, I can add secret settings with commands like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; user-secret set GoogleIdentityProvider:ClientId &amp;quot;342665198077-2lb7ai2oljrojkia5ob4e4kf0rnkeo33.apps.googleusercontent.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this command, &lt;em&gt;GoogleIdentityProvider:ClientId&lt;/em&gt; is a hierarchical key for the setting where the hierarchy is built by the colon.
You can see all your secret settings with the command &lt;code&gt;user-secret list&lt;/code&gt; executed in the root folder of the project.&lt;/p&gt;

&lt;p&gt;I just want to point out that I did everything on Linux. However, on Windows, other than using this option, you can also add secret settings from Visual Studio by right clicking on the project and then clicking on &lt;em&gt;Manage User Secret&lt;/em&gt; and the you can edit file secrets.json which contains all your secret settings assigned to this project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/secrets/manageUserSecrets.png&#34; alt=&#34;Manage User Secrets&#34; title=&#34;Manage User Secrets&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A good practice is to put all the secret settings somewhere so the other project participants can find out what they should also provide. I added a whole section of my secrets to the file &lt;em&gt;appsettings.json&lt;/em&gt; so it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;quot;GoogleIdentityProvider&amp;quot;:{
        &amp;quot;ClientId&amp;quot;:&amp;quot;&amp;quot;,
        &amp;quot;ClientSecret&amp;quot;:&amp;quot;&amp;quot;          
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All you have to do when working with Visual Studio, is copy this section to &lt;em&gt;secrets.json&lt;/em&gt; and then provide the correct settings. I could do it even better by putting this secret settings structure in a separate file so it would be more obvious which part of the settings is secret.&lt;/p&gt;

&lt;p&gt;In this post, I have written about how I provide secret settings for my application, and in
&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;the next post&lt;/a&gt;
I will write how I use these settings to authenticate user using Google Identity Provider from IdentityServer4.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;





























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/&#34;&gt;Migrating to ASP .NET Core RC2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/epilogue-daj-sie-poznac-series/&#34;&gt;Epilogue: Daj się poznać series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IdentityServer4 - accessing API</title>
      <link>http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/</link>
      <pubDate>Thu, 05 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous
&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;post&lt;/a&gt;,
I wrote about how to get tokens from IdentityServer using a javascript client. In this post, I am going to write about how to use this token to get access to protected resources from a sample API.&lt;/p&gt;

&lt;p&gt;As in the previous post, to achieve my goal, I used samples provided on the
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Samples&#34; target=&#34;_blank&#34;&gt;github repository&lt;/a&gt;.
In this &lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Samples/tree/dev/Mvc/src/SampleApi&#34; target=&#34;_blank&#34;&gt;repo folder&lt;/a&gt;
I found a sample API which I copied into my local repository. After this, I executed &lt;code&gt;dnu restore&lt;/code&gt; inside the &lt;em&gt;SampleApi&lt;/em&gt; directory.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;SampleApi&lt;/em&gt; works on a different port than expected (I expected it to work on 3860, but by default it was 5000) so I changed &lt;code&gt;web&lt;/code&gt; command in the &lt;em&gt;project.json&lt;/em&gt; file in the &lt;em&gt;SampleApi&lt;/em&gt; to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel --server.urls=http://localhost:3860&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could find this port in the &lt;em&gt;index.html&lt;/em&gt; file of the &lt;em&gt;JsOidc&lt;/em&gt; project. In this file, there is a handler for event &lt;em&gt;click&lt;/em&gt; for the button &lt;em&gt;Call Service&lt;/em&gt;.  In this handler, the request is sent to the address &lt;em&gt;&lt;a href=&#34;http://localhost:3860/identity&#34;&gt;http://localhost:3860/identity&lt;/a&gt;&lt;/em&gt; and this is the address on which my Api should work.&lt;/p&gt;

&lt;p&gt;Then I was ready to run my application. I executed &lt;code&gt;dnx web&lt;/code&gt; in three different directories simultaneously: &lt;em&gt;IdSvrHost&lt;/em&gt;, &lt;em&gt;JsOidc&lt;/em&gt; and &lt;em&gt;SampleApi&lt;/em&gt; and after this I navigated to &lt;em&gt;&lt;a href=&#34;http://localhost:7017/&#34;&gt;http://localhost:7017/&lt;/a&gt;&lt;/em&gt; and I clicked &lt;em&gt;Login With Profile and Access Token&lt;/em&gt; and I saw this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-accessing-api/loginScreen.png&#34; alt=&#34;Login Screen&#34; title=&#34;Login Screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I entered the user name &lt;em&gt;alice&lt;/em&gt; and the password &lt;em&gt;alice&lt;/em&gt; and the I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-accessing-api/applicationAccess.png&#34; alt=&#34;Application access&#34; title=&#34;Application access&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked &lt;em&gt;Yes, Allow&lt;/em&gt; and I was brought back to my &lt;em&gt;JsOidc&lt;/em&gt;. The next thing which I did was to click on “Call Service”. After doing this, I saw a response in the pane &lt;em&gt;Ajax Result&lt;/em&gt;, which looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-accessing-api/applicationAccess.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This response contains users claims and this is how it was prepared:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return Json(User.Claims.Select(c =&amp;gt; new { c.Type, c.Value }));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was really amazed by how smoothly I went through usage examples of IdentityServer4 on Linux. After my previous experiences, I was rather sceptical if this example could even run without errors on Ubuntu but they executed perfectly. By doing this example, I checked if I can use IdentityProvider4 as an identity provider for my application but as you may remember from my previous posts, I wanted to have Google as an Identity Provider. In a future post, I’ll examine if it is possible to combine Google authentication with IdentityProvider4.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;





























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/&#34;&gt;Migrating to ASP .NET Core RC2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/epilogue-daj-sie-poznac-series/&#34;&gt;Epilogue: Daj się poznać series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with IdentityServer4</title>
      <link>http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/</link>
      <pubDate>Wed, 04 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wrote in one of
&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;previous posts&lt;/a&gt;
about my experiments with Google Identity Provider and Implicit Flow to get access tokens which allow me to fetch resources from API.
I didn’t mention IdentityServer
&lt;a href=&#34;https://github.com/IdentityServer&#34; target=&#34;_blank&#34;&gt;IdentityServer&lt;/a&gt; in these posts, which is becoming the default choice if you want to create an identity provider in ASP .NET.
I did this deliberately because I had some experiences with IdentityServer 3 and I wanted to try something new. IdentityServer3 wasn’t prepared to be used with ASP .NET Core but is there something similar to it? Yes and you can read about it
&lt;a href=&#34;https://leastprivilege.com/2016/01/11/announcing-identityserver-for-asp-net-5-and-net-core/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
There is IdentityServer4 which is a port of IdentityServer for ASP .NET Core. This post is the first in a series about IdentityServer4 on ASP .NET Core.&lt;/p&gt;

&lt;p&gt;The journey with the IdentityServer4 started by copying&lt;br /&gt;
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Samples/tree/dev/Mvc/src/IdSvrHost&#34; target=&#34;_blank&#34;&gt;this folder&lt;/a&gt;
into my local directory.
Then inside the directory &lt;em&gt;IdSvrHost&lt;/em&gt;, I restored the packages and I ran an application with &lt;code&gt;dnx web&lt;/code&gt; and after a while I saw the IdentityServer4 welcome page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/welcomePage.png&#34; alt=&#34;Identity Server4 welcome page&#34; title=&#34;Identity Server4 welcome page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, that was great but let’s test IdentityServer4 with a client. In a previous post, I experimented with a javascript client and we’ll do the same in this case.&lt;/p&gt;

&lt;p&gt;I downloaded
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Samples/tree/dev/Clients/src/JsOidc&#34; target=&#34;_blank&#34;&gt;this folder&lt;/a&gt;
to my local folder.
I restored the packages and ran an application with the command &lt;code&gt;web run&lt;/code&gt; and got the following error in the console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Microsoft.AspNet.Server.Kestrel.Networking.UvException: Error -98 EADDRINUSE address already in use
   at Microsoft.AspNet.Server.Kestrel.Networking.Libuv.Check(Int32 statusCode)
   at Microsoft.AspNet.Server.Kestrel.Networking.UvStreamHandle.Listen(Int32 backlog, Action`4 callback, Object state)
   at Microsoft.AspNet.Server.Kestrel.Http.TcpListener.CreateListenSocket()
   at Microsoft.AspNet.Server.Kestrel.Http.Listener.&amp;lt;&amp;gt;c__DisplayClass5_0.&amp;lt;StartAsync&amp;gt;b__0(Object _)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course I got the error message &lt;em&gt;address already in use&lt;/em&gt; because my IdentityServer was occupying port 5000. In the &lt;em&gt;project.json&lt;/em&gt; file of &lt;em&gt;JsOidc&lt;/em&gt; project, the &lt;em&gt;web&lt;/em&gt; command was defined as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the default port for Kestrel is 5000. So I needed to change this but which port do I choose? I could find the right port in the definition of Clients for IdentityServer and that was in the class &lt;em&gt;Clients&lt;/em&gt; inside the &lt;em&gt;Configuration&lt;/em&gt; folder of &lt;em&gt;IdSvrHost&lt;/em&gt; project. At the end of this class I found:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;///////////////////////////////////////////
// JS OIDC Sample
//////////////////////////////////////////
new Client
{
    ClientId = &amp;quot;js_oidc&amp;quot;,
    ClientName = &amp;quot;JavaScript OIDC Client&amp;quot;,
    ClientUri = &amp;quot;http://identityserver.io&amp;quot;,

    Flow = Flows.Implicit,
    RedirectUris = new List&amp;lt;string&amp;gt;
    {
        &amp;quot;http://localhost:7017/index.html&amp;quot;,
        &amp;quot;http://localhost:7017/silent_renew.html&amp;quot;,
    },
    PostLogoutRedirectUris = new List&amp;lt;string&amp;gt;
    {
        &amp;quot;http://localhost:7017/index.html&amp;quot;,
    },

    AllowedCorsOrigins = new List&amp;lt;string&amp;gt;
    {
        &amp;quot;http://localhost:7017&amp;quot;
    },

    AllowedScopes = new List&amp;lt;string&amp;gt;
    {
        StandardScopes.OpenId.Name,
        StandardScopes.Profile.Name,
        StandardScopes.Email.Name,
        StandardScopes.Roles.Name,
        &amp;quot;api1&amp;quot;, &amp;quot;api2&amp;quot;
    }
},

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the port which I was looking for was 7017 and I changed &lt;em&gt;web&lt;/em&gt; command in the &lt;em&gt;JsOidc&lt;/em&gt; project to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel --server.urls=http://localhost:7017&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, when I ran the application and navigated to &lt;em&gt;&lt;a href=&#34;http://localhost:7017&#34;&gt;http://localhost:7017&lt;/a&gt;&lt;/em&gt; I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/javaScriptOidcClient.png&#34; alt=&#34;JavaScript Oidc Client&#34; title=&#34;JavaScript Oidc Client&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I clicked &lt;em&gt;Login Only&lt;/em&gt; nothing had happened and I could only see this in the web browser console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/errorAfterLogin.png&#34; alt=&#34;Error after Login&#34; title=&#34;Error after Login&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The reason for the error seemed to be obvious: the javascript library which communicated with IdentityServer was configured to use address localhost:22530 and my IdentityServer worked on port 5000. By the way, this library is my old friend &lt;em&gt;oidc-token-manager&lt;/em&gt; library which I played with
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;here&lt;/a&gt; and
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I decided to run my IdentityServer on the port 22530 instead of making changes in the client application code. So I changed the web command in the project &lt;em&gt;IdSvrHost&lt;/em&gt; to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel --server.urls=http://localhost:22530&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I restarted IdentityServer and then after clicking &lt;em&gt;Login Only&lt;/em&gt; again, I was redirected to this page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/loginPage.png&#34; alt=&#34;Login Page&#34; title=&#34;Login Page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After entering the username &lt;em&gt;alice&lt;/em&gt; and the password &lt;em&gt;alice&lt;/em&gt; which I found in the class &lt;em&gt;Users&lt;/em&gt; inside the &lt;em&gt;Configuration&lt;/em&gt; folder of &lt;em&gt;IdSvrHost&lt;/em&gt; project, I saw this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/requestingYourPermission.png&#34; alt=&#34;Requesting Your Permission&#34; title=&#34;Requesting Your Permission&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking &lt;em&gt;Yes, Allow&lt;/em&gt;, which meant that I granted a specific permission to my client, I was brought back to the javascript client and I saw the following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/finalResult.png&#34; alt=&#34;Final Result&#34; title=&#34;Final Result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I got &lt;em&gt;id_token&lt;/em&gt; which meant I was successfully authenticated in IdentityServer. The next step is to obtain &lt;em&gt;access_token&lt;/em&gt; and use it to access some API but this is a theme for another post. Meanwhile, you can find the whole source code for this demo in
&lt;a href=&#34;https://github.com/pikoscielniak/idsrv-demo&#34; target=&#34;_blank&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;





























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/&#34;&gt;Migrating to ASP .NET Core RC2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/epilogue-daj-sie-poznac-series/&#34;&gt;Epilogue: Daj się poznać series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ASP .NET Core Configuration</title>
      <link>http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/</link>
      <pubDate>Wed, 27 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ASP .NET Core brings with it a lot of new things and concepts to the Web development on .NET framework. One of them is the new way to configure your application. In this post, I will look at the possibilities we have in this area.&lt;/p&gt;

&lt;p&gt;In the previous version of ASP .NET you used file &lt;em&gt;Web.config&lt;/em&gt; to configure your application. Now you have more options: you can use &lt;em&gt;json&lt;/em&gt;, &lt;em&gt;ini&lt;/em&gt;, &lt;em&gt;xml&lt;/em&gt; and you can even easily use environment variables to configure your app. Let’s see how it works.&lt;/p&gt;

&lt;p&gt;We should prepare the configuration for our application during its startup and in the ASP .NET Core there is a class &lt;em&gt;Startup&lt;/em&gt; which is the entry point of our app. In the constructor of the class &lt;em&gt;Startup&lt;/em&gt; we create the &lt;em&gt;ConfigurationBuilder&lt;/em&gt; which we use to prepare the configuration of the app. We can use dependency injection in this constructor and get by it an instance of &lt;em&gt;IHostingEnvironment&lt;/em&gt; and &lt;em&gt;IApplicationEnvironment&lt;/em&gt; which may be helpful for configuration because &lt;em&gt;IHostingEnvironment&lt;/em&gt; provides the current &lt;em&gt;EnvironmentName&lt;/em&gt;, &lt;em&gt;WebRootPath&lt;/em&gt;, and web root file provider while &lt;em&gt;IApplicationEnvironment&lt;/em&gt; provides access to the application properties, such as &lt;em&gt;ApplicationName&lt;/em&gt;, &lt;em&gt;ApplicationVersion&lt;/em&gt;, and &lt;em&gt;ApplicationBasePath&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I prepared *Startup*’s constructor like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Startup(IHostingEnvironment env)
{
    var builder = new ConfigurationBuilder()
        .AddJsonFile(&amp;quot;appsettings.json&amp;quot;)
        .AddJsonFile($&amp;quot;appsettings.{env.EnvironmentName}.json&amp;quot;, optional: true);

    builder.AddEnvironmentVariables();
    Configuration = builder.Build();           
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I did in it was to create &lt;em&gt;ConfigurationBuilder&lt;/em&gt; and then I ordered it to prepare the configuration based using files “appsettings.json” and &lt;em&gt;appsettings.{env.EnvironmentName}.json&lt;/em&gt; but the second file may or may not exist. The part of the name &lt;em&gt;env.EnvironmentName&lt;/em&gt; will be replaced in runtime with the proper value. We will see an example of this in a minute.&lt;/p&gt;

&lt;p&gt;I also added environment variables to builder so the configuration will also contain what’s in them. After this, I built config and stored it in the property &lt;em&gt;Configuration&lt;/em&gt; of &lt;em&gt;Startup&lt;/em&gt; class.&lt;/p&gt;

&lt;p&gt;Having the setup like this let’s us create files &lt;em&gt;appsettings.json&lt;/em&gt; and &lt;em&gt;appsettings.Development.json&lt;/em&gt; with content like this:&lt;br /&gt;
&lt;em&gt;appsettings.json&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;ClientSettings&amp;quot;:{
        &amp;quot;Name&amp;quot;: &amp;quot;Client Name&amp;quot;,
        &amp;quot;PageSize&amp;quot;: 10,
        &amp;quot;ShowTitle&amp;quot;: true
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;appsettings.Development.json&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;ClientSettings&amp;quot;:{
        &amp;quot;Name&amp;quot;: &amp;quot;Development Client Name&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now how can we get access to the values stored in these config files? We have a couple of possibilities so let’s explore a few of them.&lt;/p&gt;

&lt;p&gt;The first one is to get it directly from the &lt;em&gt;Configuration&lt;/em&gt; property like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var clientName = Configuration[&amp;quot;ClientSettings:Name&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, you must use colons to get nesting values.&lt;/p&gt;

&lt;p&gt;We can even get a whole section from configuration by doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var clientSettings = Configuration.GetSection(&amp;quot;ClientSettings&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then get values from it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = clientSettings.Get&amp;lt;string&amp;gt;(&amp;quot;Name&amp;quot;);
var pageSize = clientSettings.Get&amp;lt;int&amp;gt;(&amp;quot;PageSize&amp;quot;);
var showTitle = clientSettings.Get&amp;lt;bool&amp;gt;(&amp;quot;ShowTitle&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also set a default value for a specific property like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var pageSize = clientSettings.Get&amp;lt;int&amp;gt;(&amp;quot;PageSize&amp;quot;, 20);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can only do all these things inside &lt;em&gt;Startup&lt;/em&gt; class unless we make a &lt;em&gt;Configuration&lt;/em&gt; property &lt;code&gt;public static&lt;/code&gt; then we can access it also in example controllers like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public IActionResult Index()
{
    var clientName = Startup.Configuration[&amp;quot;ClientSettings:Name&amp;quot;];
    return Content($&amp;quot;Client {clientName}&amp;quot;);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;but this kind of using Configuration is a rather bad practice. Another bad practice is making configuration available by dependency injection by doing this in the &lt;em&gt;ConfigureServices&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;services.AddInstance&amp;lt;IConfigurationRoot&amp;gt;(Configuration);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then using it, for example in controller, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HomeController : Controller
{
    private IConfigurationRoot _configuration;

    public HomeController(IConfigurationRoot configuration)
    {
        _configuration = configuration;
    }
    public IActionResult Index()
    {            
          var clientName = _configuration[&amp;quot;ClientSettings:Name&amp;quot;];
        return Content($&amp;quot;Client {clientName}&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can get configuration in controller in another way but first let’s create a class like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ClientSettings
{
    public string Name { get; set; }
    public int PageSize { get; set; }
    public bool ShowTitle { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then inside &lt;em&gt;ConfigureServices&lt;/em&gt; we do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;services.Configure&amp;lt;ClientSettings&amp;gt;(Configuration.GetSection(&amp;quot;ClientSettings&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can get access to the settings for a specific section from dependency injection like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HomeController : Controller
{
    private ClientSettings _clientSettings;

    public HomeController(IOptions&amp;lt;ClientSettings&amp;gt; clientSettings)
    {
        _clientSettings = clientSettings.Value;
    }
    public IActionResult Index()
    {            
          var clientName = _clientSettings;
        return Content($&amp;quot;{_clientSettings.Name} {_clientSettings.PageSize} {_clientSettings.ShowTitle}&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see now, you have access to the strongly typed object with all your desired settings and you can get help from intellisense to see what they contain.&lt;/p&gt;

&lt;p&gt;You can even get access to these settings from the view by doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;@inject IOptions&amp;lt;ClientSettings&amp;gt; ClientSettings
&amp;lt;div&amp;gt;    
    @if(ClientSettings.Value.ShowTitle) {
        &amp;lt;h3&amp;gt;Page title @ClientSettings.Value.Name&amp;lt;/h3&amp;gt;    
    }
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to add usings in the &lt;em&gt;_ViewImports.cshtml&lt;/em&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@using AspNetConfigSampleApp
@using Microsoft.Extensions.OptionsModel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For someone who finds injecting &lt;em&gt;IOptions&amp;lt;&amp;gt;&lt;/em&gt; a bit awkward, this is a solution which I found out about from
&lt;a href=&#34;http://www.benedykt.net/&#34; target=&#34;_blank&#34;&gt;Arkadiusz Benedykt&lt;/a&gt;. In the &lt;em&gt;ConfigureServices&lt;/em&gt; we do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var clientSettings = Configuration.Get&amp;lt;ClientSettings&amp;gt;(&amp;quot;ClientSettings&amp;quot;);
services.AddInstance(clientSettings);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We created an instance of the &lt;em&gt;ClientSettings&lt;/em&gt; and registered it as a singleton in the dependency injection container so every time someone asks for the class &lt;em&gt;ClientSettings&lt;/em&gt; this instance just created will be injected. With a solution like this, you can use  &lt;em&gt;ClientSettings&lt;/em&gt; in controller in this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HomeController : Controller
{
   private ClientSettings _clientSettings;

    public HomeController(ClientSettings clientSettings)
    {
        _clientSettings = clientSettings;
    }
    public IActionResult Index()
    {            
         var clientName = _clientSettings;
        return Content($&amp;quot;{_clientSettings.Name} {_clientSettings.PageSize} {_clientSettings.ShowTitle}&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Building the configuration by &lt;em&gt;ConfigurationBuilder&lt;/em&gt; is hierarchical. This means that what is added at the beginning of the configuration will be overridden by what’s added later. Usually the last thing we add to the &lt;em&gt;ConfigurationBuilder&lt;/em&gt; is &lt;em&gt;AddEnvironmentVariables&lt;/em&gt; which means that environmental variables can override settings gathered from previous sources of configuration for example from &lt;em&gt;json&lt;/em&gt; files. Let’s see this in practice.&lt;/p&gt;

&lt;p&gt;In the file &lt;em&gt;appsettings.Develplment.json&lt;/em&gt; I have changed the value for property &lt;em&gt;Name&lt;/em&gt;. When I run the application with this command &lt;code&gt;env ASPNET_ENV=”Development” dnx web&lt;/code&gt; I get a value for &lt;em&gt;Name&lt;/em&gt; like this &lt;em&gt;Development Client Name&lt;/em&gt; because the file  &lt;em&gt;appsettings.Develplment.json&lt;/em&gt; is added after the &lt;em&gt;appsettings.json&lt;/em&gt; to the &lt;em&gt;ConfigurationBuilder&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I can even change the value for &lt;em&gt;Name&lt;/em&gt; when I run the application by issuing a command like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;env ASPNET_ENV=&amp;quot;Development&amp;quot; ClientSettings:Name=&amp;quot;Name from Environment&amp;quot;  dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I got value &lt;em&gt;Name from Environment&lt;/em&gt; for property &lt;em&gt;Name&lt;/em&gt; of &lt;em&gt;ClientSettings&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We can also change the values in configuration after it is built, for example like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configuration[&amp;quot;ClientSettings:Name&amp;quot;] = &amp;quot;Name from Startup&amp;quot;;   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can even add new settings. This is how it is done in the default Web application project template from &lt;em&gt;yo aspnet generator&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configuration[&amp;quot;Data:DefaultConnection:ConnectionString&amp;quot;] = $@&amp;quot;Data Source={appEnv.ApplicationBasePath}/WebApplication.db&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find all the examples from this post in this
&lt;a href=&#34;https://github.com/pikoscielniak/asp-net-core-configuration&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;.
As you can see, this new way of configuring your ASP .NET Core application provides a lot of possibilities.
&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;In the future&lt;/a&gt;,
I will also write about how to deal with settings which should be secret and should not be published to the source code repository.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;





























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/&#34;&gt;Migrating to ASP .NET Core RC2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/epilogue-daj-sie-poznac-series/&#34;&gt;Epilogue: Daj się poznać series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reading code as if it were a book</title>
      <link>http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/</link>
      <pubDate>Mon, 25 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes we hear that good source code should be read as easily as a book. Let’s look at this code as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class EventService
{
 private string _eventTitle;
 private string _participantName;
 private Event _event;
 private Participant _participant;

 public void Process(string eventTitle, string participantName)
 {
   InitFields(eventTitle, participantName);
   CreateParticipant();
   CreateEvent();
   SaveEvent();
 }

 private void SaveEvent()
 {
   var repository = new Repository();
   repository.Save(_event);
 }

 private void CreateParticipant()
 {
   _participant = new Participant(_participantName);
 }

 private void InitFields(string eventTitle, string participantName)
 {
   _eventTitle = eventTitle;
   _participantName = participantName;
 }

 private void CreateEvent()
 {
_event = new Event(_eventTitle, _participant);
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important part of this code is the method &lt;em&gt;Process&lt;/em&gt;. Let’s see if we can read this method &lt;em&gt;as a book&lt;/em&gt;.&lt;br /&gt;
&lt;em&gt;InitFields: eventTitle and participantName&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;CreateParticipant&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;CreateEvent&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;SaveEvent&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I think we can agree that you can pretty much read it like a book. When I run this sample app with &lt;em&gt;Repository&lt;/em&gt; class like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Repository
{
 public void Save(Event @event)
 {
   Console.WriteLine($&amp;quot;Saved event: &#39;{@event.EventTitle}&#39; with participant: &#39;{@event.Participant.ParticipantName}&#39;&amp;quot;);
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the &lt;em&gt;Main&lt;/em&gt; method like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static void Main(string[] args)
 {
   var eventService = new EventService();
   eventService.Process(&amp;quot;Some event&amp;quot;,&amp;quot;Some participant&amp;quot;);
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I got this output in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Saved event: &#39;Some event&#39; with participant: &#39;Some participant&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suddenly, the requirements have changed and the event should also have the place where it’s going to happen. A programmer gets this task &lt;em&gt;Add the place to the event&lt;/em&gt;. They come to the code, look at it and write a method like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void CreatePlace()
{
 _place = new Place(_placeName);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of Course they add the fields &lt;em&gt;_place&lt;/em&gt; and &lt;em&gt;_placeName&lt;/em&gt; and change the signature of the &lt;em&gt;Process&lt;/em&gt; method to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Process(string eventTitle, string participantName, string placeName)
{
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They must remember to init  field &lt;em&gt;_placeName&lt;/em&gt; in the &lt;em&gt;InitFields&lt;/em&gt; methods and they must change the signature to this again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void InitFields(string eventTitle, string participantName, string placeName)
{
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fortunately, this programmer has
&lt;a href=&#34;https://www.jetbrains.com/resharper/&#34; target=&#34;_blank&#34;&gt;Reshaper&lt;/a&gt;.
Actually, they are testing
&lt;a href=&#34;https://www.jetbrains.com/rider/&#34; target=&#34;_blank&#34;&gt;JetBrains’ Rider&lt;/a&gt;
and ALT+ENTER did a lot of this work for them but it’s still a lot of changes. They also have changed the &lt;em&gt;CreateEvent&lt;/em&gt; method to what you see below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void CreateEvent()
{
 _event = new Event(_eventTitle, _participant, _place);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, the last thing to do is to use the &lt;em&gt;CreatePlace&lt;/em&gt; method in the &lt;em&gt;Process&lt;/em&gt; method , but the phone rings. After a 5 minute conversation, they return to the code and enter &lt;em&gt;CreatePlace&lt;/em&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Process(string eventTitle, string participantName, string placeName)
{
 InitFields(eventTitle, participantName, placeName);
 CreateParticipant();
 CreateEvent();
 CreatePlace();
 SaveEvent();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can you spot where the mistake is? The method &lt;em&gt;Save&lt;/em&gt; in &lt;em&gt;Repository&lt;/em&gt; was written by another programmer and now it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Save(Event @event)
{
 Console.WriteLine($&amp;quot;Saved event: &#39;{@event.EventTitle}&#39;, at &#39;{@event.Place.Name}&#39; &amp;quot; +
                   $&amp;quot;with participant: &#39;{@event.Participant.ParticipantName}&#39;&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, the task completed and the place was added to the event. Now let’s run the app&amp;hellip;this is what we get:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;System.NullReferenceException: Object reference not set to an instance of an object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We get a beautiful &lt;em&gt;System.NullReferenceException&lt;/em&gt;. Why? Because the programmer called the method &lt;em&gt;CreatePlace&lt;/em&gt; after the method &lt;em&gt;CreateEvent&lt;/em&gt;  by mistake. The mutability of these private fields and the side effects of these &lt;em&gt;Create&amp;hellip;&lt;/em&gt; methods come back to haunt the programmer. Fortunately, the &lt;em&gt;Place&lt;/em&gt; was required and the error shows up immediately but if it doesn’t, how do you know what happened? You can imagine many other possibilities to make a mistake with such kind of code. For example, you can forget to init fields in the &lt;em&gt;InitFields&lt;/em&gt; method.&lt;/p&gt;

&lt;p&gt;Believe it or not, I see this kind of code almost every day. Yes, I know someone would say with TDD you don’t see such kinds of errors but what if you work on a legacy project which doesn’t have tests for this specific fragment of code. What’s more, this way of writing code is also problematic when you want to refactor your code. For example, let’s say that &lt;em&gt;CreateParticipant&lt;/em&gt; got so many requirements that you must take it out of &lt;em&gt;EventService&lt;/em&gt; and put it in its own service. Then you must cut off not only &lt;em&gt;CreateParticipant&lt;/em&gt; method itself but also private fields and private methods on which it depends and sometimes this is not so easy.&lt;/p&gt;

&lt;p&gt;But we can do this better. Let’s get rid of all these private fields and replace them with local variables so the code look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class EventService
{
 public void Process(string eventTitle, string participantName, string placeName)
 {
   var participant = CreateParticipant(participantName);
   var place = CreatePlace(placeName);
   var @event = CreateEvent(eventTitle, participant, place);
   SaveEvent(@event);
 }

 private static void SaveEvent(Event @event)
 {
   var repository = new Repository();
   repository.Save(@event);
 }

 private static Participant CreateParticipant(string participantName)
 {
   return new Participant(participantName);
 }

 private static Place CreatePlace(string placeName)
 {
   return new Place(placeName);
 }

 private static Event CreateEvent(string eventTitle, Participant participant, Place place)
 {
   return new Event(eventTitle, participant, place);
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now when you run the app you’ll see this in the console:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Saved event: &#39;Some event&#39;, at &#39;Some place&#39; with participant: &#39;Some participant&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the code like this, it is impossible to create &lt;em&gt;Event&lt;/em&gt; without creating &lt;em&gt;Place&lt;/em&gt; first. Now all these &lt;em&gt;Create&amp;hellip;&lt;/em&gt; methods can be made static. Is this code so hard to read? I don’t think so. A source code is a book with constantly changing pages. I cannot print it and forget about it. You must come back to some places and alter them constantly. It&amp;rsquo;s okay if you&amp;rsquo;re altering code you&amp;rsquo;ve written yourself, but if you work with code written by someone else, then you must be careful about what you do if you come across a situation like the example I shared.&lt;/p&gt;

&lt;p&gt;It’s a very trivial example but you can get a feel for what I’m trying to express. This code won’t be read by a manager or other business people, it will be read by programmers and they can handle a drawback like local variables. The second example of code given can be even more readable for a programmer because they see the whole context for variables and know exactly where they are used. They don’t have to search for &lt;em&gt;Find usages&lt;/em&gt; because they see the usages straight away. What’s more, this functional way of writing code helps in the maintenance of the application. Less side effects and less mutability makes your application more predictable and reliable, especially when multithreading is at stake.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;





























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/upgrading-to-angulr2-rc1/&#34;&gt;Upgrading to Angular2 RC1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/experimenting-with-angular2-cli/&#34;&gt;Experimenting with Angular2 CLI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/migrating-to-asp-net-core-rc2/&#34;&gt;Migrating to ASP .NET Core RC2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/epilogue-daj-sie-poznac-series/&#34;&gt;Epilogue: Daj się poznać series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
  </channel>
</rss>