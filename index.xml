<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Piotr Kościelniak - passionate programmer</title>
    <link>http://koscielniak.me/</link>
    <description>Recent content on Piotr Kościelniak - passionate programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 May 2016 22:00:00 +0200</lastBuildDate>
    <atom:link href="http://koscielniak.me/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Google Identity Provider with IdentityServer4</title>
      <link>http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/</link>
      <pubDate>Wed, 11 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, I am going to continue my series about
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4&#34; target=&#34;_blank&#34;&gt;IdenityServer4&lt;/a&gt;.
I will write about forcing IdentityServer to use Google as an external identity token provider. Before I started, I had to register the application that will interact with Google which in my case is &lt;em&gt;IdSrvHost&lt;/em&gt;.
I am going to reuse the application that I registered in this
&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;post&lt;/a&gt;.
However, I altered the configuration of this application a bit by enabling access to &lt;em&gt;Google+ API&lt;/em&gt;. I did this by entering &lt;em&gt;Google APIs&lt;/em&gt; and then inside &lt;em&gt;Social APIs&lt;/em&gt; I clicked &lt;em&gt;Google+ API&lt;/em&gt;. You can see this on this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/google-plus-api.png&#34; alt=&#34;Enabling Google+ API&#34; title=&#34;Enabling Google+ API&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I simply clicked &lt;em&gt;Enable&lt;/em&gt;. And that was it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/enabling-google-plus-api.png&#34; alt=&#34;Enabling Google+ API&#34; title=&#34;Enabling Google+ API&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I then added &lt;em&gt;clientId&lt;/em&gt; and &lt;em&gt;clientSecret&lt;/em&gt; to my secret settings. I wrote about that in
&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next step was adding the Google external identity provider to my project with IdentityServer4. I wrote
&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;here&lt;/a&gt;
and
&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;here&lt;/a&gt;
about creating this project and now I have altered it to add an external provider.&lt;/p&gt;

&lt;p&gt;The first thing which I did was to add a dependency to &lt;em&gt;project.json&lt;/em&gt; and it was called &lt;em&gt;Microsoft.AspNet.Authentication.Google&lt;/em&gt;. At the time this post was written, it was in version: &lt;em&gt;1.0.0-rc1-final&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then inside &lt;em&gt;Configure&lt;/em&gt; method of &lt;em&gt;Startup&lt;/em&gt; class I added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.UseCookieAuthentication(options =&amp;gt;
    {
        options.AuthenticationScheme = &amp;quot;External&amp;quot;;
    });

    app.UseGoogleAuthentication(options =&amp;gt;
    {
        options.AuthenticationScheme = &amp;quot;Google&amp;quot;;
        options.SignInScheme = &amp;quot;External&amp;quot;;

        options.ClientId = Configuration[&amp;quot;GoogleIdentityProvider:ClientId&amp;quot;];
        options.ClientSecret = Configuration[&amp;quot;GoogleIdentityProvider:ClientSecret&amp;quot;];
        options.CallbackPath = new PathString(&amp;quot;/googlecallback&amp;quot;);                
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did this right after the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.UseIdentityServer();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I will explain a bit about what I did here. First of all, I specified &lt;em&gt;CallbackPath&lt;/em&gt; in the options for &lt;em&gt;UseGoogleAuthentication&lt;/em&gt; but that is not necessary. If you don’t specify the redirect URI, the default will be &lt;em&gt;&lt;a href=&#34;http://url_of_app/signin-google&#34;&gt;http://url_of_app/signin-google&lt;/a&gt;&lt;/em&gt; which I learned when I got the following error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/redirect-uri-mismatch.png&#34; alt=&#34;Redirect URI mismatch&#34; title=&#34;Redirect URI mismatch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I decided to add something different to see if it would work.&lt;/p&gt;

&lt;p&gt;You may be asking: why did I need to add two middlewares? To answer to this question, I must explain that the flow follows the authentication to Google. Now when you login with my Identity Provider (&lt;em&gt;IdSrvHost&lt;/em&gt;) you see a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/login-screen.png&#34; alt=&#34;Login Screen&#34; title=&#34;Login Screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;Google&lt;/em&gt; button comes from the code in the &lt;em&gt;Login/Index.cshtml&lt;/em&gt; view like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@if (Model.ExternalProviders.Any())
{
    &amp;lt;div class=&amp;quot;col-md-6 col-sm-6 external-providers&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;panel panel-default&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;panel-heading&amp;quot;&amp;gt;
                &amp;lt;h3 class=&amp;quot;panel-title&amp;quot;&amp;gt;External Login&amp;lt;/h3&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&amp;quot;panel-body&amp;quot;&amp;gt;
                &amp;lt;ul class=&amp;quot;list-inline&amp;quot;&amp;gt;
                    @foreach (var externalProvider in Model.ExternalProviders)
                    {
                        &amp;lt;li&amp;gt;
                            &amp;lt;a class=&amp;quot;btn btn-default&amp;quot;
                               href=&amp;quot;@Url.Action(&amp;quot;ExternalLogin&amp;quot;, 
                                    new
                                    {
                                        provider = externalProvider.AuthenticationScheme,
                                        signInId = Model.SignInId
                                    })&amp;quot;&amp;gt;
                                @externalProvider.Text
                            &amp;lt;/a&amp;gt;
                        &amp;lt;/li&amp;gt;
                    }
                &amp;lt;/ul&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;em&gt;ExternalProviders&lt;/em&gt; in the model I added in the &lt;em&gt;Login&lt;/em&gt; method in &lt;em&gt;LoginController&lt;/em&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var vm = new LoginViewModel();
vm.ExternalProviders.Add(ExternalProvider.Google);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;var loginProviders = HttpContext.Authentication.GetAuthenticationSchemes().ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then I would have to filter these schemes and choose only the external providers. I would rather be more explicit at this stage of my solution and that’s why I decided to create  an explicit list of external providers.&lt;/p&gt;

&lt;p&gt;So&amp;hellip;what happens when the user clicks the &lt;em&gt;Google&lt;/em&gt; button. They see a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/allow-access.png&#34; alt=&#34;Allow access&#34; title=&#34;Allow access&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When they click &lt;em&gt;Allow&lt;/em&gt; they see a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/oidc-client-is-requesting-your-permission.png&#34; alt=&#34;OIDC Client is requesting your permission&#34; title=&#34;OIDC Client is requesting your permission&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Take a notice that this screen comes from my Identity Provider. Next, when the user clicks &lt;em&gt;Yes, Allow&lt;/em&gt; they are redirected to the application they came from.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-with-google/final-result.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a flow from a GUI perspective. And now flow from the backend perspective.&lt;/p&gt;

&lt;p&gt;After clicking &lt;em&gt;Login Only&lt;/em&gt; in the &lt;em&gt;JavaScript Oidc Client&lt;/em&gt;, there is a redirection to the method &lt;em&gt;Index&lt;/em&gt; in the &lt;em&gt;LoginController&lt;/em&gt;. Then the &lt;em&gt;Index&lt;/em&gt; view is presented. After clicking the &lt;em&gt;Google&lt;/em&gt; button, the action &lt;em&gt;ExternalLogin&lt;/em&gt; is executed in the same controller and the parameter &lt;em&gt;provider&lt;/em&gt; is set to &lt;em&gt;Google&lt;/em&gt;. This method looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public IActionResult ExternalLogin(string provider, string signInId)
{
    var props = new AuthenticationProperties
    {
        RedirectUri = &amp;quot;/login/callback?signInId=&amp;quot; + signInId
    };

    return new ChallengeResult(provider, props);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I return &lt;em&gt;ChallengeResult&lt;/em&gt; with &lt;em&gt;Google&lt;/em&gt; as a provider which caused my &lt;em&gt;Google middleware&lt;/em&gt; to be triggered and I also specified the callback URI to be called after the auth process.&lt;/p&gt;

&lt;p&gt;The most important thing here is the property &lt;em&gt;SignInScheme&lt;/em&gt; which I set in the &lt;em&gt;UseGoogleAuthentication&lt;/em&gt; options, as this what completes the authentication process after it returns from Google, and then my callback is called.&lt;/p&gt;

&lt;p&gt;In this callback, the current working version looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public async Task&amp;lt;IActionResult&amp;gt; Callback(string signInId)
{
    var external = await HttpContext.Authentication.AuthenticateAsync(&amp;quot;External&amp;quot;);
    //todo create or get local account match by email         
    //for now alice is hardcoded            
    var subject = &amp;quot;818727&amp;quot;;//todo you get this after you create or get local user
    var name = &amp;quot;alice&amp;quot;;
    var claims = new[] {
                new Claim(JwtClaimTypes.Subject, subject),
                new Claim(JwtClaimTypes.Name, name),
                new Claim(JwtClaimTypes.IdentityProvider, &amp;quot;idsvr&amp;quot;),
                new Claim(JwtClaimTypes.AuthenticationTime, DateTime.UtcNow.ToEpochTime().ToString())
            };

    var ci = new ClaimsIdentity(claims, &amp;quot;password&amp;quot;, JwtClaimTypes.Name, JwtClaimTypes.Role);
    var cp = new ClaimsPrincipal(ci);

    await HttpContext.Authentication.SignInAsync(Constants.PrimaryAuthenticationType, cp);
    await HttpContext.Authentication.SignOutAsync(&amp;quot;External&amp;quot;);

    if (signInId != null)
    {                
        return new SignInResult(signInId);
    }

    return Redirect(&amp;quot;~/&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can get access to the claims received from Google with this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var external = await HttpContext.Authentication.AuthenticateAsync(&amp;quot;External&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s why I needed this extra middleware to get these Google claims. I should do something meaningful with these claims but that is a theme for another post. For now, I will simply map everyone logged in with a Google account to my local user &lt;em&gt;alice&lt;/em&gt;. Next, I signed out from the &lt;em&gt;External&lt;/em&gt; authentication schema, then signed in &lt;em&gt;alice&lt;/em&gt; with &lt;em&gt;PrimaryAuthenticationType&lt;/em&gt; which is IdentityServer. After, I return the &lt;em&gt;SignInResult&lt;/em&gt;. Here, I did here the same thing done in the post &lt;em&gt;Login&lt;/em&gt; method in &lt;em&gt;LoginController&lt;/em&gt;. Basically, IdentityServer is doing its job and I don’t need to micromanage what’s going on there. I provided everything it needs to authenticate and authorize a user.&lt;/p&gt;

&lt;p&gt;And that’s it&amp;hellip;this is how I setup Google as an external Identity Provider. You can find the whole source code for this sample project in
&lt;a href=&#34;https://github.com/pikoscielniak/idsrv-demo&#34; target=&#34;_blank&#34;&gt;this repository&lt;/a&gt;.
Similarly, for example, you can use Facebook as an external Identity Provider. I am going to do this but I will write about it only if I run into problems and I’m forced to troubleshoot.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dealing with secrets in ASP .NET Core</title>
      <link>http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/</link>
      <pubDate>Tue, 10 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a short post to complement my post about
&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;the configuration in ASP .NET Core&lt;/a&gt;.
I’ll write about how to add secret settings to your application. ASP .NET Core created a new concept to deal with this. The first thing I did was to add this to the dependencies in &lt;em&gt;project.json&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Microsoft.Extensions.Configuration.UserSecrets&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then inside the constructor of the &lt;em&gt;Startup&lt;/em&gt; class I added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (env.IsDevelopment())
{
builder.AddUserSecrets();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I added something like this to &lt;em&gt;project.json&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;userSecretsId&amp;quot;: &amp;quot;idsrv-demo&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an ID for the secret storage of your application.&lt;/p&gt;

&lt;p&gt;Next, I installed the latest version of runtime and set the alias to point at it, all in one command. The command was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnvm upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step was adding a global command &lt;code&gt;user-secret&lt;/code&gt; by executing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnu commands install Microsoft.Extensions.SecretManager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result, I can add secret settings with commands like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; user-secret set GoogleIdentityProvider:ClientId &amp;quot;342665198077-2lb7ai2oljrojkia5ob4e4kf0rnkeo33.apps.googleusercontent.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this command, &lt;em&gt;GoogleIdentityProvider:ClientId&lt;/em&gt; is a hierarchical key for the setting where the hierarchy is built by the colon.
You can see all your secret settings with the command &lt;code&gt;user-secret list&lt;/code&gt; executed in the root folder of the project.&lt;/p&gt;

&lt;p&gt;I just want to point out that I did everything on Linux. However, on Windows, other than using this option, you can also add secret settings from Visual Studio by right clicking on the project and then clicking on &lt;em&gt;Manage User Secret&lt;/em&gt; and the you can edit file secrets.json which contains all your secret settings assigned to this project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/secrets/manageUserSecrets.png&#34; alt=&#34;Manage User Secrets&#34; title=&#34;Manage User Secrets&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A good practice is to put all the secret settings somewhere so the other project participants can find out what they should also provide. I added a whole section of my secrets to the file &lt;em&gt;appsettings.json&lt;/em&gt; so it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;quot;GoogleIdentityProvider&amp;quot;:{
        &amp;quot;ClientId&amp;quot;:&amp;quot;&amp;quot;,
        &amp;quot;ClientSecret&amp;quot;:&amp;quot;&amp;quot;          
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All you have to do when working with Visual Studio, is copy this section to &lt;em&gt;secrets.json&lt;/em&gt; and then provide the correct settings. I could do it even better by putting this secret settings structure in a separate file so it would be more obvious which part of the settings is secret.&lt;/p&gt;

&lt;p&gt;In this post, I have written about how I provide secret settings for my application, and in
&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;the next post&lt;/a&gt;
I will write how I use these settings to authenticate user using Google Identity Provider from IdentityServer4.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IdentityServer4 - accessing API</title>
      <link>http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/</link>
      <pubDate>Thu, 05 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous
&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;post&lt;/a&gt;,
I wrote about how to get tokens from IdentityServer using a javascript client. In this post, I am going to write about how to use this token to get access to protected resources from a sample API.&lt;/p&gt;

&lt;p&gt;As in the previous post, to achieve my goal, I used samples provided on the
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Samples&#34; target=&#34;_blank&#34;&gt;github repository&lt;/a&gt;.
In this &lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Samples/tree/dev/Mvc/src/SampleApi&#34; target=&#34;_blank&#34;&gt;repo folder&lt;/a&gt;
I found a sample API which I copied into my local repository. After this, I executed &lt;code&gt;dnu restore&lt;/code&gt; inside the &lt;em&gt;SampleApi&lt;/em&gt; directory.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;SampleApi&lt;/em&gt; works on a different port than expected (I expected it to work on 3860, but by default it was 5000) so I changed &lt;code&gt;web&lt;/code&gt; command in the &lt;em&gt;project.json&lt;/em&gt; file in the &lt;em&gt;SampleApi&lt;/em&gt; to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel --server.urls=http://localhost:3860&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could find this port in the &lt;em&gt;index.html&lt;/em&gt; file of the &lt;em&gt;JsOidc&lt;/em&gt; project. In this file, there is a handler for event &lt;em&gt;click&lt;/em&gt; for the button &lt;em&gt;Call Service&lt;/em&gt;.  In this handler, the request is sent to the address &lt;em&gt;&lt;a href=&#34;http://localhost:3860/identity&#34;&gt;http://localhost:3860/identity&lt;/a&gt;&lt;/em&gt; and this is the address on which my Api should work.&lt;/p&gt;

&lt;p&gt;Then I was ready to run my application. I executed &lt;code&gt;dnx web&lt;/code&gt; in three different directories simultaneously: &lt;em&gt;IdSvrHost&lt;/em&gt;, &lt;em&gt;JsOidc&lt;/em&gt; and &lt;em&gt;SampleApi&lt;/em&gt; and after this I navigated to &lt;em&gt;&lt;a href=&#34;http://localhost:7017/&#34;&gt;http://localhost:7017/&lt;/a&gt;&lt;/em&gt; and I clicked &lt;em&gt;Login With Profile and Access Token&lt;/em&gt; and I saw this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-accessing-api/loginScreen.png&#34; alt=&#34;Login Screen&#34; title=&#34;Login Screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I entered the user name &lt;em&gt;alice&lt;/em&gt; and the password &lt;em&gt;alice&lt;/em&gt; and the I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-accessing-api/applicationAccess.png&#34; alt=&#34;Application access&#34; title=&#34;Application access&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked &lt;em&gt;Yes, Allow&lt;/em&gt; and I was brought back to my &lt;em&gt;JsOidc&lt;/em&gt;. The next thing which I did was to click on “Call Service”. After doing this, I saw a response in the pane &lt;em&gt;Ajax Result&lt;/em&gt;, which looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/idsrv4-accessing-api/applicationAccess.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This response contains users claims and this is how it was prepared:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return Json(User.Claims.Select(c =&amp;gt; new { c.Type, c.Value }));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was really amazed by how smoothly I went through usage examples of IdentityServer4 on Linux. After my previous experiences, I was rather sceptical if this example could even run without errors on Ubuntu but they executed perfectly. By doing this example, I checked if I can use IdentityProvider4 as an identity provider for my application but as you may remember from my previous posts, I wanted to have Google as an Identity Provider. In a future post, I’ll examine if it is possible to combine Google authentication with IdentityProvider4.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with IdentityServer4</title>
      <link>http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/</link>
      <pubDate>Wed, 04 May 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wrote in one of
&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;previous posts&lt;/a&gt;
about my experiments with Google Identity Provider and Implicit Flow to get access tokens which allow me to fetch resources from API.
I didn’t mention IdentityServer
&lt;a href=&#34;https://github.com/IdentityServer&#34; target=&#34;_blank&#34;&gt;IdentityServer&lt;/a&gt; in these posts, which is becoming the default choice if you want to create an identity provider in ASP .NET.
I did this deliberately because I had some experiences with IdentityServer 3 and I wanted to try something new. IdentityServer3 wasn’t prepared to be used with ASP .NET Core but is there something similar to it? Yes and you can read about it
&lt;a href=&#34;https://leastprivilege.com/2016/01/11/announcing-identityserver-for-asp-net-5-and-net-core/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
There is IdentityServer4 which is a port of IdentityServer for ASP .NET Core. This post is the first in a series about IdentityServer4 on ASP .NET Core.&lt;/p&gt;

&lt;p&gt;The journey with the IdentityServer4 started by copying&lt;br /&gt;
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Samples/tree/dev/Mvc/src/IdSvrHost&#34; target=&#34;_blank&#34;&gt;this folder&lt;/a&gt;
into my local directory.
Then inside the directory &lt;em&gt;IdSvrHost&lt;/em&gt;, I restored the packages and I ran an application with &lt;code&gt;dnx web&lt;/code&gt; and after a while I saw the IdentityServer4 welcome page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/welcomePage.png&#34; alt=&#34;Identity Server4 welcome page&#34; title=&#34;Identity Server4 welcome page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, that was great but let’s test IdentityServer4 with a client. In a previous post, I experimented with a javascript client and we’ll do the same in this case.&lt;/p&gt;

&lt;p&gt;I downloaded
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Samples/tree/dev/Clients/src/JsOidc&#34; target=&#34;_blank&#34;&gt;this folder&lt;/a&gt;
to my local folder.
I restored the packages and ran an application with the command &lt;code&gt;web run&lt;/code&gt; and got the following error in the console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Microsoft.AspNet.Server.Kestrel.Networking.UvException: Error -98 EADDRINUSE address already in use
   at Microsoft.AspNet.Server.Kestrel.Networking.Libuv.Check(Int32 statusCode)
   at Microsoft.AspNet.Server.Kestrel.Networking.UvStreamHandle.Listen(Int32 backlog, Action`4 callback, Object state)
   at Microsoft.AspNet.Server.Kestrel.Http.TcpListener.CreateListenSocket()
   at Microsoft.AspNet.Server.Kestrel.Http.Listener.&amp;lt;&amp;gt;c__DisplayClass5_0.&amp;lt;StartAsync&amp;gt;b__0(Object _)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course I got the error message &lt;em&gt;address already in use&lt;/em&gt; because my IdentityServer was occupying port 5000. In the &lt;em&gt;project.json&lt;/em&gt; file of &lt;em&gt;JsOidc&lt;/em&gt; project, the &lt;em&gt;web&lt;/em&gt; command was defined as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the default port for Kestrel is 5000. So I needed to change this but which port do I choose? I could find the right port in the definition of Clients for IdentityServer and that was in the class &lt;em&gt;Clients&lt;/em&gt; inside the &lt;em&gt;Configuration&lt;/em&gt; folder of &lt;em&gt;IdSvrHost&lt;/em&gt; project. At the end of this class I found:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;///////////////////////////////////////////
// JS OIDC Sample
//////////////////////////////////////////
new Client
{
    ClientId = &amp;quot;js_oidc&amp;quot;,
    ClientName = &amp;quot;JavaScript OIDC Client&amp;quot;,
    ClientUri = &amp;quot;http://identityserver.io&amp;quot;,

    Flow = Flows.Implicit,
    RedirectUris = new List&amp;lt;string&amp;gt;
    {
        &amp;quot;http://localhost:7017/index.html&amp;quot;,
        &amp;quot;http://localhost:7017/silent_renew.html&amp;quot;,
    },
    PostLogoutRedirectUris = new List&amp;lt;string&amp;gt;
    {
        &amp;quot;http://localhost:7017/index.html&amp;quot;,
    },

    AllowedCorsOrigins = new List&amp;lt;string&amp;gt;
    {
        &amp;quot;http://localhost:7017&amp;quot;
    },

    AllowedScopes = new List&amp;lt;string&amp;gt;
    {
        StandardScopes.OpenId.Name,
        StandardScopes.Profile.Name,
        StandardScopes.Email.Name,
        StandardScopes.Roles.Name,
        &amp;quot;api1&amp;quot;, &amp;quot;api2&amp;quot;
    }
},

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the port which I was looking for was 7017 and I changed &lt;em&gt;web&lt;/em&gt; command in the &lt;em&gt;JsOidc&lt;/em&gt; project to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel --server.urls=http://localhost:7017&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, when I ran the application and navigated to &lt;em&gt;&lt;a href=&#34;http://localhost:7017&#34;&gt;http://localhost:7017&lt;/a&gt;&lt;/em&gt; I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/javaScriptOidcClient.png&#34; alt=&#34;JavaScript Oidc Client&#34; title=&#34;JavaScript Oidc Client&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I clicked &lt;em&gt;Login Only&lt;/em&gt; nothing had happened and I could only see this in the web browser console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/errorAfterLogin.png&#34; alt=&#34;Error after Login&#34; title=&#34;Error after Login&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The reason for the error seemed to be obvious: the javascript library which communicated with IdentityServer was configured to use address localhost:22530 and my IdentityServer worked on port 5000. By the way, this library is my old friend &lt;em&gt;oidc-token-manager&lt;/em&gt; library which I played with
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;here&lt;/a&gt; and
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I decided to run my IdentityServer on the port 22530 instead of making changes in the client application code. So I changed the web command in the project &lt;em&gt;IdSvrHost&lt;/em&gt; to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel --server.urls=http://localhost:22530&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I restarted IdentityServer and then after clicking &lt;em&gt;Login Only&lt;/em&gt; again, I was redirected to this page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/loginPage.png&#34; alt=&#34;Login Page&#34; title=&#34;Login Page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After entering the username &lt;em&gt;alice&lt;/em&gt; and the password &lt;em&gt;alice&lt;/em&gt; which I found in the class &lt;em&gt;Users&lt;/em&gt; inside the &lt;em&gt;Configuration&lt;/em&gt; folder of &lt;em&gt;IdSvrHost&lt;/em&gt; project, I saw this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/requestingYourPermission.png&#34; alt=&#34;Requesting Your Permission&#34; title=&#34;Requesting Your Permission&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking &lt;em&gt;Yes, Allow&lt;/em&gt;, which meant that I granted a specific permission to my client, I was brought back to the javascript client and I saw the following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/05/getting-started-with-idsrv4/finalResult.png&#34; alt=&#34;Final Result&#34; title=&#34;Final Result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I got &lt;em&gt;id_token&lt;/em&gt; which meant I was successfully authenticated in IdentityServer. The next step is to obtain &lt;em&gt;access_token&lt;/em&gt; and use it to access some API but this is a theme for another post. Meanwhile, you can find the whole source code for this demo in
&lt;a href=&#34;https://github.com/pikoscielniak/idsrv-demo&#34; target=&#34;_blank&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ASP .NET Core Configuration</title>
      <link>http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/</link>
      <pubDate>Wed, 27 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ASP .NET Core brings with it a lot of new things and concepts to the Web development on .NET framework. One of them is the new way to configure your application. In this post, I will look at the possibilities we have in this area.&lt;/p&gt;

&lt;p&gt;In the previous version of ASP .NET you used file &lt;em&gt;Web.config&lt;/em&gt; to configure your application. Now you have more options: you can use &lt;em&gt;json&lt;/em&gt;, &lt;em&gt;ini&lt;/em&gt;, &lt;em&gt;xml&lt;/em&gt; and you can even easily use environment variables to configure your app. Let’s see how it works.&lt;/p&gt;

&lt;p&gt;We should prepare the configuration for our application during its startup and in the ASP .NET Core there is a class &lt;em&gt;Startup&lt;/em&gt; which is the entry point of our app. In the constructor of the class &lt;em&gt;Startup&lt;/em&gt; we create the &lt;em&gt;ConfigurationBuilder&lt;/em&gt; which we use to prepare the configuration of the app. We can use dependency injection in this constructor and get by it an instance of &lt;em&gt;IHostingEnvironment&lt;/em&gt; and &lt;em&gt;IApplicationEnvironment&lt;/em&gt; which may be helpful for configuration because &lt;em&gt;IHostingEnvironment&lt;/em&gt; provides the current &lt;em&gt;EnvironmentName&lt;/em&gt;, &lt;em&gt;WebRootPath&lt;/em&gt;, and web root file provider while &lt;em&gt;IApplicationEnvironment&lt;/em&gt; provides access to the application properties, such as &lt;em&gt;ApplicationName&lt;/em&gt;, &lt;em&gt;ApplicationVersion&lt;/em&gt;, and &lt;em&gt;ApplicationBasePath&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I prepared *Startup*’s constructor like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Startup(IHostingEnvironment env)
{
    var builder = new ConfigurationBuilder()
        .AddJsonFile(&amp;quot;appsettings.json&amp;quot;)
        .AddJsonFile($&amp;quot;appsettings.{env.EnvironmentName}.json&amp;quot;, optional: true);

    builder.AddEnvironmentVariables();
    Configuration = builder.Build();           
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I did in it was to create &lt;em&gt;ConfigurationBuilder&lt;/em&gt; and then I ordered it to prepare the configuration based using files “appsettings.json” and &lt;em&gt;appsettings.{env.EnvironmentName}.json&lt;/em&gt; but the second file may or may not exist. The part of the name &lt;em&gt;env.EnvironmentName&lt;/em&gt; will be replaced in runtime with the proper value. We will see an example of this in a minute.&lt;/p&gt;

&lt;p&gt;I also added environment variables to builder so the configuration will also contain what’s in them. After this, I built config and stored it in the property &lt;em&gt;Configuration&lt;/em&gt; of &lt;em&gt;Startup&lt;/em&gt; class.&lt;/p&gt;

&lt;p&gt;Having the setup like this let’s us create files &lt;em&gt;appsettings.json&lt;/em&gt; and &lt;em&gt;appsettings.Development.json&lt;/em&gt; with content like this:&lt;br /&gt;
&lt;em&gt;appsettings.json&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;ClientSettings&amp;quot;:{
        &amp;quot;Name&amp;quot;: &amp;quot;Client Name&amp;quot;,
        &amp;quot;PageSize&amp;quot;: 10,
        &amp;quot;ShowTitle&amp;quot;: true
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;appsettings.Development.json&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;ClientSettings&amp;quot;:{
        &amp;quot;Name&amp;quot;: &amp;quot;Development Client Name&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now how can we get access to the values stored in these config files? We have a couple of possibilities so let’s explore a few of them.&lt;/p&gt;

&lt;p&gt;The first one is to get it directly from the &lt;em&gt;Configuration&lt;/em&gt; property like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var clientName = Configuration[&amp;quot;ClientSettings:Name&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, you must use colons to get nesting values.&lt;/p&gt;

&lt;p&gt;We can even get a whole section from configuration by doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var clientSettings = Configuration.GetSection(&amp;quot;ClientSettings&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then get values from it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = clientSettings.Get&amp;lt;string&amp;gt;(&amp;quot;Name&amp;quot;);
var pageSize = clientSettings.Get&amp;lt;int&amp;gt;(&amp;quot;PageSize&amp;quot;);
var showTitle = clientSettings.Get&amp;lt;bool&amp;gt;(&amp;quot;ShowTitle&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also set a default value for a specific property like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var pageSize = clientSettings.Get&amp;lt;int&amp;gt;(&amp;quot;PageSize&amp;quot;, 20);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can only do all these things inside &lt;em&gt;Startup&lt;/em&gt; class unless we make a &lt;em&gt;Configuration&lt;/em&gt; property &lt;code&gt;public static&lt;/code&gt; then we can access it also in example controllers like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public IActionResult Index()
{
    var clientName = Startup.Configuration[&amp;quot;ClientSettings:Name&amp;quot;];
    return Content($&amp;quot;Client {clientName}&amp;quot;);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;but this kind of using Configuration is a rather bad practice. Another bad practice is making configuration available by dependency injection by doing this in the &lt;em&gt;ConfigureServices&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;services.AddInstance&amp;lt;IConfigurationRoot&amp;gt;(Configuration);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then using it, for example in controller, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HomeController : Controller
{
    private IConfigurationRoot _configuration;

    public HomeController(IConfigurationRoot configuration)
    {
        _configuration = configuration;
    }
    public IActionResult Index()
    {            
          var clientName = _configuration[&amp;quot;ClientSettings:Name&amp;quot;];
        return Content($&amp;quot;Client {clientName}&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can get configuration in controller in another way but first let’s create a class like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ClientSettings
{
    public string Name { get; set; }
    public int PageSize { get; set; }
    public bool ShowTitle { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then inside &lt;em&gt;ConfigureServices&lt;/em&gt; we do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;services.Configure&amp;lt;ClientSettings&amp;gt;(Configuration.GetSection(&amp;quot;ClientSettings&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can get access to the settings for a specific section from dependency injection like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HomeController : Controller
{
    private ClientSettings _clientSettings;

    public HomeController(IOptions&amp;lt;ClientSettings&amp;gt; clientSettings)
    {
        _clientSettings = clientSettings.Value;
    }
    public IActionResult Index()
    {            
          var clientName = _clientSettings;
        return Content($&amp;quot;{_clientSettings.Name} {_clientSettings.PageSize} {_clientSettings.ShowTitle}&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see now, you have access to the strongly typed object with all your desired settings and you can get help from intellisense to see what they contain.&lt;/p&gt;

&lt;p&gt;You can even get access to these settings from the view by doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;@inject IOptions&amp;lt;ClientSettings&amp;gt; ClientSettings
&amp;lt;div&amp;gt;    
    @if(ClientSettings.Value.ShowTitle) {
        &amp;lt;h3&amp;gt;Page title @ClientSettings.Value.Name&amp;lt;/h3&amp;gt;    
    }
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to add usings in the &lt;em&gt;_ViewImports.cshtml&lt;/em&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@using AspNetConfigSampleApp
@using Microsoft.Extensions.OptionsModel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For someone who finds injecting &lt;em&gt;IOptions&amp;lt;&amp;gt;&lt;/em&gt; a bit awkward, this is a solution which I found out about from
&lt;a href=&#34;http://www.benedykt.net/&#34; target=&#34;_blank&#34;&gt;Arkadiusz Benedykt&lt;/a&gt;. In the &lt;em&gt;ConfigureServices&lt;/em&gt; we do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var clientSettings = Configuration.Get&amp;lt;ClientSettings&amp;gt;(&amp;quot;ClientSettings&amp;quot;);
services.AddInstance(clientSettings);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We created an instance of the &lt;em&gt;ClientSettings&lt;/em&gt; and registered it as a singleton in the dependency injection container so every time someone asks for the class &lt;em&gt;ClientSettings&lt;/em&gt; this instance just created will be injected. With a solution like this, you can use  &lt;em&gt;ClientSettings&lt;/em&gt; in controller in this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HomeController : Controller
{
   private ClientSettings _clientSettings;

    public HomeController(ClientSettings clientSettings)
    {
        _clientSettings = clientSettings;
    }
    public IActionResult Index()
    {            
         var clientName = _clientSettings;
        return Content($&amp;quot;{_clientSettings.Name} {_clientSettings.PageSize} {_clientSettings.ShowTitle}&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Building the configuration by &lt;em&gt;ConfigurationBuilder&lt;/em&gt; is hierarchical. This means that what is added at the beginning of the configuration will be overridden by what’s added later. Usually the last thing we add to the &lt;em&gt;ConfigurationBuilder&lt;/em&gt; is &lt;em&gt;AddEnvironmentVariables&lt;/em&gt; which means that environmental variables can override settings gathered from previous sources of configuration for example from &lt;em&gt;json&lt;/em&gt; files. Let’s see this in practice.&lt;/p&gt;

&lt;p&gt;In the file &lt;em&gt;appsettings.Develplment.json&lt;/em&gt; I have changed the value for property &lt;em&gt;Name&lt;/em&gt;. When I run the application with this command &lt;code&gt;env ASPNET_ENV=”Development” dnx web&lt;/code&gt; I get a value for &lt;em&gt;Name&lt;/em&gt; like this &lt;em&gt;Development Client Name&lt;/em&gt; because the file  &lt;em&gt;appsettings.Develplment.json&lt;/em&gt; is added after the &lt;em&gt;appsettings.json&lt;/em&gt; to the &lt;em&gt;ConfigurationBuilder&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I can even change the value for &lt;em&gt;Name&lt;/em&gt; when I run the application by issuing a command like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;env ASPNET_ENV=&amp;quot;Development&amp;quot; ClientSettings:Name=&amp;quot;Name from Environment&amp;quot;  dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I got value &lt;em&gt;Name from Environment&lt;/em&gt; for property &lt;em&gt;Name&lt;/em&gt; of &lt;em&gt;ClientSettings&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We can also change the values in configuration after it is built, for example like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configuration[&amp;quot;ClientSettings:Name&amp;quot;] = &amp;quot;Name from Startup&amp;quot;;   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can even add new settings. This is how it is done in the default Web application project template from &lt;em&gt;yo aspnet generator&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configuration[&amp;quot;Data:DefaultConnection:ConnectionString&amp;quot;] = $@&amp;quot;Data Source={appEnv.ApplicationBasePath}/WebApplication.db&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find all the examples from this post in this
&lt;a href=&#34;https://github.com/pikoscielniak/asp-net-core-configuration&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;.
As you can see, this new way of configuring your ASP .NET Core application provides a lot of possibilities.
&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;In the future&lt;/a&gt;,
I will also write about how to deal with settings which should be secret and should not be published to the source code repository.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reading code as if it were a book</title>
      <link>http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/</link>
      <pubDate>Mon, 25 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes we hear that good source code should be read as easily as a book. Let’s look at this code as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class EventService
{
 private string _eventTitle;
 private string _participantName;
 private Event _event;
 private Participant _participant;

 public void Process(string eventTitle, string participantName)
 {
   InitFields(eventTitle, participantName);
   CreateParticipant();
   CreateEvent();
   SaveEvent();
 }

 private void SaveEvent()
 {
   var repository = new Repository();
   repository.Save(_event);
 }

 private void CreateParticipant()
 {
   _participant = new Participant(_participantName);
 }

 private void InitFields(string eventTitle, string participantName)
 {
   _eventTitle = eventTitle;
   _participantName = participantName;
 }

 private void CreateEvent()
 {
_event = new Event(_eventTitle, _participant);
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important part of this code is the method &lt;em&gt;Process&lt;/em&gt;. Let’s see if we can read this method &lt;em&gt;as a book&lt;/em&gt;.&lt;br /&gt;
&lt;em&gt;InitFields: eventTitle and participantName&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;CreateParticipant&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;CreateEvent&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;SaveEvent&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I think we can agree that you can pretty much read it like a book. When I run this sample app with &lt;em&gt;Repository&lt;/em&gt; class like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Repository
{
 public void Save(Event @event)
 {
   Console.WriteLine($&amp;quot;Saved event: &#39;{@event.EventTitle}&#39; with participant: &#39;{@event.Participant.ParticipantName}&#39;&amp;quot;);
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the &lt;em&gt;Main&lt;/em&gt; method like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static void Main(string[] args)
 {
   var eventService = new EventService();
   eventService.Process(&amp;quot;Some event&amp;quot;,&amp;quot;Some participant&amp;quot;);
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I got this output in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Saved event: &#39;Some event&#39; with participant: &#39;Some participant&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suddenly, the requirements have changed and the event should also have the place where it’s going to happen. A programmer gets this task &lt;em&gt;Add the place to the event&lt;/em&gt;. They come to the code, look at it and write a method like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void CreatePlace()
{
 _place = new Place(_placeName);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of Course they add the fields &lt;em&gt;_place&lt;/em&gt; and &lt;em&gt;_placeName&lt;/em&gt; and change the signature of the &lt;em&gt;Process&lt;/em&gt; method to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Process(string eventTitle, string participantName, string placeName)
{
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They must remember to init  field &lt;em&gt;_placeName&lt;/em&gt; in the &lt;em&gt;InitFields&lt;/em&gt; methods and they must change the signature to this again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void InitFields(string eventTitle, string participantName, string placeName)
{
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fortunately, this programmer has
&lt;a href=&#34;https://www.jetbrains.com/resharper/&#34; target=&#34;_blank&#34;&gt;Reshaper&lt;/a&gt;.
Actually, they are testing
&lt;a href=&#34;https://www.jetbrains.com/rider/&#34; target=&#34;_blank&#34;&gt;JetBrains’ Rider&lt;/a&gt;
and ALT+ENTER did a lot of this work for them but it’s still a lot of changes. They also have changed the &lt;em&gt;CreateEvent&lt;/em&gt; method to what you see below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void CreateEvent()
{
 _event = new Event(_eventTitle, _participant, _place);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, the last thing to do is to use the &lt;em&gt;CreatePlace&lt;/em&gt; method in the &lt;em&gt;Process&lt;/em&gt; method , but the phone rings. After a 5 minute conversation, they return to the code and enter &lt;em&gt;CreatePlace&lt;/em&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Process(string eventTitle, string participantName, string placeName)
{
 InitFields(eventTitle, participantName, placeName);
 CreateParticipant();
 CreateEvent();
 CreatePlace();
 SaveEvent();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can you spot where the mistake is? The method &lt;em&gt;Save&lt;/em&gt; in &lt;em&gt;Repository&lt;/em&gt; was written by another programmer and now it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Save(Event @event)
{
 Console.WriteLine($&amp;quot;Saved event: &#39;{@event.EventTitle}&#39;, at &#39;{@event.Place.Name}&#39; &amp;quot; +
                   $&amp;quot;with participant: &#39;{@event.Participant.ParticipantName}&#39;&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, the task completed and the place was added to the event. Now let’s run the app&amp;hellip;this is what we get:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;System.NullReferenceException: Object reference not set to an instance of an object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We get a beautiful &lt;em&gt;System.NullReferenceException&lt;/em&gt;. Why? Because the programmer called the method &lt;em&gt;CreatePlace&lt;/em&gt; after the method &lt;em&gt;CreateEvent&lt;/em&gt;  by mistake. The mutability of these private fields and the side effects of these &lt;em&gt;Create&amp;hellip;&lt;/em&gt; methods come back to haunt the programmer. Fortunately, the &lt;em&gt;Place&lt;/em&gt; was required and the error shows up immediately but if it doesn’t, how do you know what happened? You can imagine many other possibilities to make a mistake with such kind of code. For example, you can forget to init fields in the &lt;em&gt;InitFields&lt;/em&gt; method.&lt;/p&gt;

&lt;p&gt;Believe it or not, I see this kind of code almost every day. Yes, I know someone would say with TDD you don’t see such kinds of errors but what if you work on a legacy project which doesn’t have tests for this specific fragment of code. What’s more, this way of writing code is also problematic when you want to refactor your code. For example, let’s say that &lt;em&gt;CreateParticipant&lt;/em&gt; got so many requirements that you must take it out of &lt;em&gt;EventService&lt;/em&gt; and put it in its own service. Then you must cut off not only &lt;em&gt;CreateParticipant&lt;/em&gt; method itself but also private fields and private methods on which it depends and sometimes this is not so easy.&lt;/p&gt;

&lt;p&gt;But we can do this better. Let’s get rid of all these private fields and replace them with local variables so the code look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class EventService
{
 public void Process(string eventTitle, string participantName, string placeName)
 {
   var participant = CreateParticipant(participantName);
   var place = CreatePlace(placeName);
   var @event = CreateEvent(eventTitle, participant, place);
   SaveEvent(@event);
 }

 private static void SaveEvent(Event @event)
 {
   var repository = new Repository();
   repository.Save(@event);
 }

 private static Participant CreateParticipant(string participantName)
 {
   return new Participant(participantName);
 }

 private static Place CreatePlace(string placeName)
 {
   return new Place(placeName);
 }

 private static Event CreateEvent(string eventTitle, Participant participant, Place place)
 {
   return new Event(eventTitle, participant, place);
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now when you run the app you’ll see this in the console:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Saved event: &#39;Some event&#39;, at &#39;Some place&#39; with participant: &#39;Some participant&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the code like this, it is impossible to create &lt;em&gt;Event&lt;/em&gt; without creating &lt;em&gt;Place&lt;/em&gt; first. Now all these &lt;em&gt;Create&amp;hellip;&lt;/em&gt; methods can be made static. Is this code so hard to read? I don’t think so. A source code is a book with constantly changing pages. I cannot print it and forget about it. You must come back to some places and alter them constantly. It&amp;rsquo;s okay if you&amp;rsquo;re altering code you&amp;rsquo;ve written yourself, but if you work with code written by someone else, then you must be careful about what you do if you come across a situation like the example I shared.&lt;/p&gt;

&lt;p&gt;It’s a very trivial example but you can get a feel for what I’m trying to express. This code won’t be read by a manager or other business people, it will be read by programmers and they can handle a drawback like local variables. The second example of code given can be even more readable for a programmer because they see the whole context for variables and know exactly where they are used. They don’t have to search for &lt;em&gt;Find usages&lt;/em&gt; because they see the usages straight away. What’s more, this functional way of writing code helps in the maintenance of the application. Less side effects and less mutability makes your application more predictable and reliable, especially when multithreading is at stake.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>When dotPeek can save your live</title>
      <link>http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/</link>
      <pubDate>Thu, 21 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poz  nać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is a little break in my investigation regarding auth stuff.
To write my previous posts I had to debug a bit - and this mainly happened with code that was not mine. Debugging javascript code that is not your own is a piece of cake. You simply write &lt;code&gt;debugger&lt;/code&gt; somewhere in the script and that’s it - the execution of this code will stop where you place the word &lt;code&gt;debugger&lt;/code&gt;. Eventually, you can set a breakpoint in the web browser debugger. Debugging C# code that is not your own requires more involvement, especially if you don’t have source code and &lt;code&gt;pdb&lt;/code&gt; files.  In this post, I am going to write how
&lt;a href=&#34;https://www.jetbrains.com/decompiler/&#34; target=&#34;_blank&#34;&gt;dotPeek&lt;/a&gt; helps to look inside 3rd party code and see how things works in libraries that I have imported to my project.&lt;/p&gt;

&lt;p&gt;dotPeek is a decompiler but it can also work as a &lt;em&gt;Symbol Server&lt;/em&gt;. Before you use it, you must set it up. This how I did it:&lt;/p&gt;

&lt;p&gt;To configure dotPeek as a &lt;em&gt;Symbol Server&lt;/em&gt; you must navigate in Visual Studio to &lt;em&gt;Tools &amp;rarr; Options &amp;rarr; Debugging &amp;rarr; Symbols&lt;/em&gt;. And then add a new location for symbols like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/addNewSymbolsFile.png&#34; alt=&#34;Add new symbol file&#34; title=&#34;Add new symbol file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can check the port on which the symbol server is working in the dotPeek settings &lt;em&gt;Tool &amp;rarr; Options &amp;rarr; Symbol Server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/configureServerPort.png&#34; alt=&#34;Configure server port&#34; title=&#34;Configure server port&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The debugging options in Visual Studio (Tools &amp;rarr; Options &amp;rarr; Debugging &amp;rarr; General)  should be set like this:&lt;/p&gt;

&lt;p&gt;Uncheck the &lt;em&gt;Enable Just My Code&lt;/em&gt; option&lt;br /&gt;
Uncheck the &lt;em&gt;Enable .NET Framework source stepping&lt;/em&gt; option&lt;br /&gt;
Check the &lt;em&gt;Enable source server support&lt;/em&gt; option&lt;br /&gt;
Uncheck the &lt;em&gt;Require source files to exactly match the original version&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now when everything is setup you can start symbol server in dotPeek by hitting this button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/startDotPeekServer.png&#34; alt=&#34;Start symbol server&#34; title=&#34;Start symbol server&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you first run debug after this configuration it takes some time to load all the desired symbols. You can see what’s going on at the bottom left corner of Visual Studio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/loadingSymbols.png&#34; alt=&#34;Loading symbols&#34; title=&#34;Loading symbols&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When all the symbols are loaded, you will see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/loadingSymbolsReady.png&#34; alt=&#34;Loading symbols ready&#34; title=&#34;Loading symbols ready&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next time when you hit Run debugging, it will start almost immediately.&lt;/p&gt;

&lt;p&gt;You can control which symbols should be loaded in the dotPeek settings &lt;em&gt;Tool &amp;rarr; Options &amp;rarr; Symbol Server&lt;/em&gt; and here you can choose for which assemblies dotPeek should generate symbols.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/generateSymbolsFor.png&#34; alt=&#34;Generate symbols for&#34; title=&#34;Generate symbols for&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you do this setup it doesn’t mean you can enter whenever you want by hitting F11 (Step Into). You still must show where the &lt;em&gt;pdb&lt;/em&gt; file is for a specific assembly. To do this, open &lt;em&gt;Debug &amp;rarr; Windows &amp;rarr; Modules&lt;/em&gt; during the debugging session and in the &lt;em&gt;Search&lt;/em&gt; field type a part of the name of the assembly you want to debug. After, you’ll see in the &lt;em&gt;Modules&lt;/em&gt; window &lt;em&gt;Cannot find or open the PDB file.&lt;/em&gt;, for this assembly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/cannotFindPDBfile.png&#34; alt=&#34;Cannot find pdb file&#34; title=&#34;Cannot find pdb file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, dotPeek comes to the rescue. Go to &lt;em&gt;File &amp;rarr; Open&lt;/em&gt; in dotPeek and navigate to the path where the assembly you want to debug is. You’ll find this path in the &lt;em&gt;Debug &amp;rarr; Windows &amp;rarr; Modules&lt;/em&gt; as you can see here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/pathToDll.png&#34; alt=&#34;Path to dll&#34; title=&#34;Path to dll&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you select the &lt;em&gt;.dll&lt;/em&gt; file it will be loaded to the dotPeek &lt;em&gt;Assembly Explorer&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/loadedAssemblyInDotPeek.png&#34; alt=&#34;Loaded assembly in dotPeek&#34; title=&#34;Loaded assembly in dot peek&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can load the &lt;em&gt;pdb&lt;/em&gt; for this assembly in Visual Studio. In &lt;em&gt;Debug &amp;rarr; Windows &amp;rarr; Modules&lt;/em&gt;, right click on the selected assembly and you will see this dialog:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/loadSymbolesInModules.png&#34; alt=&#34;Load symbols in modules&#34; title=&#34;Load symbols in modules&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on &lt;em&gt;Load Symbols&lt;/em&gt; succeeds in loading symbols for the assembly you want to debug.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/symbolesLoaded.png&#34; alt=&#34;Symboles loaded&#34; title=&#34;Symboles loaded&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After this, when you hit F11 (Step Into) you’ll get inside the code of the assembly you want to reflect.&lt;/p&gt;

&lt;p&gt;Sometimes you cannot find a direct way from your code to the methods writting by others, which you want to investigate. In this situation, you can use the window &lt;em&gt;Debug &amp;rarr; New Breakpoint &amp;rarr; Function Breakpoint…&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/newFunctionBreakpoint.png&#34; alt=&#34;New function Breakpoint&#34; title=&#34;New function Breakpoint&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this window, you can put the fully qualified method name and the debugger will stop at that point when the execution of the application has reached it.&lt;/p&gt;

&lt;p&gt;What’s more, if you want, you can generate&lt;em&gt;pdb&lt;/em&gt; files in dotPeek and save it. To do this, right click the mouse button on the assembly for which you want &lt;em&gt;pdb&lt;/em&gt;. You’ll see this dialog:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/generatePDB.png&#34; alt=&#34;Generate pdb&#34; title=&#34;Generate pdb&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you click &lt;em&gt;Generate Pdb..&lt;/em&gt; you’ll be asking to pass the destination path for symbols. You should specify the same path where the assembly is located.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/dotPeek/generatePdbDialog.png&#34; alt=&#34;Generate pdb dialog&#34; title=&#34;Generate pdb dialog&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking &lt;em&gt;Generate&lt;/em&gt; will cause the &lt;em&gt;pdb&lt;/em&gt; file to be generated and copied to the chosen location. By doing this, you can pass this &lt;em&gt;pdb&lt;/em&gt; file where it is needed.&lt;/p&gt;

&lt;p&gt;Now, you can enjoy the freedom of debugging.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>How portable is ASP .NET Core 1.0?</title>
      <link>http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/</link>
      <pubDate>Tue, 19 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous
&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;post&lt;/a&gt;,
I wrote about accessing a protected API controller being
authenticated with id tokens obtained from Google. I created my application on Windows in Visual Studio because I needed the helping hand of
&lt;a href=&#34;https://www.jetbrains.com/decompiler/&#34; target=&#34;_blank&#34;&gt;dotPeek&lt;/a&gt; to see what was going on inside code that is not mine. In this post, I’ll write what happened when I ran this application on Ubuntu.&lt;/p&gt;

&lt;p&gt;After I pulled my project from
&lt;a href=&#34;https://github.com/pikoscielniak/notifier-auth-demo&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;,
I restored all packages using &lt;code&gt;dnu restore&lt;/code&gt; and I ran the application. The project compiled and ran without any trouble. I obtained a token from Google and I clicked the &lt;em&gt;Protected&lt;/em&gt; button and I saw this on the screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/howPortable/errorAfterProtected.png&#34; alt=&#34;Error after Protected&#34; title=&#34;Error after Protected&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I looked at the console where my app was running I saw the same error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/howPortable/couldNotLoadTypeAsymmetricSignatureProvider.png&#34; alt=&#34;Could not load type asymmetric signature provider&#34; title=&#34;Could not load type asymmetric signature provider&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I thought that the tip on how to solve this problem was included in this line: &lt;code&gt;Could not load type &#39;System.IdentityModel.Tokens.AsymmetricSignatureProvider&#39;&lt;/code&gt;. I googled this error and I found this
&lt;a href=&#34;https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/179&#34; target=&#34;_blank&#34;&gt;RSACryptoServiceProviderProxy crashes on&lt;/a&gt;.
A quick look at this page gave me a clue that there are differences in the cryptography between &lt;em&gt;Mono&lt;/em&gt; and .Net on Windows. I am not going into details here, but what’s important is that at the time of writing this post, this issue was still ongoing. I tried a different version of package &lt;em&gt;Microsoft.AspNet.Authentication.JwtBearer&lt;/em&gt;, which was 1.0.0-beta8 but in this package extension method &lt;em&gt;UseJwtBearerAuthentication&lt;/em&gt; didn’t exist.&lt;/p&gt;

&lt;p&gt;Okay, this was on Mono but what happened on coreclr? I switched my execution environment to coreclr using the command &lt;code&gt;dnvm upgrade -r coreclr&lt;/code&gt;. This command upgraded my coreclr version and set it as the default runtime version. &lt;code&gt;dnvm list&lt;/code&gt; gave me an output like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/howPortable/dnvmListOutput.png&#34; alt=&#34;dnvm list ouput&#34; title=&#34;dnvm list ouput&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I ran the application and obtained a token from Google by clicking &lt;em&gt;Get Token&lt;/em&gt; and finally I clicked the &lt;em&gt;Protected&lt;/em&gt; button and I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/howPortable/unableToLoadDllNcrypt.png&#34; alt=&#34;Unable to load dll Ncrypt&#34; title=&#34;Unable to load dll Ncrypt&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This line: * &amp;lsquo;System.DllNotFoundException: Unable to load DLL &amp;lsquo;ncrypt.dll&amp;rsquo;* seemed to be the key part of this error for me, so I googled it. The first search result brought up this
&lt;a href=&#34;https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/324&#34; target=&#34;_blank&#34;&gt;issue on github&lt;/a&gt;.
This issue seemed to be resolved but it is added to &lt;em&gt;milestone:RC2&lt;/em&gt; so probably the next version will have this error fixed.&lt;/p&gt;

&lt;p&gt;In conclusion, what does the portability of ASP .NET Core applications really look like? In the case of Windows, everything works perfectly. On Linux (Ubuntu) it didn’t work. You can read above about what exactly didn’t work. Yes, I could hack it and work around these errors, for example, by implementing my own &lt;em&gt;SignatureProviderFactory&lt;/em&gt;, but I am quite sure that the .Net Team will do this better than me in the near future. It’s only a matter of time for ASP .NET Core to work the same on all platforms. You can find out more about it
&lt;a href=&#34;https://channel9.msdn.com/Events/Build/2016/B891&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;,
but for now it is still bleeding edge and bleeding edges hurt.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Accessing API with token from Google Identity Provider</title>
      <link>http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/</link>
      <pubDate>Thu, 14 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In previous
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;posts&lt;/a&gt;
I wrote about getting id tokens and access tokens from Google Identity Provider. To do this I used the library
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager&#34; target=&#34;_blank&#34;&gt;oidc-token-manager&lt;/a&gt;.
You can read here and here how I prepared config for this library in order to have a working authentication of a user in Google Identity Provider. I stated that my solution isn’t perfect and actually I treated it as a temporary one. In this post, I’ll write about using tokens fetched from Google to access my sample API. Let’s see what I did and what results it brought.&lt;/p&gt;

&lt;p&gt;For the purpose of my testing, I created another project which is in
&lt;a href=&#34;https://github.com/pikoscielniak/notifier-auth-demo&#34; target=&#34;_blank&#34;&gt;this repository&lt;/a&gt;.
This time the sample application that I used for this post was created on a Windows operating system because I needed some tools which I am very familiar with like:
&lt;a href=&#34;https://www.visualstudio.com/pl-pl/products/visual-studio-community-vs.aspx&#34; target=&#34;_blank&#34;&gt;Visual Studio&lt;/a&gt;,
&lt;a href=&#34;https://www.jetbrains.com/resharper/&#34; target=&#34;_blank&#34;&gt;ReSharper&lt;/a&gt; and
&lt;a href=&#34;https://www.jetbrains.com/decompiler/&#34; target=&#34;_blank&#34;&gt;dotPeek&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I started in Visual Studio with &lt;em&gt;File -&amp;gt; New -&amp;gt; Project…&lt;/em&gt;. I chose the template ASP .NET Web Application*. And then  among &lt;em&gt;ASP .NET 5 Templates&lt;/em&gt;, I selected the template &lt;em&gt;Web API&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/bearerTokenToApi/newProject.png&#34; alt=&#34;New Project&#34; title=&#34;New Project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I copied all the files from my previous experiments to the folder &lt;em&gt;wwwroot&lt;/em&gt;.
Next to the &lt;em&gt;ValuesController&lt;/em&gt; I created another API controller named &lt;em&gt;PublicValuesController&lt;/em&gt; with exactly the same content as the &lt;em&gt;ValuesController&lt;/em&gt;. I only changed the returned values to distinguish these controllers.  After this, the structure of my project looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/bearerTokenToApi/projectTree.png&#34; alt=&#34;Project tree&#34; title=&#34;Project tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, I installed all the necessary nuget packages so the dependencies in &lt;em&gt;project.json&lt;/em&gt; looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;quot;dependencies&amp;quot;: {
    &amp;quot;Microsoft.AspNet.Authentication.JwtBearer&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.AspNet.Diagnostics&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.AspNet.IISPlatformHandler&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.AspNet.Mvc&amp;quot;: &amp;quot;6.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.AspNet.Server.Kestrel&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.AspNet.StaticFiles&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.Extensions.Configuration.FileProviderExtensions&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging.Console&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
    &amp;quot;Microsoft.Extensions.Logging.Debug&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;em&gt;Startup&lt;/em&gt; class, the method &lt;em&gt;ConfigureServices&lt;/em&gt; looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddAuthentication();
    services.AddMvc();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And method &lt;em&gt;Configure&lt;/em&gt; looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{                        
    loggerFactory.AddConsole(Configuration.GetSection(&amp;quot;Logging&amp;quot;));
    loggerFactory.AddDebug();

    if (env.IsEnvironment(&amp;quot;Development&amp;quot;))
    {
        app.UseDeveloperExceptionPage();
    }

    app.UseIISPlatformHandler();
     
    app.UseDefaultFiles();
    app.UseStaticFiles();

    var options = new JwtBearerOptions
    {
        Authority = &amp;quot;https://accounts.google.com&amp;quot;,
        Audience = &amp;quot;342665198077-1fdticgpjke40gddj3r8vghltpgcvb5m.apps.googleusercontent.com&amp;quot;,
        RequireHttpsMetadata = false,
        AutomaticAuthenticate = true,
        AutomaticChallenge = false,
        TokenValidationParameters = new TokenValidationParameters
        {
            ValidIssuer = &amp;quot;accounts.google.com&amp;quot;
        }
    };

    app.UseJwtBearerAuthentication(options);

    app.UseMvc();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also granted access to &lt;em&gt;ValuesController&lt;/em&gt; only for authenticated user by adding attribute &lt;em&gt;Authorize&lt;/em&gt; on the class &lt;em&gt;ValuesController&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Route(&amp;quot;api/[controller]&amp;quot;)]
[Authorize]
public class ValuesController : Controller
{
///....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want, you can protect all controllers with the configuration in &lt;em&gt;ConfigureServices&lt;/em&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddAuthentication();
    services.AddMvc(config =&amp;gt;
    {
        var policy = new AuthorizationPolicyBuilder()
            .RequireAuthenticatedUser()
            .Build();
        config.Filters.Add(new AuthorizeFilter(policy));
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then add the attribute &lt;em&gt;AllowAnonymous&lt;/em&gt; on these controllers or methods which are accessible for unauthenticated users.&lt;br /&gt;
In my sample project, it didn’t matter because I had only two controllers.&lt;/p&gt;

&lt;p&gt;Having the setup ready meant I could get access to protected resources with the Google id token which I got using the library
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager&#34; target=&#34;_blank&#34;&gt;oidc-token-manager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After obtaining the token from Google by clicking &lt;em&gt;Get Token&lt;/em&gt; and then clicking &lt;em&gt;Protected&lt;/em&gt;, I got following response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/bearerTokenToApi/protectedValues.png&#34; alt=&#34;Protected values&#34; title=&#34;Protected values&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I clicked &lt;em&gt;Protected without token&lt;/em&gt; I got a response like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/bearerTokenToApi/notAuthorized.png&#34; alt=&#34;Not authorized&#34; title=&#34;Not authorized&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Through this sample application, I reached a conclusion. Yes, I know that I made a lot of assumptions which were not true, and I created a lot of simplifications for the purpose of testing but anyway I can get a protected resource with Google tokens fetched by the library &lt;em&gt;oidc-token-manager&lt;/em&gt;, which was my goal. My solution is absolutely unready to be used in production because of the token validation. I hardcoded a certificate to validate the token and this is not acceptable because these certificates change quite frequently. To validate tokens through a certificate fetched dynamically, requires me to change the library &lt;em&gt;oidc-token-manager&lt;/em&gt;. I don’t want to do this until I attempt other options.&lt;/p&gt;

&lt;p&gt;As I mentioned before, I used Visual Studio to create this sample application. I had to debug the 3rd party code a bit to finally get a configuration that works. Now that I have a working application, I can try it in another environment. Let’s see what’s happen when I run this project on Ubuntu. Will ASP .NET CORE turn out to be as portable as people say?
Please check out my
&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;next post&lt;/a&gt;
to find what happens when this app is run on Linux.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>oidc-token-manager library with Google Identity Platform - Part 2</title>
      <link>http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/</link>
      <pubDate>Mon, 11 Apr 2016 23:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is a continuation of the previous one
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;previous one&lt;/a&gt;
where I started to describe my attempt to use library &lt;em&gt;oidc-token-manager&lt;/em&gt; with Google Identity Platform.&lt;/p&gt;

&lt;p&gt;I was stuck at the moment when this library couldn’t validate a signature for an access token because of the unexpected format of the certs. I found in the documentation that I can provide certs for this library myself in the config and the library wouldn’t make a request for them.&lt;/p&gt;

&lt;p&gt;I did this in the &lt;em&gt;config&lt;/em&gt; property by specifying the value for the &lt;em&gt;jwks&lt;/em&gt; property. After this, &lt;em&gt;config&lt;/em&gt; in &lt;em&gt;index.html&lt;/em&gt; looked like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
   authority: &amp;quot;https://accounts.google.com&amp;quot;,
   client_id: &amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;,
   redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/callback.html&amp;quot;,
   post_logout_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/index.html&amp;quot;,
   response_type: &amp;quot;id_token token&amp;quot;,
   scope: &amp;quot;email&amp;quot;,
   silent_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/frame.html&amp;quot;,
   popup_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/popup.html&amp;quot;,
   jwks: {
       keys: [{
           kty: &amp;quot;RSA&amp;quot;,
           x5c: [&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIIUQ9p7LoIOI8wD …[removded for brevity ]... eTh45xGznVwh8\n-----END CERTIFICATE-----\n&amp;quot;]
       }]
   },
   silent_renew: true
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and in the &lt;em&gt;callback.html&lt;/em&gt;, &lt;em&gt;config&lt;/em&gt; looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
   authority: &amp;quot;https://accounts.google.com&amp;quot;,
   client_id: &amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;,
   jwks: {
       keys: [{
           kty: &amp;quot;RSA&amp;quot;,
           x5c:  [&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIIUQ9p7LoIOI8wD …[removded for brevity ]... eTh45xGznVwh8\n-----END CERTIFICATE-----\n&amp;quot;]
       }]
   },
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found a value for this &lt;em&gt;x5c&lt;/em&gt; property requesting this url
&lt;a href=&#34;https://www.googleapis.com/oauth2/v1/certs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.googleapis.com/oauth2/v1/certs&#34;&gt;https://www.googleapis.com/oauth2/v1/certs&lt;/a&gt;&lt;/a&gt;
and this url I found in the file downloaded from Google Developer Console, which I used in the previous post to get the &lt;em&gt;client_id&lt;/em&gt;.
You can read
&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;here&lt;/a&gt;
how I got it. (link).
Hardcoding the value for &lt;em&gt;x5c&lt;/em&gt; is a very bad solution because Google often changes certs but for testing it&amp;rsquo;s sufficient for me.&lt;/p&gt;

&lt;p&gt;After this, when I opened the application I got this screen: [networkError.png]&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/networkError.png&#34; alt=&#34;Network error&#34; title=&#34;Network error&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the web browser console showed me this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/userInfo404.png&#34; alt=&#34;Userinfo 404&#34; title=&#34;Userinfo 404&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This error came from a request for userinfo. Fortunately, I don’t need to get a user profile. All I need to know about the user is their email and it is in the token. So I can turn off loading the user profile with this option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;load_user_profile : false,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this option set to &lt;em&gt;false&lt;/em&gt;, the &lt;em&gt;oidc-token-manager&lt;/em&gt; library won’t send requests to Google for a user profile. After this, another attempt to get a token resulted in the
following message in the browser console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/profileFalseResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I could see my token was also in the local storage of the browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/tokenInLocalStorage.png&#34; alt=&#34;Token in local storage&#34; title=&#34;Token in local storage&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I got a token from Google Identity Provider and I could use it to get access to the API but my solution is far from perfect.&lt;/p&gt;

&lt;p&gt;I made a dangerous assumption in the configuration of &lt;em&gt;oidc-token-manager&lt;/em&gt;.
While fetching certs from this url &lt;a href=&#34;https://www.googleapis.com/oauth2/v1/certs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.googleapis.com/oauth2/v1/certs&#34;&gt;https://www.googleapis.com/oauth2/v1/certs&lt;/a&gt;&lt;/a&gt;, I got a response like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;8087d258ac19c0fcf1dab7a908c221cdd81d5512&amp;quot;: &amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIIBzgwCmlF7SMwDQYJKoZIhvcNAQEFBQAwNjE0MDIGA1UE\nAxMrZmVkZXJhdGVkLXNpZ25vbi5zeXN0ZW0uZ3NlcnZpY … [removed for brevity]... ]eOV9CqsTSJCZ9baLqF4wk6botNe187A88wnj5OVbyoVZK4SMW\n-----END CERTIFICATE-----\n&amp;quot;,
  &amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;: &amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIIUQ9p7LoIOI8wDQYJKoZIhvcNAQEFB …[removed for brevity]... xcOKB6l8wBqKDmyc1aMXZ+H0WkBgvcEHqeTh45xGznVwh8\n-----END CERTIFICATE-----\n&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I assumed that the second cert was the right one to validate the token. I chose the second one because the first one didn’t work. Instead of this, I should have made a choice dependent on the value provided in the token header which looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;alg&amp;quot;:&amp;quot;RS256&amp;quot;,&amp;quot;kid&amp;quot;:&amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The property &lt;em&gt;kid&lt;/em&gt; indicates that in the object with certs, I should use the one with the property like the &lt;em&gt;kid&lt;/em&gt; value. I discovered that this was the second property but it won’t always be true. I should choose a certificate dynamically but I didn’t want to change source code of the library &lt;em&gt;oidc-token-manager&lt;/em&gt;, so that’s why I hardcoded it.&lt;/p&gt;

&lt;p&gt;An authentication is a non-trivial challenge for any app. Many developers have tools and techniques they trust for building traditional (page-by-page) auth flows.
I thought for a while about building a traditional membership system but I finally decided to try something different. We’ll see the consequences of my choices in the future. For now, I have proven that I can obtain access tokens from Google using the library &lt;em&gt;oidc-token-manager&lt;/em&gt;, but the implementation isn’t perfect.
If I want to use this library, I would have to change it a bit. I don’t want to do this until
I check other possibilities. Future posts will be about the further exploration of
the web client authentication with Google Identity Provider.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>oidc-token-manager library with Google Identity Platform - Part 1</title>
      <link>http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/</link>
      <pubDate>Thu, 07 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I stated in this
&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;post&lt;/a&gt;,
I am going to write a series of posts about auth stuff.
This post will be the second in this series and I am describing my experiences trying to use the library
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager&#34; target=&#34;_blank&#34;&gt;oidc-token-manager&lt;/a&gt;
to get tokens from the Google Identity Platform.&lt;/p&gt;

&lt;p&gt;As I mentioned before, I want to have a single page application which gets tokens from
Identity Provider and sends them to REST API to get access to resources.&lt;/p&gt;

&lt;p&gt;To validate this solution, I was searching for a pure javascript library which allows me to get a token from OpenId Connect Identity Provider, refreshes this token (yes, even in implicit flow), gives me access to some information from it, stores this token and destroys it on my request.&lt;/p&gt;

&lt;p&gt;I was looking for a library which fulfills my needs and I found one.
It is called &lt;em&gt;oidc-token-manager&lt;/em&gt;. This library has everything what I want:
Redirects for token&lt;br /&gt;
Processes token&lt;br /&gt;
Removes token&lt;br /&gt;
Renews token&lt;/p&gt;

&lt;p&gt;But this library is dedicated for
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer3&#34; target=&#34;_blank&#34;&gt;IdentityServer&lt;/a&gt;
which is a .NET implementation of protocols like
&lt;a href=&#34;http://openid.net/connect/&#34; target=&#34;_blank&#34;&gt;OpenID Connect&lt;/a&gt; and
&lt;a href=&#34;http://oauth.net/2/&#34; target=&#34;_blank&#34;&gt;OAuth2&lt;/a&gt;.
I wanted to use it with Google not with IdentityServer, but Google Identity Provider is also compatible with
OpenID Connect and OAuth2. There was hope and below I have written about how I verified this hope.&lt;/p&gt;

&lt;p&gt;I didn’t use my Notifier project to test this library. I did this with a small sample application, so let’s jump right into it and see how it looked.&lt;/p&gt;

&lt;p&gt;The library &lt;em&gt;oidc-token-manager&lt;/em&gt; has a nice
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager/tree/master/sample/vs&#34; target=&#34;_blank&#34;&gt;sample project&lt;/a&gt;
in its repository. I used it as a starting point.&lt;/p&gt;

&lt;p&gt;I created a new folder (&lt;code&gt;mkdir NotifierDemo&lt;/code&gt;) and inside it I copied everything what was in
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager/tree/master/sample/vs/Sample&#34; target=&#34;_blank&#34;&gt;this folder&lt;/a&gt;.
I removed all the stuff related to Visual Studio. My file structure looked like this in
&lt;a href=&#34;https://www.jetbrains.com/webstorm/&#34; target=&#34;_blank&#34;&gt;WebStorm&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/fileTree.png&#34; alt=&#34;File tree&#34; title=&#34;File tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I needed a server to host my application and I decided to use a simple &lt;em&gt;Node.js&lt;/em&gt; server called
&lt;a href=&#34;https://www.npmjs.com/package/http-server&#34; target=&#34;_blank&#34;&gt;http-server&lt;/a&gt;
but first I had to create a &lt;em&gt;package.json&lt;/em&gt; file. I did this using &lt;code&gt;npm init&lt;/code&gt;, after answering every question I had the file &lt;em&gt;package.json&lt;/em&gt; inside my project.&lt;/p&gt;

&lt;p&gt;Then I installed &lt;em&gt;http-server&lt;/em&gt; and saved it as a development dependency using this command: &lt;code&gt;npm install http-server --save-dev&lt;/code&gt;.
Then I added script &lt;em&gt;dev&lt;/em&gt; to &lt;em&gt;package.json&lt;/em&gt; so the &lt;em&gt;scripts&lt;/em&gt; section looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
 &amp;quot;dev&amp;quot;: &amp;quot;http-server -p 5000&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The option &lt;em&gt;-p&lt;/em&gt; is a port on which the server will be running. I had to set this port to 5000 because I specified it for my client in the Google Developer Console.&lt;/p&gt;

&lt;p&gt;Now I ready to start connecting my application with Google Identity Provider.&lt;/p&gt;

&lt;p&gt;I started in the file &lt;em&gt;index.html&lt;/em&gt; and his file has a &lt;em&gt;config&lt;/em&gt; variable which contains the whole configuration for &lt;em&gt;oidc-token-manager&lt;/em&gt;. I had the setting needed for this configuration in the file which I downloaded at the end of the
&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;previous post&lt;/a&gt;.
This file looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;web&amp;quot;:{&amp;quot;client_id&amp;quot;:&amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;,&amp;quot;project_id&amp;quot;:&amp;quot;notifierdemo-1268&amp;quot;,&amp;quot;auth_uri&amp;quot;:&amp;quot;https://accounts.google.com/o/oauth2/auth&amp;quot;,&amp;quot;token_uri&amp;quot;:&amp;quot;https://accounts.google.com/o/oauth2/token&amp;quot;,&amp;quot;auth_provider_x509_cert_url&amp;quot;:&amp;quot;https://www.googleapis.com/oauth2/v1/certs&amp;quot;,&amp;quot;client_secret&amp;quot;:&amp;quot;jDvSf78IkYDGEw9FI_gnXEnZ&amp;quot;,&amp;quot;redirect_uris&amp;quot;:[&amp;quot;http://localhost:5000/callback.html&amp;quot;],&amp;quot;javascript_origins&amp;quot;:[&amp;quot;http://localhost:5000&amp;quot;]}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I took &lt;em&gt;client_id&lt;/em&gt; which was in the property with the same name. I also changed &lt;em&gt;scope&lt;/em&gt; in &lt;em&gt;config&lt;/em&gt; and only left &lt;em&gt;email&lt;/em&gt; in &lt;em&gt;scope&lt;/em&gt; and I set &lt;em&gt;authority&lt;/em&gt; property. At this stage, my &lt;em&gt;config&lt;/em&gt; in &lt;em&gt;index.html&lt;/em&gt; looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
    authority: &amp;quot;https://accounts.google.com&amp;quot;,
    client_id: &amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;,
    redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/callback.html&amp;quot;,
    post_logout_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/index.html&amp;quot;,
    response_type: &amp;quot;id_token token&amp;quot;,
    scope: &amp;quot;email&amp;quot;,
    silent_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/frame.html&amp;quot;,
    popup_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/popup.html&amp;quot;,
    silent_renew: true
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also set &lt;em&gt;authority&lt;/em&gt; and &lt;em&gt;client_id&lt;/em&gt; in the &lt;em&gt;config&lt;/em&gt; variable in &lt;em&gt;callback.html&lt;/em&gt; so it looks like this;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
    authority: &amp;quot;https://accounts.google.com&amp;quot;,
    client_id: &amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seemed to me that I was ready, so I ran my application with the command &lt;code&gt;npm run dev&lt;/code&gt;.
I navigated in the browser to &lt;em&gt;&lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;&lt;/em&gt; and I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/appWindow.png&#34; alt=&#34;Application Window&#34; title=&#34;Application Window&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked on the &lt;em&gt;Get Token&lt;/em&gt; button. And nothing happened. And then the investigation began.
I opened a browser console and saw:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/AllowOriginHeader.png&#34; alt=&#34;Not allowed access&#34; title=&#34;Not allowed access&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a well known issue. You can read a lot about it on the Internet.
To get rid of it quickly I used this
&lt;a href=&#34;https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en-US&#34; target=&#34;_blank&#34;&gt;chrome extension&lt;/a&gt;.
This extension gave me a button which allows me to enable cross-origin resource sharing.
This was a very ugly solution but for my testing purposes I accepted it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/crossOriginSharingExtension.png&#34; alt=&#34;Enable cross-origin resource sharing&#34; title=&#34;Enable cross-origin resource sharing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After enabling cross-origin resource sharing. I navigated to &lt;em&gt;&lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;&lt;/em&gt; again and I clicked on the &lt;em&gt;Get Token&lt;/em&gt; button once more. And this time I got following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/notifierDemoWouldLikeTo.png&#34; alt=&#34;NotifierDemo would like to&#34; title=&#34;NotifierDemo would like to&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking &lt;em&gt;Allow&lt;/em&gt; I got this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/rsaKeysEmpty.png&#34; alt=&#34;RSA keys empty&#34; title=&#34;RSA keys empty&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After spending some time debugging, I finally got my answer. The library &lt;em&gt;oidc-token-manager&lt;/em&gt; fetches metadata from a &lt;em&gt;.well-known&lt;/em&gt; url. It is specified in the
&lt;a href=&#34;https://openid.net/specs/openid-connect-discovery-1_0.html&#34; target=&#34;_blank&#34;&gt;OpenID Connect Discovery 1.0&lt;/a&gt;
and in the case of Google, it looks like this
&lt;a href=&#34;https://accounts.google.com/.well-known/openid-configuration&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://accounts.google.com/.well-known/openid-configuration&#34;&gt;https://accounts.google.com/.well-known/openid-configuration&lt;/a&gt;&lt;/a&gt;.
The response from Google &lt;em&gt;.well-known&lt;/em&gt; url provides among others this property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;jwks_uri&amp;quot;: &amp;quot;https://www.googleapis.com/oauth2/v3/certs&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this url: &lt;em&gt;&lt;a href=&#34;https://www.googleapis.com/oauth2/v3/certs&#34;&gt;https://www.googleapis.com/oauth2/v3/certs&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;oidc-token-manager&lt;/em&gt; fetches the necessary certificates to validate the tokens.  This library assumes that the information about certs is provided as an object something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;keys&amp;quot;: [{
    &amp;quot;kty&amp;quot;: &amp;quot;RSA&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,
    &amp;quot;use&amp;quot;: &amp;quot;sig&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;8087d258ac19c0fcf1dab7a908c221cdd81d5512&amp;quot;,
“x5c”:[&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAgwIBA… [removed for brevity] ...ZTRsIQWyJ4hUP\n-----END CERTIFICATE-----\n&amp;quot;,
  &amp;quot;c8f37d70371587d2aaae3bbff624cc865ef10575&amp;quot;: &amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg… [removed for brevity]  ...CAVCztq15Z\n-----END CERTIFICATE-----\n&amp;quot;
]
  }, {
    &amp;quot;kty&amp;quot;: &amp;quot;RSA&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,
    &amp;quot;use&amp;quot;: &amp;quot;sig&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;,
    “x5c”:[&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAgwIBA… [removed for brevity] ...ZTRsIQWyJ4hUP\n-----END CERTIFICATE-----\n&amp;quot;,
  &amp;quot;c8f37d70371587d2aaae3bbff624cc865ef10575&amp;quot;: &amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg… [removed for brevity]  ...CAVCztq15Z\n-----END CERTIFICATE-----\n&amp;quot;
] }]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But Google provides the following structure of information about certificates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;keys&amp;quot;: [{
    &amp;quot;kty&amp;quot;: &amp;quot;RSA&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,
    &amp;quot;use&amp;quot;: &amp;quot;sig&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;8087d258ac19c0fcf1dab7a908c221cdd81d5512&amp;quot;,
    &amp;quot;n&amp;quot;: &amp;quot;pmYJZAbSY2L …[removed for brevity]... 9dQNxhFaixl4BgqjaP9onw&amp;quot;,
    &amp;quot;e&amp;quot;: &amp;quot;AQAB&amp;quot;
  }, {
    &amp;quot;kty&amp;quot;: &amp;quot;RSA&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,
    &amp;quot;use&amp;quot;: &amp;quot;sig&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;,
    &amp;quot;n&amp;quot;: &amp;quot;pqLUr6XU-Ut4z_JS- …[removed for brevity]... H1QWo8bs2SXo3w&amp;quot;,
    &amp;quot;e&amp;quot;: &amp;quot;AQAB&amp;quot;
  }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The missing part is property &lt;em&gt;x5c&lt;/em&gt;. In this property, there is a public key needed to validate the signature of the tokens.
Google provides  a modulus(n) and an exponent(e) RSA public key but library &lt;em&gt;oidc-token-manager&lt;/em&gt; expects a PEM key which looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAgwIBA… [removed for brevity] ...ZTRsIQWyJ4hUP\n-----END CERTIFICATE-----\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also found that Google provides the following information in the header part of the JSON Web Token.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;alg&amp;quot;:&amp;quot;RS256&amp;quot;,&amp;quot;kid&amp;quot;:&amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The property &lt;em&gt;kid&lt;/em&gt; indicates which public key from &lt;a href=&#34;https://www.googleapis.com/oauth2/v3/certs&#34;&gt;https://www.googleapis.com/oauth2/v3/certs&lt;/a&gt;, should be used to validate the signature. As it is an array of keys, you must choose one. The library &lt;em&gt;oidc-token-manager&lt;/em&gt; always takes the first one.&lt;/p&gt;

&lt;p&gt;I managed to get access token from Google Identity Provider using library &lt;em&gt;oidc-token-manager&lt;/em&gt;
but I couldn’t validate its signature because of the format of the certs returned from Google
but there must be a way to handle this kind of situation. However, I’ll write about this in the
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;next post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up the Web client for Google Identity Platform</title>
      <link>http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/</link>
      <pubDate>Mon, 04 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poz  nać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, I thought about a membership system in my application. I considered many options and during my research I tested many solutions, and gained some knowledge. The results from my initial search didn’t pan out as planned, so I’ll have to share my results in a series of posts, and this post will be part one.&lt;/p&gt;

&lt;p&gt;One of my ideas was not having a membership system at all and delegating this to a well known identity provider like Google or Facebook. I also wanted to have my application as a pure API with SPA client and moreover I wanted to have a stateless application. I didn’t want to have any sessions on the server side. So this problem requires me to use a bearer token authentication with implicit flow where a browser client gets an access token from Identity Provider and passes it to the API in every request. API validates this token and grants access or not to its resources.&lt;/p&gt;

&lt;p&gt;Before I start my work I must choose Identity Provider. I decided to use Google Identity Provider Platform, and then I must register a web application in this Platform.&lt;/p&gt;

&lt;p&gt;To create a web application client, I entered the
&lt;a href=&#34;https://console.developers.google.com&#34; target=&#34;_blank&#34;&gt;Google Developers Console&lt;/a&gt;
and then I chose &lt;em&gt;Create a project&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/createProject.png&#34; alt=&#34;Create a project&#34; title=&#34;Create a project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I specified &lt;em&gt;Project name&lt;/em&gt; and clicked &lt;em&gt;Create&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/newProject.png&#34; alt=&#34;New Project&#34; title=&#34;New Project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After a while my new application was visible in the &lt;em&gt;Dashboard&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/dashboardWithNew.png&#34; alt=&#34;Dashboard&#34; title=&#34;Dashboard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked on &lt;em&gt;Enable and manage APIs&lt;/em&gt; and after I saw this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/apiManager.png&#34; alt=&#34;Api Manager&#34; title=&#34;Api Manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the left side, I can see a menu option &lt;em&gt;Credentials&lt;/em&gt; I clicked on this option and I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/credentialsApiManager.png&#34; alt=&#34;Credentials tab&#34; title=&#34;Credentials tab&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked on the middle tab named &lt;em&gt;OAuth consent screen&lt;/em&gt; and in the form I entered only a &lt;em&gt;Product name shown to users&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/consentScreen.png&#34; alt=&#34;OAuth consent screen&#34; title=&#34;OAuth consent screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I clicked &lt;em&gt;Save&lt;/em&gt;. After this, I was redirect back to the first tab: &lt;em&gt;Credentials&lt;/em&gt;. On this tab, I clicked &lt;em&gt;Create credentials&lt;/em&gt; I saw the following choices:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/createCredentialsChoices.png&#34; alt=&#34;Create Credentials Choices&#34; title=&#34;Create Credentials Choices&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I chose &lt;em&gt;OAuth client ID&lt;/em&gt;. Then on the next screen I selected &lt;em&gt;Web application&lt;/em&gt; as a &lt;em&gt;Application type&lt;/em&gt; and I put name and urls.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/createClientId.png&#34; alt=&#34;Create ClientId&#34; title=&#34;Create ClientId&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I clicked “Create” I saw this popup window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/popupOAuthClient.png&#34; alt=&#34;OAuth Client&#34; title=&#34;OAuth Client&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t bother to copy this, since I got this letter in another form. I just clicked &lt;em&gt;OK&lt;/em&gt; and I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/OAuth20ClientIds.png&#34; alt=&#34;OAuth client ids&#34; title=&#34;OAuth client ids&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the right side, I had a download icon (see red ellipse in the picture above). I clicked on it and the window to save file opened:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/saveFile.png&#34; alt=&#34;Save file&#34; title=&#34;Save file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I saved this file and I will return to it later in the next post.&lt;/p&gt;

&lt;p&gt;After this, Client for Google APIs was now ready to use and now I must create an application for it. As I mentioned before, this post is the first part about auth things.
In the &lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;next post&lt;/a&gt;,
I will continue this theme and I hope, I’ll show finally some code.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Publishing to Azure</title>
      <link>http://koscielniak.me/post/2016/03/publishing-to-azure/</link>
      <pubDate>Thu, 31 Mar 2016 22:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/publishing-to-azure/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the
&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;last post&lt;/a&gt;,
I wrote how I prepared my application to be ready for publishing. In this post, I am going to write about how I published my application to Azure. I believe that my client should see the results of my work as quickly as possible. For my project, I only have an Imaginary Client but imaginary or not they also deserve respect.&lt;/p&gt;

&lt;p&gt;To publish my application to Azure, I went through following steps.&lt;/p&gt;

&lt;p&gt;After I logged into the
&lt;a href=&#34;https://portal.azure.com&#34; target=&#34;_blank&#34;&gt;Azure Portal&lt;/a&gt;, I clicked on the &lt;em&gt;New&lt;/em&gt; button in the top left corner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/azureNew.png&#34; alt=&#34;New&#34; title=&#34;New&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I chose &lt;em&gt;Web + Mobile&lt;/em&gt; and after this I clicked on &lt;em&gt;Web App&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/webMobileWebApp.png&#34; alt=&#34;New Web App&#34; title=&#34;New Web App&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This gave me a window where I could specify the App name, Subscription, Resource group and App Service plan.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/newApp.png&#34; alt=&#34;New Web App name&#34; title=&#34;New Web App name&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I clicked &lt;em&gt;Create&lt;/em&gt;, it took a while to create my brand new application.&lt;/p&gt;

&lt;p&gt;After this, I navigated to the application settings and inside, I chose &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Deployment Source&lt;/em&gt; &amp;gt; &lt;em&gt;Configure required settings&lt;/em&gt; &amp;gt; &lt;em&gt;Local Git Repository&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/deploymentSource.png&#34; alt=&#34;Deployment source&#34; title=&#34;Deployment source&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I clicked &lt;em&gt;Ok&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After this, I navigated to &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Deployment credentials&lt;/em&gt; and I set up a deployment user by entering a username and password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/deploymentCredentials.png&#34; alt=&#34;Deployment credentials&#34; title=&#34;Deployment credentials&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This time the save button was at the top of this window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/saveCredentialsButton.png&#34; alt=&#34;Save credentials button&#34; title=&#34;Save credentials button&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then inside &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Properties&lt;/em&gt; I found &lt;em&gt;GIT URL&lt;/em&gt; which is the url to the git repository where I should publish source code using credentials specified in &lt;em&gt;Deployment credentials&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/gitUrl.png&#34; alt=&#34;Git url&#34; title=&#34;Git url&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I added this repository as another remote in my local git repository by issuing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add azure [GIT URL]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where [GIT URL] is the url copied from the Azure portal.&lt;/p&gt;

&lt;p&gt;Then I entered in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push -u azure master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After I entered this company, I was prompted to enter my password and the deployment process began. It took quite a lot of time before I was able to see my application in the browser. I found the public address of my application in &lt;em&gt;Settings&lt;/em&gt; -&amp;gt; &lt;em&gt;Properties&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/appAddress.png&#34; alt=&#34;Application url&#34; title=&#34;Application url&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After I clicked on it, I could see my application hosted as a Web App in Azure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I was really surprised that the process of deployment to Azure was very easy and relatively intuitive. What surprised me the most was that Azure discovered where my web project was in the repository structure of folders. I like these kinds of things. Big kudos to the Azure team for this.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>Before going into production</title>
      <link>http://koscielniak.me/post/2016/03/before-going-into-production/</link>
      <pubDate>Mon, 28 Mar 2016 22:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/before-going-into-production/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have been dealing with my project for a while and I haven’t shown anything to my Imaginary Client. They are starting to think that I haven’t done anything but burn their Imaginary Money. But I have done something. I have written posts, I have done research and I have learned a lot new things. To convince my Imaginary Client that I haven’t wasted their Imaginary Money I should quickly deploy something to production but before I do this I should tune my application a bit.&lt;/p&gt;

&lt;p&gt;The first thing I did was update Angular 2. There have been two new versions since I started this series. You can check this by command  &lt;code&gt;npm outdated&lt;/code&gt; executed in terminal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/npmOutdated.png&#34; alt=&#34;npm outdated output&#34; title=&#34;npm outdated output&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It turned out that not only was Angular 2 outdated, but 5 other packages were outdated as well.
I changed the versions of every outdated package in &lt;em&gt;package.json&lt;/em&gt; to the newest one and after this I executed &lt;code&gt;npm update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, I added some npm packages by entering this in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install concurrently event-stream gulp-sourcemaps gulp-typescript gulp-inline-ng2-template --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package &lt;em&gt;concurrently&lt;/em&gt; I used in my &lt;code&gt;postinstall&lt;/code&gt; script in &lt;em&gt;package.json&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
 //...
 &amp;quot;build-dev&amp;quot;:&amp;quot;gulp build-dev&amp;quot;,
 &amp;quot;postinstall&amp;quot;: &amp;quot;concurrently \&amp;quot;typings install\&amp;quot; \&amp;quot;npm run build-dev\&amp;quot;&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now every time I execute &lt;code&gt;npm install&lt;/code&gt; the &lt;em&gt;typings&lt;/em&gt; will be installed and my &lt;em&gt;build-dev&lt;/em&gt; gulp task will be executed.&lt;/p&gt;

&lt;p&gt;The package &lt;em&gt;event-stream&lt;/em&gt; is what I needed to merge the streams into one and return it for further processing.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;gulp-sourcemaps&lt;/em&gt; package generates source maps that are embedded in the source file. Something like this is added at the bottom of every &lt;code&gt;.js&lt;/code&gt; file created from a TypeScript file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9tYWlu….
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package &lt;em&gt;gulp-typescript&lt;/em&gt; is used to compile TypeScript files.&lt;/p&gt;

&lt;p&gt;Finally, this package &lt;em&gt;gulp-inline-ng2-template&lt;/em&gt; inlines HTML and CSS files into the JavaScript files of Angular 2 components.&lt;/p&gt;

&lt;p&gt;All the packages I combined in one gulp task that looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;build-prod&#39;, [&#39;build.lib&#39;], function () {
   var tsProject = typescript.createProject(&#39;./tsconfig.json&#39;, { typescript: require(&#39;typescript&#39;) });
   var tsSrcInlined = gulp.src([webroot + &#39;**/*.ts&#39;], { base: webroot })
       .pipe(inlineNg2Template({ base: webroot }));
   return eventStream.merge(tsSrcInlined, gulp.src([&#39;typings/browser/**/*.ts&#39;,&#39;typings/browser.d.ts&#39;]))
       .pipe(sourcemaps.init())
       .pipe(typescript(tsProject))
       .pipe(sourcemaps.write())
       .pipe(gulp.dest(webroot))
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This task complies all TypeScript files in my application and inlines source maps, CSS styles and HTML templates inside components and saves all the process files inside &lt;em&gt;wwwroot&lt;/em&gt; folder. This processing reduces the number of requests to my application. I know in the HTTP2 world it won’t be needed, but as far as I know, kestrel doesn’t have support for HTTP2 yet.&lt;/p&gt;

&lt;p&gt;The next thing which I did was a conditional import of Javascript and CSS files. Dependent on the environment, I loaded them either
from
&lt;a href=&#34;https://en.wikipedia.org/wiki/Content_delivery_network&#34; target=&#34;_blank&#34;&gt;CDN&lt;/a&gt;
for production or from local for development environment. An example how I did this in the file
&lt;a href=&#34;https://github.com/pikoscielniak/notifier/blob/master/src/web/Views/Shared/_Layout.cshtml&#34; target=&#34;_blank&#34;&gt;_Layout.cshtml&lt;/a&gt;
looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;environment names=&amp;quot;Development&amp;quot;&amp;gt;
            &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;lib/material-design-lite/dist/material.blue-teal.min.css&amp;quot;&amp;gt;
            &amp;lt;script src=&amp;quot;lib/material-design-lite/material.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;/environment&amp;gt;
        &amp;lt;environment names=&amp;quot;Staging,Production&amp;quot;&amp;gt;            
            &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://code.getmdl.io/1.1.3/material.blue-teal.min.css&amp;quot;
             asp-fallback-href=&amp;quot;lib/material-design-lite/dist/material.blue-teal.min.css&amp;quot;
             asp-fallback-test-class=&amp;quot;mdl-ripple&amp;quot; /&amp;gt;
            &amp;lt;script src=&amp;quot;https://code.getmdl.io/1.1.3/material.min.js&amp;quot;
                    asp-fallback-src=&amp;quot;lib/material-design-lite/material.min.js&amp;quot;
                    asp-fallback-test=&amp;quot;window.componentHandler&amp;quot;&amp;gt;
            &amp;lt;/script&amp;gt;
          &amp;lt;/environment&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An &lt;em&gt;environment&lt;/em&gt; tag is a new thing in ASP .NET Core and you can find out more about it
&lt;a href=&#34;http://docs.asp.net/en/latest/fundamentals/environments.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
As you can see, I used a fallback test to check if loading assets from CDN succeeded, if not, I loaded the local files.
I did something similar in the
&lt;a href=&#34;https://github.com/pikoscielniak/notifier/blob/master/src/web/Views/Home/Index.cshtml&#34; target=&#34;_blank&#34;&gt;Home/Index.cshtml&lt;/a&gt;
file which you can see in my github repository.&lt;/p&gt;

&lt;p&gt;In this file, I also turned on production mode in Angular 2 by executing the following script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  System.import(&#39;angular2/core&#39;)
            .then(function(core){
                    core.enableProdMode();
                    return System.import(&#39;./app/main&#39;);
            })
            .catch(console.log.bind(console));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to have this tag &lt;em&gt;environment&lt;/em&gt; working properly, I had to add this package
&lt;em&gt;Microsoft.AspNet.Mvc.TagHelpers&lt;/em&gt; to dependencies in &lt;em&gt;project.json&lt;/em&gt;
and in the file &lt;em&gt;_ViewImports.cshtml&lt;/em&gt; I added following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@addTagHelper &amp;quot;*, Microsoft.AspNet.Mvc.TagHelpers&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To see this tag in action, I must run my application in development mode. By default, &lt;code&gt;dnx web&lt;/code&gt; command runs an application in a production environment, so, to run the application in development mode I could do this by executing this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env ASPNET_ENV=”Development” dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, you can see that in development, my files are served from localhost:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/localFile.png&#34; alt=&#34;assets from local&#34; title=&#34;assets from local&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To test the production mode, I published my application in the local folder on my computer by entering the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnu publish -o ~/publishednotifier
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;~/publishednotifier&lt;/em&gt; - it is the folder where my application will be published.&lt;/p&gt;

&lt;p&gt;Inside this folder, there is another folder called &lt;em&gt;approot&lt;/em&gt; where I can find scripts for every command declared in the section &lt;em&gt;commands&lt;/em&gt; in &lt;em&gt;project.json&lt;/em&gt; file. I had only one command &lt;em&gt;web&lt;/em&gt;.
Entering this command in terminal  ( &lt;code&gt;~/publishednotifier/approot/web&lt;/code&gt;) ran my application and I could see this in a web browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I could see in the debug tool of the browser that my files are loaded from the CDN.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/loadedFromCdn.png&#34; alt=&#34;Loaded form CDN&#34; title=&#34;Loaded form CDN&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I left space for further improvement in my project setup but I will leave the details for another post where I’ll write about package &lt;em&gt;Microsoft.AspNet.AngularServices&lt;/em&gt;.
Now, I am ready to publish my application to
&lt;a href=&#34;https://azure.microsoft.com&#34; target=&#34;_blank&#34;&gt;Azure&lt;/a&gt;. In the next post, I am going to write about what this process looked like.
&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular 2 Confirm Dialog Component</title>
      <link>http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/</link>
      <pubDate>Thu, 24 Mar 2016 22:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is a continuation of the &lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;previous one&lt;/a&gt;.
I must honestly say that while writing this post I felt a bit guilty because I wrote about
something which I created in my project but I don’t need yet. I believe in
&lt;em&gt;You Aren&amp;rsquo;t Gonna Need It&lt;/em&gt; but while writing this post I violated my belief.
I described in this post how I created an Angular 2 confirm dialog component by wrapping a
Material Design Lite (MDL) dialog component. I feel awkward because I don’t need this component yet.
I didn’t have a use case for this component. I implemented it upfront which was a violation of
the YAGNI rule. Yes, I am aware of this. To justify my actions, I have only one reason:
it would be nice to implement this component and write about it now because it corresponds
with my previous
post and it&amp;rsquo;s quite likely that I will need this component in the future so my work won’t be wasted.&lt;/p&gt;

&lt;p&gt;The first thing I did was to create the following structure of folders and files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/confirm/appStructure.png&#34; alt=&#34;Folders tree&#34; title=&#34;Folders tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I added the following content to my &lt;em&gt;confirm.component.html&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;confirmationModal&amp;quot; class=&amp;quot;dialog-container&amp;quot;&amp;gt;
   &amp;lt;div class=&amp;quot;mdl-card mdl-shadow--16dp&amp;quot;&amp;gt;
       &amp;lt;h5&amp;gt;{{title}}&amp;lt;/h5&amp;gt;
       &amp;lt;p&amp;gt;{{message}}&amp;lt;/p&amp;gt;
       &amp;lt;div class=&amp;quot;mdl-card__actions dialog-button-bar&amp;quot;&amp;gt;
           &amp;lt;button class=&amp;quot;mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect&amp;quot; id=&amp;quot;cancelButton&amp;quot;
                   data-upgraded=&amp;quot;,MaterialButton,MaterialRipple&amp;quot;&amp;gt;{{cancelText}}&amp;lt;span
                   class=&amp;quot;mdl-button__ripple-container&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;mdl-ripple&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
           &amp;lt;/button&amp;gt;
           &amp;lt;button class=&amp;quot;mdl-button mdl-button--accent mdl-button--raised mdl-js-button mdl-js-ripple-effect&amp;quot;
                   id=&amp;quot;okButton&amp;quot; data-upgraded=&amp;quot;,MaterialButton,MaterialRipple&amp;quot;&amp;gt;{{okText}}&amp;lt;span
                   class=&amp;quot;mdl-button__ripple-container&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;mdl-ripple&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
           &amp;lt;/button&amp;gt;
       &amp;lt;/div&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing special here. You can find out more about MDL dialogs
&lt;a href=&#34;https://www.getmdl.io/components/index.html#dialog-section&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll be using this dialog through the service which is defined in the file &lt;em&gt;confirm.service.ts&lt;/em&gt;
and the whole file looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import {Injectable} from &amp;quot;angular2/core&amp;quot;;

@Injectable()
export class ConfirmService {
   activate: (message?: string, title?: string) =&amp;gt; Promise&amp;lt;boolean&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see there is only one property in the class &lt;em&gt;ConfirmService&lt;/em&gt; which has type function.
This function takes two optional string parameters: message and title and returns
Promise of type boolean which will indicate of course whether a user confirms something or not.
I’ll assign value to this property in the
&lt;em&gt;ConfirmComponent&lt;/em&gt; constructor which you will see in a minute.&lt;/p&gt;

&lt;p&gt;If you wonder what &lt;em&gt;@Injectable()&lt;/em&gt; means, it’s a decorator.
This decorator is required if you have any dependencies in your service.
In my case, this isn’t true but it is recommended to always decorate services with this decorator.
You can read about it
&lt;a href=&#34;https://angular.io/docs/ts/latest/guide/dependency-injection.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The key part is in the &lt;em&gt;confirm.component.ts&lt;/em&gt; file.
I am not going to show this whole file here, you can see it at this
&lt;a href=&#34;https://github.com/pikoscielniak/notifier/blob/master/src/web/wwwroot/app/shared/confirm/confirm.component.ts&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.
But I wrote about the crucial parts of this component. One of them is constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;constructor(confirmService:ConfirmService) {
   confirmService.activate = this.activate.bind(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the constructor, I assigned a function to the property &lt;em&gt;activate&lt;/em&gt; of &lt;em&gt;ConfirmService&lt;/em&gt;.
After this, calling activate on &lt;em&gt;ConfirmService&lt;/em&gt; will cause the function &lt;em&gt;activate&lt;/em&gt; from
&lt;em&gt;ConfirmComponent&lt;/em&gt; to be executed.&lt;/p&gt;

&lt;p&gt;Another important part of this component is method &lt;em&gt;ngOnInit&lt;/em&gt; from interface &lt;em&gt;OnInit&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngOnInit():any {
   this._confirmElement = document.getElementById(&#39;confirmationModal&#39;);
   this._cancelButton = document.getElementById(&#39;cancelButton&#39;);
   this._okButton = document.getElementById(&#39;okButton&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method collects references to the elements from view and assigns
them to private fields in my component class.
This why I got access to the dialog itself, the cancel button and the ok button.&lt;/p&gt;

&lt;p&gt;Having these references allows me to assign handlers to &lt;em&gt;on click&lt;/em&gt; events
on buttons and I can show a modal dialog. These happened in &lt;em&gt;_show&lt;/em&gt; method:&lt;/p&gt;

&lt;p&gt;On ok click:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this._okButton.onclick = ((e:any) =&amp;gt; {
   e.preventDefault();
   if (!positiveOnClick(e)) this._hideDialog()
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On cancel click:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this._confirmElement.onclick = () =&amp;gt; {
   this._hideDialog();
   return negativeOnClick(null);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to Show dialog:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this._confirmElement.style.opacity = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And of course I used modal dialog element reference to hide the dialog in method &lt;em&gt;_hideDialog&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private _hideDialog() {
   document.onkeyup = null;
   this._confirmElement.style.opacity = 0;
   window.setTimeout(() =&amp;gt; this._confirmElement.style.zIndex = -1, 400);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last import method in &lt;em&gt;ConfirmComponent&lt;/em&gt; is &lt;em&gt;activate&lt;/em&gt;, and this one is assigned to activate property of &lt;em&gt;ConfirmService&lt;/em&gt;. The code of this method is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;activate(message = this._defaults.message, title = this._defaults.title) {
   this._setLabels(message, title);

   let promise = new Promise&amp;lt;boolean&amp;gt;(resolve =&amp;gt; {
       this._show(resolve);
   });
   return promise;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The responsibilities of this method are to set the &lt;em&gt;title&lt;/em&gt; and &lt;em&gt;message&lt;/em&gt; properties,
create the promise, and passed
it to &lt;em&gt;_show&lt;/em&gt; method and finally return this promise to the caller. Nothing fancy here.&lt;/p&gt;

&lt;p&gt;The confirm is needed throughout the whole application. That’s why I added it to
the &lt;em&gt;AppComponent&lt;/em&gt;. Angular 2 has something which is called hierarchical
dependency injection system. In short, it means that if a parent component
has something injected as a dependency, in my case &lt;em&gt;AppComponent&lt;/em&gt;,
their children will get the same instance of this when they request it.
As all my components will be children of &lt;em&gt;AppComponent&lt;/em&gt;, all of them will
get access to the same &lt;em&gt;ConfirmSerivice&lt;/em&gt; instance.
My &lt;em&gt;AppComponent&lt;/em&gt; at that moment looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import {Component, OnInit} from &#39;angular2/core&#39;;

import {ConfirmService} from &amp;quot;./shared/confirm/confirm.service&amp;quot;;
import {ConfirmComponent} from &amp;quot;./shared/confirm/confirm.component&amp;quot;;

declare var componentHandler:any;

@Component({
   selector: &#39;notifier&#39;,
   templateUrl: &#39;app/app.component.html&#39;,
   directives: [ConfirmComponent],
   providers: [
       ConfirmService
   ]
})
export class AppComponent implements OnInit {

   title = &amp;quot;Notifier!!!&amp;quot;;

   constructor(private _confirmService:ConfirmService) {
   }

   showConfirmDialog() {
       this._confirmService.activate(&amp;quot;Are you sure?&amp;quot;)
           .then(res =&amp;gt; console.log(`Confirmed: ${res}`));
   }

   ngOnInit():any {
       componentHandler.upgradeDom();
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some parts of this file are especially important, for example, this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  directives: [ConfirmComponent],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I said that my component will be using other components, for now only one is specified:
&lt;em&gt;ConfirmComponent&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this fragment of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; providers: [ConfirmService]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I registered providers required by the &lt;em&gt;AppComponent&lt;/em&gt;. Actually, I only specified the type -
&lt;em&gt;ConfirmService&lt;/em&gt;, and  Angular 2 knows what it should do. I could be more verbose and instead
of this shorthand syntax, I could write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;providers: [
    provide(ConfirmService, {useClass: ConfirmService})
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there is no reason to do this as you can use something more concise.&lt;/p&gt;

&lt;p&gt;Another important part in &lt;em&gt;AppComponent&lt;/em&gt; is its constructor which looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;constructor(private _confirmService:ConfirmService) {
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I used shorthand syntax which created a private field for me and at the same time a parameter of constructor. This field is of type
&lt;em&gt;ConfirmService&lt;/em&gt; and an instance of that type is provided by Angular 2 dependency injection system.&lt;/p&gt;

&lt;p&gt;The method &lt;em&gt;showConfirmDialog&lt;/em&gt; had nothing special:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;showConfirmDialog() {
   this._confirmService.activate(&amp;quot;Are you sure?&amp;quot;)
       .then(res =&amp;gt; console.log(`Confirmed: ${res}`));
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I opened the confirm dialog and when it is closed I printed the choice that was made in the console.&lt;/p&gt;

&lt;p&gt;A very important thing happened in the method &lt;em&gt;ngOnInit&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngOnInit():any {
   componentHandler.upgradeDom();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line is especially important:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; componentHandler.upgradeDom();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Material Design Lite will automatically register and render all elements marked with MDL
classes upon the page load. However, in the case where you are creating DOM elements dynamically,
you need to register new elements by yourself using either &lt;em&gt;componentHandler.upgradeDom&lt;/em&gt; or
&lt;em&gt;componentHandler.upgradeElement&lt;/em&gt;. Without this line, MDL components won’t work with Angular 2.&lt;/p&gt;

&lt;p&gt;And that’s it. That’s my whole work. I added only to &lt;em&gt;app.component.html&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;modal-confirm&amp;gt;&amp;lt;/modal-confirm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also added some styling to the &lt;em&gt;ConfirmComponent&lt;/em&gt; by adding this line in the component decorator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @Component({
  //...
   styleUrls: [&#39;app/shared/confirm/confirm.component.css&#39;]
})

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And my final result looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/confirm/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking Ok I got this in a web browser console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/confirm/finalResultConsole.png&#34; alt=&#34;Final result in console&#34; title=&#34;Final result in console&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the whole source code of this solution in the
&lt;a href=&#34;https://github.com/pikoscielniak/notifier&#34; target=&#34;_blank&#34;&gt;github repository&lt;/a&gt;
for this project.&lt;/p&gt;

&lt;p&gt;My implementation of the confirm dialog component is based on the work of John Papa from the
&lt;a href=&#34;http://app.pluralsight.com/courses/angular-2-first-look&#34; target=&#34;_blank&#34;&gt;Angular 2 First Look Pluralsight&lt;/a&gt;
course. I made some changes to adjust his solution to my reality. In the next post, I am going to write about messing around with the application setup but this time from a different perspective. See you then.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;

























&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/accesing-api-with-token-from-google-identity-provider/&#34;&gt;Accessing API with token from Google Identity Provider&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/how-portable-is-asp-dot-net-core/&#34;&gt;How portable is ASP .NET Core 1.0?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/when-dotpeek-can-save-your-live/&#34;&gt;When dotPeek can save your live&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/reading-code-as-if-it-were-a-book/&#34;&gt;Reading code as if it were a book&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/aps-dot-net-core-configuration/&#34;&gt;ASP .NET Core Configuration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/getting-started-with-identity-server4/&#34;&gt;Getting started with IdentityServer4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/identityserver-4-accessing-api/&#34;&gt;IdentityServer4 - accessing API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/dealing-with-secrets-in-asp-net-core/&#34;&gt;Dealing with secrets in ASP .NET Core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/05/google-identity-provider-with-identityserver4/&#34;&gt;Google Identity Provider with IdentityServer4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>